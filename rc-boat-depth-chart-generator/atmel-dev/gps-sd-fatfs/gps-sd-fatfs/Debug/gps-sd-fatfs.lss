
gps-sd-fatfs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000032be  00003352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000478  00800126  00800126  00003378  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003378  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000033a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  000033e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a7a  00000000  00000000  00003630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f55  00000000  00000000  000080aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bbc  00000000  00000000  00008fff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b6c  00000000  00000000  0000bbbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa2  00000000  00000000  0000c728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000066ef  00000000  00000000  0000d1ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  000138b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
       2:	00 00       	nop
       4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
       6:	00 00       	nop
       8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
       a:	00 00       	nop
       c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
       e:	00 00       	nop
      10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
      12:	00 00       	nop
      14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
      16:	00 00       	nop
      18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
      22:	00 00       	nop
      24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
      26:	00 00       	nop
      28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
      32:	00 00       	nop
      34:	59 c0       	rjmp	.+178    	; 0xe8 <__bad_interrupt>
      36:	00 00       	nop
      38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
      42:	00 00       	nop
      44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
      46:	00 00       	nop
      48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
      52:	00 00       	nop
      54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
      56:	00 00       	nop
      58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
      62:	00 00       	nop
      64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
      66:	00 00       	nop
      68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
      72:	00 00       	nop
      74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
      76:	00 00       	nop
      78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
      82:	00 00       	nop
      84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
      86:	00 00       	nop
      88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 03       	fmul	r16, r16
      8e:	0f 03       	fmul	r16, r23
      90:	7f 03       	fmul	r23, r23
      92:	86 03       	fmuls	r16, r22
      94:	5f 04       	cpc	r5, r15
      96:	5f 04       	cpc	r5, r15
      98:	5f 04       	cpc	r5, r15
      9a:	5f 04       	cpc	r5, r15
      9c:	5f 04       	cpc	r5, r15
      9e:	5f 04       	cpc	r5, r15
      a0:	11 04       	cpc	r1, r1
      a2:	17 04       	cpc	r1, r7
      a4:	28 04       	cpc	r2, r8
      a6:	39 04       	cpc	r3, r9
      a8:	4d 04       	cpc	r4, r13

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d0 e4       	ldi	r29, 0x40	; 64
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	11 e0       	ldi	r17, 0x01	; 1
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	ee eb       	ldi	r30, 0xBE	; 190
      be:	f2 e3       	ldi	r31, 0x32	; 50
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	0b bf       	out	0x3b, r16	; 59
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
      c6:	07 90       	elpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a6 32       	cpi	r26, 0x26	; 38
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
      d0:	25 e0       	ldi	r18, 0x05	; 5
      d2:	a6 e2       	ldi	r26, 0x26	; 38
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	ae 39       	cpi	r26, 0x9E	; 158
      dc:	b2 07       	cpc	r27, r18
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 01 19 	call	0x3202	; 0x3202 <main>
      e4:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <_exit>

000000e8 <__bad_interrupt>:
      e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
      ea:	1c bc       	out	0x2c, r1	; 44

	DDRB  &= ~(SS|MOSI|SCK);	/* Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up */
      ec:	84 b1       	in	r24, 0x04	; 4
      ee:	8f 74       	andi	r24, 0x4F	; 79
      f0:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(SS|MOSI|SCK);
      f2:	85 b1       	in	r24, 0x05	; 5
      f4:	8f 74       	andi	r24, 0x4F	; 79
      f6:	85 b9       	out	0x05, r24	; 5
      f8:	08 95       	ret

000000fa <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
      fa:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
      fc:	0d b4       	in	r0, 0x2d	; 45
      fe:	07 fe       	sbrs	r0, 7
     100:	fd cf       	rjmp	.-6      	; 0xfc <xchg_spi+0x2>
	return SPDR;
     102:	8e b5       	in	r24, 0x2e	; 46
}
     104:	08 95       	ret

00000106 <wait_ready>:
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	BYTE d;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     106:	82 e3       	ldi	r24, 0x32	; 50
     108:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <Timer2>
	do
		d = xchg_spi(0xFF);
     10c:	8f ef       	ldi	r24, 0xFF	; 255
     10e:	f5 df       	rcall	.-22     	; 0xfa <xchg_spi>
	while (d != 0xFF && Timer2);
     110:	8f 3f       	cpi	r24, 0xFF	; 255
     112:	21 f0       	breq	.+8      	; 0x11c <wait_ready+0x16>
     114:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <Timer2>
     118:	91 11       	cpse	r25, r1
     11a:	f8 cf       	rjmp	.-16     	; 0x10c <wait_ready+0x6>

	return (d == 0xFF) ? 1 : 0;
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	8f 3f       	cpi	r24, 0xFF	; 255
     122:	11 f0       	breq	.+4      	; 0x128 <wait_ready+0x22>
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	30 e0       	ldi	r19, 0x00	; 0
}
     128:	c9 01       	movw	r24, r18
     12a:	08 95       	ret

0000012c <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     12c:	2c 9a       	sbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     12e:	8f ef       	ldi	r24, 0xFF	; 255
     130:	e4 cf       	rjmp	.-56     	; 0xfa <xchg_spi>
     132:	08 95       	ret

00000134 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
	CS_LOW();
     138:	2c 98       	cbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
     13a:	8f ef       	ldi	r24, 0xFF	; 255
     13c:	de df       	rcall	.-68     	; 0xfa <xchg_spi>

	if (wait_ready()) return 1;	/* OK */
     13e:	e3 df       	rcall	.-58     	; 0x106 <wait_ready>
     140:	ec 01       	movw	r28, r24
     142:	89 2b       	or	r24, r25
     144:	11 f4       	brne	.+4      	; 0x14a <select+0x16>
	deselect();
     146:	f2 df       	rcall	.-28     	; 0x12c <deselect>
     148:	02 c0       	rjmp	.+4      	; 0x14e <select+0x1a>
	return 0;	/* Timeout */
     14a:	c1 e0       	ldi	r28, 0x01	; 1
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready()) return 1;	/* OK */
     14c:	d0 e0       	ldi	r29, 0x00	; 0
     14e:	ce 01       	movw	r24, r28
	deselect();
	return 0;	/* Timeout */
}
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <rcvr_datablock>:
     156:	0f 93       	push	r16
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	08 2f       	mov	r16, r24
     160:	19 2f       	mov	r17, r25
     162:	eb 01       	movw	r28, r22
	BYTE token;


	Timer1 = 20;
     164:	84 e1       	ldi	r24, 0x14	; 20
     166:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
     16a:	8f ef       	ldi	r24, 0xFF	; 255
     16c:	c6 df       	rcall	.-116    	; 0xfa <xchg_spi>
	} while ((token == 0xFF) && Timer1);
     16e:	8f 3f       	cpi	r24, 0xFF	; 255
     170:	39 f4       	brne	.+14     	; 0x180 <rcvr_datablock+0x2a>
     172:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Timer1>
     176:	81 11       	cpse	r24, r1
     178:	f8 cf       	rjmp	.-16     	; 0x16a <rcvr_datablock+0x14>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	20 c0       	rjmp	.+64     	; 0x1c0 <rcvr_datablock+0x6a>
     180:	8e 3f       	cpi	r24, 0xFE	; 254
     182:	e1 f4       	brne	.+56     	; 0x1bc <rcvr_datablock+0x66>
     184:	e0 2f       	mov	r30, r16
     186:	f1 2f       	mov	r31, r17
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     188:	8f ef       	ldi	r24, 0xFF	; 255
     18a:	8e bd       	out	0x2e, r24	; 46
     18c:	0d b4       	in	r0, 0x2d	; 45
     18e:	07 fe       	sbrs	r0, 7
     190:	fd cf       	rjmp	.-6      	; 0x18c <rcvr_datablock+0x36>
     192:	9e b5       	in	r25, 0x2e	; 46
     194:	df 01       	movw	r26, r30
     196:	90 83       	st	Z, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     198:	8e bd       	out	0x2e, r24	; 46
     19a:	0d b4       	in	r0, 0x2d	; 45
     19c:	07 fe       	sbrs	r0, 7
     19e:	fd cf       	rjmp	.-6      	; 0x19a <rcvr_datablock+0x44>
     1a0:	9e b5       	in	r25, 0x2e	; 46
     1a2:	11 96       	adiw	r26, 0x01	; 1
     1a4:	9c 93       	st	X, r25
	} while (cnt -= 2);
     1a6:	22 97       	sbiw	r28, 0x02	; 2
     1a8:	32 96       	adiw	r30, 0x02	; 2
     1aa:	20 97       	sbiw	r28, 0x00	; 0
     1ac:	71 f7       	brne	.-36     	; 0x18a <rcvr_datablock+0x34>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
     1ae:	8f ef       	ldi	r24, 0xFF	; 255
     1b0:	a4 df       	rcall	.-184    	; 0xfa <xchg_spi>
	xchg_spi(0xFF);
     1b2:	8f ef       	ldi	r24, 0xFF	; 255
     1b4:	a2 df       	rcall	.-188    	; 0xfa <xchg_spi>
     1b6:	81 e0       	ldi	r24, 0x01	; 1

	return 1;						/* Return with success */
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <rcvr_datablock+0x6a>
     1bc:	80 e0       	ldi	r24, 0x00	; 0

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	df 91       	pop	r29
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
     1c2:	cf 91       	pop	r28
     1c4:	1f 91       	pop	r17
     1c6:	0f 91       	pop	r16
     1c8:	08 95       	ret

000001ca <xmit_datablock>:
     1ca:	1f 93       	push	r17
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	ec 01       	movw	r28, r24
     1d2:	16 2f       	mov	r17, r22
	BYTE resp;


	if (!wait_ready()) return 0;
     1d4:	98 df       	rcall	.-208    	; 0x106 <wait_ready>
     1d6:	00 97       	sbiw	r24, 0x00	; 0
     1d8:	41 f1       	breq	.+80     	; 0x22a <xmit_datablock+0x60>

	xchg_spi(token);					/* Xmit data token */
     1da:	81 2f       	mov	r24, r17
     1dc:	8e df       	rcall	.-228    	; 0xfa <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
     1de:	1d 3f       	cpi	r17, 0xFD	; 253
     1e0:	11 f1       	breq	.+68     	; 0x226 <xmit_datablock+0x5c>
     1e2:	fe 01       	movw	r30, r28
     1e4:	9e 01       	movw	r18, r28
     1e6:	3e 5f       	subi	r19, 0xFE	; 254
     1e8:	df 01       	movw	r26, r30
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     1ea:	90 81       	ld	r25, Z
     1ec:	9e bd       	out	0x2e, r25	; 46
     1ee:	0d b4       	in	r0, 0x2d	; 45
     1f0:	07 fe       	sbrs	r0, 7
     1f2:	fd cf       	rjmp	.-6      	; 0x1ee <xmit_datablock+0x24>
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     1f4:	11 96       	adiw	r26, 0x01	; 1
     1f6:	9c 91       	ld	r25, X
     1f8:	9e bd       	out	0x2e, r25	; 46
     1fa:	0d b4       	in	r0, 0x2d	; 45
     1fc:	07 fe       	sbrs	r0, 7
     1fe:	fd cf       	rjmp	.-6      	; 0x1fa <xmit_datablock+0x30>
     200:	32 96       	adiw	r30, 0x02	; 2
	} while (cnt -= 2);
     202:	e2 17       	cp	r30, r18
     204:	f3 07       	cpc	r31, r19
	if (!wait_ready()) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
     206:	81 f7       	brne	.-32     	; 0x1e8 <xmit_datablock+0x1e>
     208:	8f ef       	ldi	r24, 0xFF	; 255
		xchg_spi(0xFF);
     20a:	77 df       	rcall	.-274    	; 0xfa <xchg_spi>
     20c:	8f ef       	ldi	r24, 0xFF	; 255
		resp = xchg_spi(0xFF);			/* Reveive data response */
     20e:	75 df       	rcall	.-278    	; 0xfa <xchg_spi>
     210:	8f ef       	ldi	r24, 0xFF	; 255
     212:	73 df       	rcall	.-282    	; 0xfa <xchg_spi>
)
{
	BYTE resp;


	if (!wait_ready()) return 0;
     214:	8f 71       	andi	r24, 0x1F	; 31
     216:	31 e0       	ldi	r19, 0x01	; 1
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	85 30       	cpi	r24, 0x05	; 5
     21c:	09 f0       	breq	.+2      	; 0x220 <xmit_datablock+0x56>
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	83 2f       	mov	r24, r19
     222:	92 2f       	mov	r25, r18
     224:	02 c0       	rjmp	.+4      	; 0x22a <xmit_datablock+0x60>
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	90 e0       	ldi	r25, 0x00	; 0
}
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	1f 91       	pop	r17
     230:	08 95       	ret

00000232 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     232:	ff 92       	push	r15
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	c8 2f       	mov	r28, r24
     23e:	d4 2f       	mov	r29, r20
     240:	15 2f       	mov	r17, r21
     242:	06 2f       	mov	r16, r22
     244:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     246:	88 23       	and	r24, r24
     248:	44 f4       	brge	.+16     	; 0x25a <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	ba 01       	movw	r22, r20
     250:	87 e3       	ldi	r24, 0x37	; 55
     252:	ef df       	rcall	.-34     	; 0x232 <send_cmd>
		if (res > 1) return res;
     254:	82 30       	cpi	r24, 0x02	; 2
     256:	50 f5       	brcc	.+84     	; 0x2ac <send_cmd+0x7a>
	}

	/* Select the card and wait for ready */
	deselect();
     258:	cf 77       	andi	r28, 0x7F	; 127
	if (!select()) return 0xFF;
     25a:	68 df       	rcall	.-304    	; 0x12c <deselect>
     25c:	6b df       	rcall	.-298    	; 0x134 <select>
     25e:	89 2b       	or	r24, r25

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     260:	e9 f0       	breq	.+58     	; 0x29c <send_cmd+0x6a>
     262:	8c 2f       	mov	r24, r28
     264:	80 64       	ori	r24, 0x40	; 64
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     266:	49 df       	rcall	.-366    	; 0xfa <xchg_spi>
     268:	8f 2d       	mov	r24, r15
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     26a:	47 df       	rcall	.-370    	; 0xfa <xchg_spi>
     26c:	80 2f       	mov	r24, r16
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     26e:	45 df       	rcall	.-374    	; 0xfa <xchg_spi>
     270:	81 2f       	mov	r24, r17
     272:	43 df       	rcall	.-378    	; 0xfa <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     274:	8d 2f       	mov	r24, r29
     276:	41 df       	rcall	.-382    	; 0xfa <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     278:	cc 23       	and	r28, r28
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     27a:	a9 f0       	breq	.+42     	; 0x2a6 <send_cmd+0x74>
     27c:	c8 30       	cpi	r28, 0x08	; 8
	xchg_spi(n);
     27e:	81 f0       	breq	.+32     	; 0x2a0 <send_cmd+0x6e>
     280:	81 e0       	ldi	r24, 0x01	; 1

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     282:	3b df       	rcall	.-394    	; 0xfa <xchg_spi>
     284:	cc 30       	cpi	r28, 0x0C	; 12
     286:	11 f4       	brne	.+4      	; 0x28c <send_cmd+0x5a>
     288:	8f ef       	ldi	r24, 0xFF	; 255
     28a:	37 df       	rcall	.-402    	; 0xfa <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     28c:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
     28e:	8f ef       	ldi	r24, 0xFF	; 255
     290:	34 df       	rcall	.-408    	; 0xfa <xchg_spi>
	while ((res & 0x80) && --n);
     292:	88 23       	and	r24, r24
     294:	5c f4       	brge	.+22     	; 0x2ac <send_cmd+0x7a>
     296:	c1 50       	subi	r28, 0x01	; 1
     298:	d1 f7       	brne	.-12     	; 0x28e <send_cmd+0x5c>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     29a:	08 c0       	rjmp	.+16     	; 0x2ac <send_cmd+0x7a>
     29c:	8f ef       	ldi	r24, 0xFF	; 255
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     29e:	06 c0       	rjmp	.+12     	; 0x2ac <send_cmd+0x7a>
     2a0:	87 e8       	ldi	r24, 0x87	; 135
     2a2:	2b df       	rcall	.-426    	; 0xfa <xchg_spi>
     2a4:	f3 cf       	rjmp	.-26     	; 0x28c <send_cmd+0x5a>
     2a6:	85 e9       	ldi	r24, 0x95	; 149
     2a8:	28 df       	rcall	.-432    	; 0xfa <xchg_spi>
     2aa:	f0 cf       	rjmp	.-32     	; 0x28c <send_cmd+0x5a>
     2ac:	df 91       	pop	r29
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
     2ae:	cf 91       	pop	r28
     2b0:	1f 91       	pop	r17
     2b2:	0f 91       	pop	r16
     2b4:	ff 90       	pop	r15
     2b6:	08 95       	ret

000002b8 <disk_initialize>:
     2b8:	cf 92       	push	r12
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     2ba:	df 92       	push	r13
     2bc:	ef 92       	push	r14
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <disk_initialize+0x12>
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <disk_initialize+0x14>
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
     2d0:	81 11       	cpse	r24, r1
     2d2:	9c c0       	rjmp	.+312    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	power_off();						/* Turn off the socket power to reset the card */
     2d4:	0a df       	rcall	.-492    	; 0xea <power_off>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     2d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2da:	81 ff       	sbrs	r24, 1
     2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <disk_initialize+0x2c>
     2de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2e2:	9f c0       	rjmp	.+318    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
// 		PORTE &= ~_BV(7);	/* Socket power on (PE7=low) */
// 		DDRE |= _BV(7);
// 		for (Timer1 = 2; Timer1; );	/* Wait for 20ms */
// 	}

	PORTB |= SS|MOSI;	/* Configure SCK/MOSI/CS as output */
     2e4:	85 b1       	in	r24, 0x05	; 5
     2e6:	80 63       	ori	r24, 0x30	; 48
     2e8:	85 b9       	out	0x05, r24	; 5
	DDRB  |= SS|MOSI|SCK;
     2ea:	84 b1       	in	r24, 0x04	; 4
     2ec:	80 6b       	ori	r24, 0xB0	; 176
     2ee:	84 b9       	out	0x04, r24	; 4

	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     2f0:	81 e5       	ldi	r24, 0x51	; 81
     2f2:	8c bd       	out	0x2c, r24	; 44

	if (drv) return STA_NOINIT;			/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
     2f4:	82 e5       	ldi	r24, 0x52	; 82
     2f6:	8c bd       	out	0x2c, r24	; 44
     2f8:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
     2fa:	8f ef       	ldi	r24, 0xFF	; 255
     2fc:	fe de       	rcall	.-516    	; 0xfa <xchg_spi>
     2fe:	11 50       	subi	r17, 0x01	; 1
     300:	e1 f7       	brne	.-8      	; 0x2fa <disk_initialize+0x42>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     302:	40 e0       	ldi	r20, 0x00	; 0
     304:	50 e0       	ldi	r21, 0x00	; 0
     306:	ba 01       	movw	r22, r20
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	93 df       	rcall	.-218    	; 0x232 <send_cmd>
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	09 f0       	breq	.+2      	; 0x312 <disk_initialize+0x5a>
     310:	84 c0       	rjmp	.+264    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     312:	84 e6       	ldi	r24, 0x64	; 100
     314:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
     318:	4a ea       	ldi	r20, 0xAA	; 170
     31a:	51 e0       	ldi	r21, 0x01	; 1
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	88 e0       	ldi	r24, 0x08	; 8
     322:	87 df       	rcall	.-242    	; 0x232 <send_cmd>
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	09 f0       	breq	.+2      	; 0x32a <disk_initialize+0x72>
     328:	3d c0       	rjmp	.+122    	; 0x3a4 <disk_initialize+0xec>
     32a:	ce 01       	movw	r24, r28
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	6c 01       	movw	r12, r24
     330:	7e 01       	movw	r14, r28
     332:	95 e0       	ldi	r25, 0x05	; 5
     334:	e9 0e       	add	r14, r25
     336:	f1 1c       	adc	r15, r1
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
     338:	86 01       	movw	r16, r12
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	de de       	rcall	.-580    	; 0xfa <xchg_spi>
     33e:	f8 01       	movw	r30, r16
     340:	81 93       	st	Z+, r24
     342:	8f 01       	movw	r16, r30
     344:	ee 15       	cp	r30, r14
     346:	ff 05       	cpc	r31, r15
     348:	c1 f7       	brne	.-16     	; 0x33a <disk_initialize+0x82>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     34a:	8b 81       	ldd	r24, Y+3	; 0x03
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	09 f0       	breq	.+2      	; 0x352 <disk_initialize+0x9a>
     350:	64 c0       	rjmp	.+200    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     352:	8c 81       	ldd	r24, Y+4	; 0x04
     354:	8a 3a       	cpi	r24, 0xAA	; 170
     356:	09 f0       	breq	.+2      	; 0x35a <disk_initialize+0xa2>
     358:	60 c0       	rjmp	.+192    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     35a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Timer1>
     35e:	88 23       	and	r24, r24
     360:	41 f0       	breq	.+16     	; 0x372 <disk_initialize+0xba>
     362:	40 e0       	ldi	r20, 0x00	; 0
     364:	50 e0       	ldi	r21, 0x00	; 0
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e4       	ldi	r23, 0x40	; 64
     36a:	89 ea       	ldi	r24, 0xA9	; 169
     36c:	62 df       	rcall	.-316    	; 0x232 <send_cmd>
     36e:	81 11       	cpse	r24, r1
     370:	f4 cf       	rjmp	.-24     	; 0x35a <disk_initialize+0xa2>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     372:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Timer1>
     376:	88 23       	and	r24, r24
     378:	09 f4       	brne	.+2      	; 0x37c <disk_initialize+0xc4>
     37a:	4f c0       	rjmp	.+158    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     37c:	40 e0       	ldi	r20, 0x00	; 0
     37e:	50 e0       	ldi	r21, 0x00	; 0
     380:	ba 01       	movw	r22, r20
     382:	8a e3       	ldi	r24, 0x3A	; 58
     384:	56 df       	rcall	.-340    	; 0x232 <send_cmd>
     386:	81 11       	cpse	r24, r1
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
     388:	48 c0       	rjmp	.+144    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     38a:	8f ef       	ldi	r24, 0xFF	; 255
     38c:	b6 de       	rcall	.-660    	; 0xfa <xchg_spi>
     38e:	f6 01       	movw	r30, r12
     390:	81 93       	st	Z+, r24
     392:	6f 01       	movw	r12, r30
     394:	ee 16       	cp	r14, r30
     396:	ff 06       	cpc	r15, r31
     398:	c1 f7       	brne	.-16     	; 0x38a <disk_initialize+0xd2>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	86 fd       	sbrc	r24, 6
     39e:	38 c0       	rjmp	.+112    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3a0:	84 e0       	ldi	r24, 0x04	; 4
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     3a2:	37 c0       	rjmp	.+110    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	ba 01       	movw	r22, r20
     3aa:	89 ea       	ldi	r24, 0xA9	; 169
     3ac:	42 df       	rcall	.-380    	; 0x232 <send_cmd>
     3ae:	82 30       	cpi	r24, 0x02	; 2
     3b0:	18 f0       	brcs	.+6      	; 0x3b8 <disk_initialize+0x100>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     3b2:	01 e0       	ldi	r16, 0x01	; 1
     3b4:	11 e0       	ldi	r17, 0x01	; 1
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <disk_initialize+0x104>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     3b8:	02 e0       	ldi	r16, 0x02	; 2
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     3ba:	19 ea       	ldi	r17, 0xA9	; 169
     3bc:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Timer1>
     3c0:	88 23       	and	r24, r24
     3c2:	39 f0       	breq	.+14     	; 0x3d2 <disk_initialize+0x11a>
     3c4:	40 e0       	ldi	r20, 0x00	; 0
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	ba 01       	movw	r22, r20
     3ca:	81 2f       	mov	r24, r17
     3cc:	32 df       	rcall	.-412    	; 0x232 <send_cmd>
     3ce:	81 11       	cpse	r24, r1
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     3d0:	f5 cf       	rjmp	.-22     	; 0x3bc <disk_initialize+0x104>
     3d2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Timer1>
     3d6:	88 23       	and	r24, r24
     3d8:	01 f1       	breq	.+64     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3da:	40 e0       	ldi	r20, 0x00	; 0
     3dc:	52 e0       	ldi	r21, 0x02	; 2
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	80 e1       	ldi	r24, 0x10	; 16
     3e4:	26 df       	rcall	.-436    	; 0x232 <send_cmd>
     3e6:	81 11       	cpse	r24, r1
				ty = 0;
		}
	}
	CardType = ty;
     3e8:	18 c0       	rjmp	.+48     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3ea:	00 93 26 01 	sts	0x0126, r16	; 0x800126 <__data_end>
	deselect();

	if (ty) {			/* Initialization succeded */
     3ee:	9e de       	rcall	.-708    	; 0x12c <deselect>
     3f0:	00 23       	and	r16, r16
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     3f2:	41 f0       	breq	.+16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3f8:	8e 7f       	andi	r24, 0xFE	; 254
     3fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		FCLK_FAST();
     3fe:	80 e5       	ldi	r24, 0x50	; 80
	} else {			/* Initialization failed */
		power_off();
     400:	8c bd       	out	0x2c, r24	; 44
	}

	return Stat;
     402:	01 c0       	rjmp	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     404:	72 de       	rcall	.-796    	; 0xea <power_off>
     406:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
     40a:	0b c0       	rjmp	.+22     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     40c:	81 e0       	ldi	r24, 0x01	; 1
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
     40e:	09 c0       	rjmp	.+18     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     410:	8c e0       	ldi	r24, 0x0C	; 12
	deselect();
     412:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
     416:	8a de       	rcall	.-748    	; 0x12c <deselect>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
     418:	ed cf       	rjmp	.-38     	; 0x3f4 <disk_initialize+0x13c>
     41a:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
	deselect();
     41e:	86 de       	rcall	.-756    	; 0x12c <deselect>
     420:	f1 cf       	rjmp	.-30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	08 95       	ret

0000043c <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     43c:	81 11       	cpse	r24, r1
     43e:	03 c0       	rjmp	.+6      	; 0x446 <disk_status+0xa>
	return Stat;
     440:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     444:	08 95       	ret

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     446:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
     448:	08 95       	ret

0000044a <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     44a:	0f 93       	push	r16
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     452:	81 11       	cpse	r24, r1
     454:	3e c0       	rjmp	.+124    	; 0x4d2 <disk_read+0x88>
     456:	00 23       	and	r16, r16
     458:	09 f4       	brne	.+2      	; 0x45c <disk_read+0x12>
     45a:	3d c0       	rjmp	.+122    	; 0x4d6 <disk_read+0x8c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     45c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     460:	80 fd       	sbrc	r24, 0
     462:	3b c0       	rjmp	.+118    	; 0x4da <disk_read+0x90>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     464:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     468:	83 fd       	sbrc	r24, 3
     46a:	09 c0       	rjmp	.+18     	; 0x47e <disk_read+0x34>
     46c:	01 2e       	mov	r0, r17
     46e:	19 e0       	ldi	r17, 0x09	; 9
     470:	22 0f       	add	r18, r18
     472:	33 1f       	adc	r19, r19
     474:	44 1f       	adc	r20, r20
     476:	55 1f       	adc	r21, r21
     478:	1a 95       	dec	r17
     47a:	d1 f7       	brne	.-12     	; 0x470 <disk_read+0x26>
     47c:	10 2d       	mov	r17, r0

	if (count == 1) {	/* Single block read */
     47e:	01 30       	cpi	r16, 0x01	; 1
     480:	71 f4       	brne	.+28     	; 0x49e <disk_read+0x54>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     482:	ba 01       	movw	r22, r20
     484:	a9 01       	movw	r20, r18
     486:	81 e1       	ldi	r24, 0x11	; 17
     488:	d4 de       	rcall	.-600    	; 0x232 <send_cmd>
     48a:	81 11       	cpse	r24, r1
     48c:	1c c0       	rjmp	.+56     	; 0x4c6 <disk_read+0x7c>
			&& rcvr_datablock(buff, 512))
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	72 e0       	ldi	r23, 0x02	; 2
     492:	ce 01       	movw	r24, r28
     494:	60 de       	rcall	.-832    	; 0x156 <rcvr_datablock>
     496:	89 2b       	or	r24, r25
     498:	b1 f0       	breq	.+44     	; 0x4c6 <disk_read+0x7c>
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	14 c0       	rjmp	.+40     	; 0x4c6 <disk_read+0x7c>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     49e:	ba 01       	movw	r22, r20
     4a0:	a9 01       	movw	r20, r18
     4a2:	82 e1       	ldi	r24, 0x12	; 18
     4a4:	c6 de       	rcall	.-628    	; 0x232 <send_cmd>
     4a6:	81 11       	cpse	r24, r1
     4a8:	0e c0       	rjmp	.+28     	; 0x4c6 <disk_read+0x7c>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	72 e0       	ldi	r23, 0x02	; 2
     4ae:	ce 01       	movw	r24, r28
     4b0:	52 de       	rcall	.-860    	; 0x156 <rcvr_datablock>
     4b2:	89 2b       	or	r24, r25
     4b4:	19 f0       	breq	.+6      	; 0x4bc <disk_read+0x72>
				buff += 512;
     4b6:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
     4b8:	01 50       	subi	r16, 0x01	; 1
     4ba:	b9 f7       	brne	.-18     	; 0x4aa <disk_read+0x60>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     4bc:	40 e0       	ldi	r20, 0x00	; 0
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	ba 01       	movw	r22, r20
     4c2:	8c e0       	ldi	r24, 0x0C	; 12
		}
	}
	deselect();
     4c4:	b6 de       	rcall	.-660    	; 0x232 <send_cmd>
     4c6:	32 de       	rcall	.-924    	; 0x12c <deselect>

	return count ? RES_ERROR : RES_OK;
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	01 11       	cpse	r16, r1
     4cc:	07 c0       	rjmp	.+14     	; 0x4dc <disk_read+0x92>
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	05 c0       	rjmp	.+10     	; 0x4dc <disk_read+0x92>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
     4d2:	84 e0       	ldi	r24, 0x04	; 4
     4d4:	03 c0       	rjmp	.+6      	; 0x4dc <disk_read+0x92>
     4d6:	84 e0       	ldi	r24, 0x04	; 4
     4d8:	01 c0       	rjmp	.+2      	; 0x4dc <disk_read+0x92>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     4da:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	0f 91       	pop	r16
     4e2:	08 95       	ret

000004e4 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	eb 01       	movw	r28, r22
     4f4:	69 01       	movw	r12, r18
     4f6:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     4f8:	81 11       	cpse	r24, r1
     4fa:	4a c0       	rjmp	.+148    	; 0x590 <disk_write+0xac>
     4fc:	00 23       	and	r16, r16
     4fe:	09 f4       	brne	.+2      	; 0x502 <disk_write+0x1e>
     500:	49 c0       	rjmp	.+146    	; 0x594 <disk_write+0xb0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     502:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     506:	80 fd       	sbrc	r24, 0
     508:	47 c0       	rjmp	.+142    	; 0x598 <disk_write+0xb4>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     50a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     50e:	82 fd       	sbrc	r24, 2
     510:	45 c0       	rjmp	.+138    	; 0x59c <disk_write+0xb8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     512:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     516:	83 fd       	sbrc	r24, 3
     518:	09 c0       	rjmp	.+18     	; 0x52c <disk_write+0x48>
     51a:	0b 2e       	mov	r0, r27
     51c:	b9 e0       	ldi	r27, 0x09	; 9
     51e:	cc 0c       	add	r12, r12
     520:	dd 1c       	adc	r13, r13
     522:	ee 1c       	adc	r14, r14
     524:	ff 1c       	adc	r15, r15
     526:	ba 95       	dec	r27
     528:	d1 f7       	brne	.-12     	; 0x51e <disk_write+0x3a>
     52a:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
     52c:	01 30       	cpi	r16, 0x01	; 1
     52e:	69 f4       	brne	.+26     	; 0x54a <disk_write+0x66>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     530:	b7 01       	movw	r22, r14
     532:	a6 01       	movw	r20, r12
     534:	88 e1       	ldi	r24, 0x18	; 24
     536:	7d de       	rcall	.-774    	; 0x232 <send_cmd>
     538:	81 11       	cpse	r24, r1
     53a:	24 c0       	rjmp	.+72     	; 0x584 <disk_write+0xa0>
			&& xmit_datablock(buff, 0xFE))
     53c:	6e ef       	ldi	r22, 0xFE	; 254
     53e:	ce 01       	movw	r24, r28
     540:	44 de       	rcall	.-888    	; 0x1ca <xmit_datablock>
     542:	89 2b       	or	r24, r25
     544:	f9 f0       	breq	.+62     	; 0x584 <disk_write+0xa0>
     546:	00 e0       	ldi	r16, 0x00	; 0
     548:	1d c0       	rjmp	.+58     	; 0x584 <disk_write+0xa0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     54a:	86 70       	andi	r24, 0x06	; 6
     54c:	31 f0       	breq	.+12     	; 0x55a <disk_write+0x76>
     54e:	40 2f       	mov	r20, r16
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	60 e0       	ldi	r22, 0x00	; 0
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	87 e9       	ldi	r24, 0x97	; 151
     558:	6c de       	rcall	.-808    	; 0x232 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     55a:	b7 01       	movw	r22, r14
     55c:	a6 01       	movw	r20, r12
     55e:	89 e1       	ldi	r24, 0x19	; 25
     560:	68 de       	rcall	.-816    	; 0x232 <send_cmd>
     562:	81 11       	cpse	r24, r1
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     564:	0f c0       	rjmp	.+30     	; 0x584 <disk_write+0xa0>
     566:	6c ef       	ldi	r22, 0xFC	; 252
     568:	ce 01       	movw	r24, r28
     56a:	2f de       	rcall	.-930    	; 0x1ca <xmit_datablock>
     56c:	89 2b       	or	r24, r25
     56e:	19 f0       	breq	.+6      	; 0x576 <disk_write+0x92>
				buff += 512;
     570:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
     572:	01 50       	subi	r16, 0x01	; 1
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     574:	c1 f7       	brne	.-16     	; 0x566 <disk_write+0x82>
     576:	6d ef       	ldi	r22, 0xFD	; 253
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	26 de       	rcall	.-948    	; 0x1ca <xmit_datablock>
     57e:	89 2b       	or	r24, r25
				count = 1;
     580:	09 f4       	brne	.+2      	; 0x584 <disk_write+0xa0>
		}
	}
	deselect();
     582:	01 e0       	ldi	r16, 0x01	; 1
     584:	d3 dd       	rcall	.-1114   	; 0x12c <deselect>

	return count ? RES_ERROR : RES_OK;
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	01 11       	cpse	r16, r1
     58a:	09 c0       	rjmp	.+18     	; 0x59e <disk_write+0xba>
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	07 c0       	rjmp	.+14     	; 0x59e <disk_write+0xba>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
     590:	84 e0       	ldi	r24, 0x04	; 4
     592:	05 c0       	rjmp	.+10     	; 0x59e <disk_write+0xba>
     594:	84 e0       	ldi	r24, 0x04	; 4
     596:	03 c0       	rjmp	.+6      	; 0x59e <disk_write+0xba>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     598:	83 e0       	ldi	r24, 0x03	; 3
     59a:	01 c0       	rjmp	.+2      	; 0x59e <disk_write+0xba>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     59c:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	0f 91       	pop	r16
     5a4:	ff 90       	pop	r15
     5a6:	ef 90       	pop	r14
     5a8:	df 90       	pop	r13
     5aa:	cf 90       	pop	r12
     5ac:	08 95       	ret

000005ae <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	60 97       	sbiw	r28, 0x10	; 16
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (drv) return RES_PARERR;
     5ca:	81 11       	cpse	r24, r1
     5cc:	92 c1       	rjmp	.+804    	; 0x8f2 <disk_ioctl+0x344>
     5ce:	8a 01       	movw	r16, r20

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     5d0:	65 30       	cpi	r22, 0x05	; 5
     5d2:	79 f4       	brne	.+30     	; 0x5f2 <disk_ioctl+0x44>
		switch (ptr[0]) {
     5d4:	fa 01       	movw	r30, r20
     5d6:	80 81       	ld	r24, Z
     5d8:	88 23       	and	r24, r24
     5da:	19 f0       	breq	.+6      	; 0x5e2 <disk_ioctl+0x34>
     5dc:	81 30       	cpi	r24, 0x01	; 1
     5de:	21 f0       	breq	.+8      	; 0x5e8 <disk_ioctl+0x3a>
     5e0:	8a c1       	rjmp	.+788    	; 0x8f6 <disk_ioctl+0x348>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
     5e2:	83 dd       	rcall	.-1274   	; 0xea <power_off>
			res = RES_OK;
     5e4:	80 e0       	ldi	r24, 0x00	; 0
			break;
     5e6:	8a c1       	rjmp	.+788    	; 0x8fc <disk_ioctl+0x34e>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	fa 01       	movw	r30, r20
     5ec:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
     5ee:	80 e0       	ldi	r24, 0x00	; 0
			break;
     5f0:	85 c1       	rjmp	.+778    	; 0x8fc <disk_ioctl+0x34e>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     5f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5f6:	80 fd       	sbrc	r24, 0
     5f8:	80 c1       	rjmp	.+768    	; 0x8fa <disk_ioctl+0x34c>

		switch (ctrl) {
     5fa:	86 2f       	mov	r24, r22
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	8f 30       	cpi	r24, 0x0F	; 15
     600:	91 05       	cpc	r25, r1
     602:	08 f0       	brcs	.+2      	; 0x606 <disk_ioctl+0x58>
     604:	5c c1       	rjmp	.+696    	; 0x8be <disk_ioctl+0x310>
     606:	fc 01       	movw	r30, r24
     608:	ea 5b       	subi	r30, 0xBA	; 186
     60a:	ff 4f       	sbci	r31, 0xFF	; 255
     60c:	0c 94 3b 19 	jmp	0x3276	; 0x3276 <__tablejump2__>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
     610:	91 dd       	rcall	.-1246   	; 0x134 <select>
     612:	89 2b       	or	r24, r25
     614:	09 f4       	brne	.+2      	; 0x618 <disk_ioctl+0x6a>
				deselect();
     616:	55 c1       	rjmp	.+682    	; 0x8c2 <disk_ioctl+0x314>
     618:	89 dd       	rcall	.-1262   	; 0x12c <deselect>
				res = RES_OK;
     61a:	10 e0       	ldi	r17, 0x00	; 0
     61c:	67 c1       	rjmp	.+718    	; 0x8ec <disk_ioctl+0x33e>
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     61e:	40 e0       	ldi	r20, 0x00	; 0
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	ba 01       	movw	r22, r20
     624:	89 e0       	ldi	r24, 0x09	; 9
     626:	05 de       	rcall	.-1014   	; 0x232 <send_cmd>
     628:	81 11       	cpse	r24, r1
     62a:	4d c1       	rjmp	.+666    	; 0x8c6 <disk_ioctl+0x318>
     62c:	60 e1       	ldi	r22, 0x10	; 16
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	ce 01       	movw	r24, r28
     632:	01 96       	adiw	r24, 0x01	; 1
     634:	90 dd       	rcall	.-1248   	; 0x156 <rcvr_datablock>
     636:	89 2b       	or	r24, r25
     638:	09 f4       	brne	.+2      	; 0x63c <disk_ioctl+0x8e>
     63a:	47 c1       	rjmp	.+654    	; 0x8ca <disk_ioctl+0x31c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     63c:	89 81       	ldd	r24, Y+1	; 0x01
     63e:	82 95       	swap	r24
     640:	86 95       	lsr	r24
     642:	86 95       	lsr	r24
     644:	83 70       	andi	r24, 0x03	; 3
     646:	81 30       	cpi	r24, 0x01	; 1
     648:	31 f5       	brne	.+76     	; 0x696 <disk_ioctl+0xe8>
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
     64a:	29 85       	ldd	r18, Y+9	; 0x09
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	32 2f       	mov	r19, r18
     650:	22 27       	eor	r18, r18
     652:	8a 85       	ldd	r24, Y+10	; 0x0a
     654:	28 0f       	add	r18, r24
     656:	31 1d       	adc	r19, r1
     658:	88 85       	ldd	r24, Y+8	; 0x08
     65a:	8f 73       	andi	r24, 0x3F	; 63
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	a0 e0       	ldi	r26, 0x00	; 0
     660:	b0 e0       	ldi	r27, 0x00	; 0
     662:	dc 01       	movw	r26, r24
     664:	99 27       	eor	r25, r25
     666:	88 27       	eor	r24, r24
     668:	01 96       	adiw	r24, 0x01	; 1
     66a:	a1 1d       	adc	r26, r1
     66c:	b1 1d       	adc	r27, r1
     66e:	82 0f       	add	r24, r18
     670:	93 1f       	adc	r25, r19
     672:	a1 1d       	adc	r26, r1
     674:	b1 1d       	adc	r27, r1
     676:	07 2e       	mov	r0, r23
     678:	7a e0       	ldi	r23, 0x0A	; 10
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	aa 1f       	adc	r26, r26
     680:	bb 1f       	adc	r27, r27
     682:	7a 95       	dec	r23
     684:	d1 f7       	brne	.-12     	; 0x67a <disk_ioctl+0xcc>
     686:	70 2d       	mov	r23, r0
     688:	f8 01       	movw	r30, r16
     68a:	80 83       	st	Z, r24
     68c:	91 83       	std	Z+1, r25	; 0x01
     68e:	a2 83       	std	Z+2, r26	; 0x02
     690:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
				}
				res = RES_OK;
     692:	10 e0       	ldi	r17, 0x00	; 0
     694:	2b c1       	rjmp	.+598    	; 0x8ec <disk_ioctl+0x33e>
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
     696:	29 85       	ldd	r18, Y+9	; 0x09
     698:	22 95       	swap	r18
     69a:	26 95       	lsr	r18
     69c:	26 95       	lsr	r18
     69e:	23 70       	andi	r18, 0x03	; 3
     6a0:	88 85       	ldd	r24, Y+8	; 0x08
     6a2:	f4 e0       	ldi	r31, 0x04	; 4
     6a4:	8f 9f       	mul	r24, r31
     6a6:	c0 01       	movw	r24, r0
     6a8:	11 24       	eor	r1, r1
     6aa:	82 0f       	add	r24, r18
     6ac:	91 1d       	adc	r25, r1
     6ae:	9c 01       	movw	r18, r24
     6b0:	2f 5f       	subi	r18, 0xFF	; 255
     6b2:	3f 4f       	sbci	r19, 0xFF	; 255
     6b4:	8f 81       	ldd	r24, Y+7	; 0x07
     6b6:	83 70       	andi	r24, 0x03	; 3
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	98 2f       	mov	r25, r24
     6bc:	88 27       	eor	r24, r24
     6be:	99 0f       	add	r25, r25
     6c0:	99 0f       	add	r25, r25
     6c2:	82 0f       	add	r24, r18
     6c4:	93 1f       	adc	r25, r19
     6c6:	a0 e0       	ldi	r26, 0x00	; 0
     6c8:	b0 e0       	ldi	r27, 0x00	; 0
     6ca:	3e 81       	ldd	r19, Y+6	; 0x06
     6cc:	3f 70       	andi	r19, 0x0F	; 15
     6ce:	2b 85       	ldd	r18, Y+11	; 0x0b
     6d0:	22 1f       	adc	r18, r18
     6d2:	22 27       	eor	r18, r18
     6d4:	22 1f       	adc	r18, r18
     6d6:	32 0f       	add	r19, r18
     6d8:	2a 85       	ldd	r18, Y+10	; 0x0a
     6da:	23 70       	andi	r18, 0x03	; 3
     6dc:	22 0f       	add	r18, r18
     6de:	23 0f       	add	r18, r19
     6e0:	27 50       	subi	r18, 0x07	; 7
     6e2:	04 c0       	rjmp	.+8      	; 0x6ec <disk_ioctl+0x13e>
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	aa 1f       	adc	r26, r26
     6ea:	bb 1f       	adc	r27, r27
     6ec:	2a 95       	dec	r18
     6ee:	d2 f7       	brpl	.-12     	; 0x6e4 <disk_ioctl+0x136>
     6f0:	f8 01       	movw	r30, r16
     6f2:	80 83       	st	Z, r24
     6f4:	91 83       	std	Z+1, r25	; 0x01
     6f6:	a2 83       	std	Z+2, r26	; 0x02
     6f8:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
     6fa:	10 e0       	ldi	r17, 0x00	; 0
     6fc:	f7 c0       	rjmp	.+494    	; 0x8ec <disk_ioctl+0x33e>
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	92 e0       	ldi	r25, 0x02	; 2
     702:	fa 01       	movw	r30, r20
     704:	91 83       	std	Z+1, r25	; 0x01
     706:	80 83       	st	Z, r24
			res = RES_OK;
     708:	10 e0       	ldi	r17, 0x00	; 0
			break;
     70a:	f0 c0       	rjmp	.+480    	; 0x8ec <disk_ioctl+0x33e>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
     70c:	f0 90 26 01 	lds	r15, 0x0126	; 0x800126 <__data_end>
     710:	f2 fe       	sbrs	r15, 2
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
     712:	2f c0       	rjmp	.+94     	; 0x772 <disk_ioctl+0x1c4>
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	ba 01       	movw	r22, r20
     71a:	8d e8       	ldi	r24, 0x8D	; 141
     71c:	8a dd       	rcall	.-1260   	; 0x232 <send_cmd>
     71e:	81 11       	cpse	r24, r1
					xchg_spi(0xFF);
     720:	d6 c0       	rjmp	.+428    	; 0x8ce <disk_ioctl+0x320>
     722:	8f ef       	ldi	r24, 0xFF	; 255
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
     724:	ea dc       	rcall	.-1580   	; 0xfa <xchg_spi>
     726:	60 e1       	ldi	r22, 0x10	; 16
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	ce 01       	movw	r24, r28
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	13 dd       	rcall	.-1498   	; 0x156 <rcvr_datablock>
     730:	89 2b       	or	r24, r25
     732:	09 f4       	brne	.+2      	; 0x736 <disk_ioctl+0x188>
     734:	ce c0       	rjmp	.+412    	; 0x8d2 <disk_ioctl+0x324>
     736:	0f 2e       	mov	r0, r31
     738:	f0 e3       	ldi	r31, 0x30	; 48
     73a:	ff 2e       	mov	r15, r31
						for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
     73c:	f0 2d       	mov	r31, r0
     73e:	8f ef       	ldi	r24, 0xFF	; 255
     740:	dc dc       	rcall	.-1608   	; 0xfa <xchg_spi>
     742:	fa 94       	dec	r15
     744:	f1 10       	cpse	r15, r1
     746:	fb cf       	rjmp	.-10     	; 0x73e <disk_ioctl+0x190>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
     748:	2b 85       	ldd	r18, Y+11	; 0x0b
     74a:	22 95       	swap	r18
     74c:	2f 70       	andi	r18, 0x0F	; 15
     74e:	80 e1       	ldi	r24, 0x10	; 16
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	a0 e0       	ldi	r26, 0x00	; 0
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	04 c0       	rjmp	.+8      	; 0x760 <disk_ioctl+0x1b2>
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	aa 1f       	adc	r26, r26
     75e:	bb 1f       	adc	r27, r27
     760:	2a 95       	dec	r18
     762:	d2 f7       	brpl	.-12     	; 0x758 <disk_ioctl+0x1aa>
     764:	f8 01       	movw	r30, r16
     766:	80 83       	st	Z, r24
     768:	91 83       	std	Z+1, r25	; 0x01
     76a:	a2 83       	std	Z+2, r26	; 0x02
						res = RES_OK;
     76c:	b3 83       	std	Z+3, r27	; 0x03
     76e:	10 e0       	ldi	r17, 0x00	; 0
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
     770:	bd c0       	rjmp	.+378    	; 0x8ec <disk_ioctl+0x33e>
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	ba 01       	movw	r22, r20
     778:	89 e0       	ldi	r24, 0x09	; 9
     77a:	5b dd       	rcall	.-1354   	; 0x232 <send_cmd>
     77c:	81 11       	cpse	r24, r1
     77e:	ab c0       	rjmp	.+342    	; 0x8d6 <disk_ioctl+0x328>
     780:	60 e1       	ldi	r22, 0x10	; 16
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	ce 01       	movw	r24, r28
     786:	01 96       	adiw	r24, 0x01	; 1
     788:	e6 dc       	rcall	.-1588   	; 0x156 <rcvr_datablock>
     78a:	89 2b       	or	r24, r25
     78c:	09 f4       	brne	.+2      	; 0x790 <disk_ioctl+0x1e2>
     78e:	a5 c0       	rjmp	.+330    	; 0x8da <disk_ioctl+0x32c>
					if (CardType & CT_SD1) {	/* SDv1 */
     790:	f1 fe       	sbrs	r15, 1
     792:	20 c0       	rjmp	.+64     	; 0x7d4 <disk_ioctl+0x226>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
     794:	2b 85       	ldd	r18, Y+11	; 0x0b
     796:	2f 73       	andi	r18, 0x3F	; 63
     798:	8c 85       	ldd	r24, Y+12	; 0x0c
     79a:	88 1f       	adc	r24, r24
     79c:	88 27       	eor	r24, r24
     79e:	88 1f       	adc	r24, r24
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	82 0f       	add	r24, r18
     7a6:	91 1d       	adc	r25, r1
     7a8:	82 0f       	add	r24, r18
     7aa:	91 1d       	adc	r25, r1
     7ac:	2e 85       	ldd	r18, Y+14	; 0x0e
     7ae:	22 95       	swap	r18
     7b0:	26 95       	lsr	r18
     7b2:	26 95       	lsr	r18
     7b4:	23 70       	andi	r18, 0x03	; 3
     7b6:	21 50       	subi	r18, 0x01	; 1
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <disk_ioctl+0x210>
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	2a 95       	dec	r18
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <disk_ioctl+0x20c>
     7c2:	a0 e0       	ldi	r26, 0x00	; 0
     7c4:	b0 e0       	ldi	r27, 0x00	; 0
     7c6:	f8 01       	movw	r30, r16
     7c8:	80 83       	st	Z, r24
     7ca:	91 83       	std	Z+1, r25	; 0x01
     7cc:	a2 83       	std	Z+2, r26	; 0x02
     7ce:	b3 83       	std	Z+3, r27	; 0x03
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
     7d0:	10 e0       	ldi	r17, 0x00	; 0
     7d2:	8c c0       	rjmp	.+280    	; 0x8ec <disk_ioctl+0x33e>
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDv1 */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
     7d4:	8c 85       	ldd	r24, Y+12	; 0x0c
     7d6:	28 2f       	mov	r18, r24
     7d8:	23 70       	andi	r18, 0x03	; 3
     7da:	82 95       	swap	r24
     7dc:	86 95       	lsr	r24
     7de:	87 70       	andi	r24, 0x07	; 7
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	f8 e0       	ldi	r31, 0x08	; 8
     7e4:	2f 9f       	mul	r18, r31
     7e6:	80 0d       	add	r24, r0
     7e8:	91 1d       	adc	r25, r1
     7ea:	11 24       	eor	r1, r1
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	2b 85       	ldd	r18, Y+11	; 0x0b
     7f0:	2c 77       	andi	r18, 0x7C	; 124
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	35 95       	asr	r19
     7f6:	27 95       	ror	r18
     7f8:	35 95       	asr	r19
     7fa:	27 95       	ror	r18
     7fc:	2f 5f       	subi	r18, 0xFF	; 255
     7fe:	3f 4f       	sbci	r19, 0xFF	; 255
     800:	82 9f       	mul	r24, r18
     802:	a0 01       	movw	r20, r0
     804:	83 9f       	mul	r24, r19
     806:	50 0d       	add	r21, r0
     808:	92 9f       	mul	r25, r18
     80a:	50 0d       	add	r21, r0
     80c:	11 24       	eor	r1, r1
     80e:	ca 01       	movw	r24, r20
     810:	a0 e0       	ldi	r26, 0x00	; 0
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	f8 01       	movw	r30, r16
     816:	80 83       	st	Z, r24
     818:	91 83       	std	Z+1, r25	; 0x01
     81a:	a2 83       	std	Z+2, r26	; 0x02
     81c:	b3 83       	std	Z+3, r27	; 0x03
					}
					res = RES_OK;
     81e:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
     820:	65 c0       	rjmp	.+202    	; 0x8ec <disk_ioctl+0x33e>
     822:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     826:	fa 01       	movw	r30, r20
			res = RES_OK;
     828:	80 83       	st	Z, r24
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
     82a:	10 e0       	ldi	r17, 0x00	; 0
     82c:	5f c0       	rjmp	.+190    	; 0x8ec <disk_ioctl+0x33e>
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	ba 01       	movw	r22, r20
     834:	89 e0       	ldi	r24, 0x09	; 9
     836:	fd dc       	rcall	.-1542   	; 0x232 <send_cmd>
     838:	81 11       	cpse	r24, r1
				&& rcvr_datablock(ptr, 16))
     83a:	51 c0       	rjmp	.+162    	; 0x8de <disk_ioctl+0x330>
     83c:	60 e1       	ldi	r22, 0x10	; 16
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	c8 01       	movw	r24, r16

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
     842:	89 dc       	rcall	.-1774   	; 0x156 <rcvr_datablock>
     844:	11 e0       	ldi	r17, 0x01	; 1
     846:	89 2b       	or	r24, r25
     848:	09 f4       	brne	.+2      	; 0x84c <disk_ioctl+0x29e>
     84a:	50 c0       	rjmp	.+160    	; 0x8ec <disk_ioctl+0x33e>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
     84c:	10 e0       	ldi	r17, 0x00	; 0
     84e:	4e c0       	rjmp	.+156    	; 0x8ec <disk_ioctl+0x33e>
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	ba 01       	movw	r22, r20
     856:	8a e0       	ldi	r24, 0x0A	; 10
     858:	ec dc       	rcall	.-1576   	; 0x232 <send_cmd>
     85a:	81 11       	cpse	r24, r1
				&& rcvr_datablock(ptr, 16))
     85c:	42 c0       	rjmp	.+132    	; 0x8e2 <disk_ioctl+0x334>
     85e:	60 e1       	ldi	r22, 0x10	; 16
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	c8 01       	movw	r24, r16

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
     864:	78 dc       	rcall	.-1808   	; 0x156 <rcvr_datablock>
     866:	11 e0       	ldi	r17, 0x01	; 1
     868:	89 2b       	or	r24, r25
     86a:	09 f4       	brne	.+2      	; 0x86e <disk_ioctl+0x2c0>
     86c:	3f c0       	rjmp	.+126    	; 0x8ec <disk_ioctl+0x33e>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
     86e:	10 e0       	ldi	r17, 0x00	; 0
     870:	3d c0       	rjmp	.+122    	; 0x8ec <disk_ioctl+0x33e>
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	50 e0       	ldi	r21, 0x00	; 0
     876:	ba 01       	movw	r22, r20
     878:	8a e3       	ldi	r24, 0x3A	; 58
     87a:	db dc       	rcall	.-1610   	; 0x232 <send_cmd>
     87c:	81 11       	cpse	r24, r1
     87e:	33 c0       	rjmp	.+102    	; 0x8e6 <disk_ioctl+0x338>
     880:	78 01       	movw	r14, r16
				for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
     882:	0c 5f       	subi	r16, 0xFC	; 252
     884:	1f 4f       	sbci	r17, 0xFF	; 255
     886:	8f ef       	ldi	r24, 0xFF	; 255
     888:	38 dc       	rcall	.-1936   	; 0xfa <xchg_spi>
     88a:	f7 01       	movw	r30, r14
     88c:	81 93       	st	Z+, r24
     88e:	7f 01       	movw	r14, r30
				res = RES_OK;
     890:	0e 17       	cp	r16, r30
     892:	1f 07       	cpc	r17, r31
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
     894:	c1 f7       	brne	.-16     	; 0x886 <disk_ioctl+0x2d8>
     896:	10 e0       	ldi	r17, 0x00	; 0
     898:	29 c0       	rjmp	.+82     	; 0x8ec <disk_ioctl+0x33e>
     89a:	40 e0       	ldi	r20, 0x00	; 0
     89c:	50 e0       	ldi	r21, 0x00	; 0
     89e:	ba 01       	movw	r22, r20
     8a0:	8d e8       	ldi	r24, 0x8D	; 141
     8a2:	c7 dc       	rcall	.-1650   	; 0x232 <send_cmd>
				xchg_spi(0xFF);
     8a4:	81 11       	cpse	r24, r1
     8a6:	21 c0       	rjmp	.+66     	; 0x8ea <disk_ioctl+0x33c>
     8a8:	8f ef       	ldi	r24, 0xFF	; 255
				if (rcvr_datablock(ptr, 64))
     8aa:	27 dc       	rcall	.-1970   	; 0xfa <xchg_spi>
     8ac:	60 e4       	ldi	r22, 0x40	; 64
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	c8 01       	movw	r24, r16
     8b2:	51 dc       	rcall	.-1886   	; 0x156 <rcvr_datablock>

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
				deselect();
				res = RES_OK;
     8b4:	11 e0       	ldi	r17, 0x01	; 1
     8b6:	89 2b       	or	r24, r25
     8b8:	c9 f0       	breq	.+50     	; 0x8ec <disk_ioctl+0x33e>
     8ba:	10 e0       	ldi	r17, 0x00	; 0
     8bc:	17 c0       	rjmp	.+46     	; 0x8ec <disk_ioctl+0x33e>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
     8be:	14 e0       	ldi	r17, 0x04	; 4
     8c0:	15 c0       	rjmp	.+42     	; 0x8ec <disk_ioctl+0x33e>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     8c2:	11 e0       	ldi	r17, 0x01	; 1
     8c4:	13 c0       	rjmp	.+38     	; 0x8ec <disk_ioctl+0x33e>
     8c6:	11 e0       	ldi	r17, 0x01	; 1
     8c8:	11 c0       	rjmp	.+34     	; 0x8ec <disk_ioctl+0x33e>
     8ca:	11 e0       	ldi	r17, 0x01	; 1
     8cc:	0f c0       	rjmp	.+30     	; 0x8ec <disk_ioctl+0x33e>
     8ce:	11 e0       	ldi	r17, 0x01	; 1
     8d0:	0d c0       	rjmp	.+26     	; 0x8ec <disk_ioctl+0x33e>
     8d2:	11 e0       	ldi	r17, 0x01	; 1
     8d4:	0b c0       	rjmp	.+22     	; 0x8ec <disk_ioctl+0x33e>
     8d6:	11 e0       	ldi	r17, 0x01	; 1
     8d8:	09 c0       	rjmp	.+18     	; 0x8ec <disk_ioctl+0x33e>
     8da:	11 e0       	ldi	r17, 0x01	; 1
     8dc:	07 c0       	rjmp	.+14     	; 0x8ec <disk_ioctl+0x33e>
     8de:	11 e0       	ldi	r17, 0x01	; 1
     8e0:	05 c0       	rjmp	.+10     	; 0x8ec <disk_ioctl+0x33e>
     8e2:	11 e0       	ldi	r17, 0x01	; 1
     8e4:	03 c0       	rjmp	.+6      	; 0x8ec <disk_ioctl+0x33e>
     8e6:	11 e0       	ldi	r17, 0x01	; 1
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <disk_ioctl+0x33e>

		default:
			res = RES_PARERR;
		}

		deselect();
     8ea:	11 e0       	ldi	r17, 0x01	; 1
     8ec:	1f dc       	rcall	.-1986   	; 0x12c <deselect>
     8ee:	81 2f       	mov	r24, r17
     8f0:	05 c0       	rjmp	.+10     	; 0x8fc <disk_ioctl+0x34e>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (drv) return RES_PARERR;
     8f2:	84 e0       	ldi	r24, 0x04	; 4
     8f4:	03 c0       	rjmp	.+6      	; 0x8fc <disk_ioctl+0x34e>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
     8f6:	84 e0       	ldi	r24, 0x04	; 4
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <disk_ioctl+0x34e>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     8fa:	83 e0       	ldi	r24, 0x03	; 3

		deselect();
	}

	return res;
}
     8fc:	60 96       	adiw	r28, 0x10	; 16
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	de bf       	out	0x3e, r29	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	cd bf       	out	0x3d, r28	; 61
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	08 95       	ret

00000916 <mem_cpy>:
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj.fs, res);
}
     916:	41 15       	cp	r20, r1
     918:	51 05       	cpc	r21, r1
     91a:	51 f0       	breq	.+20     	; 0x930 <mem_cpy+0x1a>
     91c:	a6 2f       	mov	r26, r22
     91e:	b7 2f       	mov	r27, r23
     920:	fc 01       	movw	r30, r24
     922:	48 0f       	add	r20, r24
     924:	59 1f       	adc	r21, r25
     926:	9d 91       	ld	r25, X+
     928:	91 93       	st	Z+, r25
     92a:	e4 17       	cp	r30, r20
     92c:	f5 07       	cpc	r31, r21
     92e:	d9 f7       	brne	.-10     	; 0x926 <mem_cpy+0x10>
     930:	08 95       	ret

00000932 <ld_clust>:
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	dc 01       	movw	r26, r24
     938:	fb 01       	movw	r30, r22
     93a:	93 8d       	ldd	r25, Z+27	; 0x1b
     93c:	69 2f       	mov	r22, r25
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	76 2f       	mov	r23, r22
     942:	66 27       	eor	r22, r22
     944:	82 8d       	ldd	r24, Z+26	; 0x1a
     946:	68 2b       	or	r22, r24
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	2c 91       	ld	r18, X
     94e:	23 30       	cpi	r18, 0x03	; 3
     950:	79 f4       	brne	.+30     	; 0x970 <ld_clust+0x3e>
     952:	05 89       	ldd	r16, Z+21	; 0x15
     954:	10 e0       	ldi	r17, 0x00	; 0
     956:	10 2f       	mov	r17, r16
     958:	00 27       	eor	r16, r16
     95a:	24 89       	ldd	r18, Z+20	; 0x14
     95c:	02 2b       	or	r16, r18
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	98 01       	movw	r18, r16
     964:	11 27       	eor	r17, r17
     966:	00 27       	eor	r16, r16
     968:	60 2b       	or	r22, r16
     96a:	71 2b       	or	r23, r17
     96c:	82 2b       	or	r24, r18
     96e:	93 2b       	or	r25, r19
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	08 95       	ret

00000976 <move_window>:
     976:	4f 92       	push	r4
     978:	5f 92       	push	r5
     97a:	6f 92       	push	r6
     97c:	7f 92       	push	r7
     97e:	af 92       	push	r10
     980:	bf 92       	push	r11
     982:	cf 92       	push	r12
     984:	df 92       	push	r13
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	fc 01       	movw	r30, r24
     994:	c6 a4       	ldd	r12, Z+46	; 0x2e
     996:	d7 a4       	ldd	r13, Z+47	; 0x2f
     998:	e0 a8       	ldd	r14, Z+48	; 0x30
     99a:	f1 a8       	ldd	r15, Z+49	; 0x31
     99c:	c4 16       	cp	r12, r20
     99e:	d5 06       	cpc	r13, r21
     9a0:	e6 06       	cpc	r14, r22
     9a2:	f7 06       	cpc	r15, r23
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <move_window+0x32>
     9a6:	4c c0       	rjmp	.+152    	; 0xa40 <move_window+0xca>
     9a8:	2a 01       	movw	r4, r20
     9aa:	3b 01       	movw	r6, r22
     9ac:	ec 01       	movw	r28, r24
     9ae:	84 81       	ldd	r24, Z+4	; 0x04
     9b0:	88 23       	and	r24, r24
     9b2:	91 f1       	breq	.+100    	; 0xa18 <move_window+0xa2>
     9b4:	5f 01       	movw	r10, r30
     9b6:	f2 e3       	ldi	r31, 0x32	; 50
     9b8:	af 0e       	add	r10, r31
     9ba:	b1 1c       	adc	r11, r1
     9bc:	01 e0       	ldi	r16, 0x01	; 1
     9be:	a7 01       	movw	r20, r14
     9c0:	96 01       	movw	r18, r12
     9c2:	b5 01       	movw	r22, r10
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	8e dd       	rcall	.-1252   	; 0x4e4 <disk_write>
     9c8:	81 11       	cpse	r24, r1
     9ca:	3c c0       	rjmp	.+120    	; 0xa44 <move_window+0xce>
     9cc:	1c 82       	std	Y+4, r1	; 0x04
     9ce:	4a a1       	ldd	r20, Y+34	; 0x22
     9d0:	5b a1       	ldd	r21, Y+35	; 0x23
     9d2:	6c a1       	ldd	r22, Y+36	; 0x24
     9d4:	7d a1       	ldd	r23, Y+37	; 0x25
     9d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9d8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9da:	a8 a1       	ldd	r26, Y+32	; 0x20
     9dc:	b9 a1       	ldd	r27, Y+33	; 0x21
     9de:	84 0f       	add	r24, r20
     9e0:	95 1f       	adc	r25, r21
     9e2:	a6 1f       	adc	r26, r22
     9e4:	b7 1f       	adc	r27, r23
     9e6:	c8 16       	cp	r12, r24
     9e8:	d9 06       	cpc	r13, r25
     9ea:	ea 06       	cpc	r14, r26
     9ec:	fb 06       	cpc	r15, r27
     9ee:	a0 f4       	brcc	.+40     	; 0xa18 <move_window+0xa2>
     9f0:	1b 81       	ldd	r17, Y+3	; 0x03
     9f2:	12 30       	cpi	r17, 0x02	; 2
     9f4:	88 f0       	brcs	.+34     	; 0xa18 <move_window+0xa2>
     9f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9f8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9fa:	a8 a1       	ldd	r26, Y+32	; 0x20
     9fc:	b9 a1       	ldd	r27, Y+33	; 0x21
     9fe:	c8 0e       	add	r12, r24
     a00:	d9 1e       	adc	r13, r25
     a02:	ea 1e       	adc	r14, r26
     a04:	fb 1e       	adc	r15, r27
     a06:	01 e0       	ldi	r16, 0x01	; 1
     a08:	a7 01       	movw	r20, r14
     a0a:	96 01       	movw	r18, r12
     a0c:	b5 01       	movw	r22, r10
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	69 dd       	rcall	.-1326   	; 0x4e4 <disk_write>
     a12:	11 50       	subi	r17, 0x01	; 1
     a14:	11 30       	cpi	r17, 0x01	; 1
     a16:	79 f7       	brne	.-34     	; 0x9f6 <move_window+0x80>
     a18:	41 14       	cp	r4, r1
     a1a:	51 04       	cpc	r5, r1
     a1c:	61 04       	cpc	r6, r1
     a1e:	71 04       	cpc	r7, r1
     a20:	99 f0       	breq	.+38     	; 0xa48 <move_window+0xd2>
     a22:	01 e0       	ldi	r16, 0x01	; 1
     a24:	a3 01       	movw	r20, r6
     a26:	92 01       	movw	r18, r4
     a28:	be 01       	movw	r22, r28
     a2a:	6e 5c       	subi	r22, 0xCE	; 206
     a2c:	7f 4f       	sbci	r23, 0xFF	; 255
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	0c dd       	rcall	.-1512   	; 0x44a <disk_read>
     a32:	81 11       	cpse	r24, r1
     a34:	0b c0       	rjmp	.+22     	; 0xa4c <move_window+0xd6>
     a36:	4e a6       	std	Y+46, r4	; 0x2e
     a38:	5f a6       	std	Y+47, r5	; 0x2f
     a3a:	68 aa       	std	Y+48, r6	; 0x30
     a3c:	79 aa       	std	Y+49, r7	; 0x31
     a3e:	07 c0       	rjmp	.+14     	; 0xa4e <move_window+0xd8>
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	05 c0       	rjmp	.+10     	; 0xa4e <move_window+0xd8>
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	03 c0       	rjmp	.+6      	; 0xa4e <move_window+0xd8>
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	01 c0       	rjmp	.+2      	; 0xa4e <move_window+0xd8>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	df 90       	pop	r13
     a5c:	cf 90       	pop	r12
     a5e:	bf 90       	pop	r11
     a60:	af 90       	pop	r10
     a62:	7f 90       	pop	r7
     a64:	6f 90       	pop	r6
     a66:	5f 90       	pop	r5
     a68:	4f 90       	pop	r4
     a6a:	08 95       	ret

00000a6c <check_fs>:
     a6c:	0f 93       	push	r16
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	ec 01       	movw	r28, r24
     a74:	9a 01       	movw	r18, r20
     a76:	ab 01       	movw	r20, r22
     a78:	bc 01       	movw	r22, r24
     a7a:	6e 5c       	subi	r22, 0xCE	; 206
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	01 e0       	ldi	r16, 0x01	; 1
     a80:	89 81       	ldd	r24, Y+1	; 0x01
     a82:	e3 dc       	rcall	.-1594   	; 0x44a <disk_read>
     a84:	81 11       	cpse	r24, r1
     a86:	51 c0       	rjmp	.+162    	; 0xb2a <check_fs+0xbe>
     a88:	fe 01       	movw	r30, r28
     a8a:	ef 5c       	subi	r30, 0xCF	; 207
     a8c:	fd 4f       	sbci	r31, 0xFD	; 253
     a8e:	80 81       	ld	r24, Z
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	98 2f       	mov	r25, r24
     a94:	88 27       	eor	r24, r24
     a96:	31 97       	sbiw	r30, 0x01	; 1
     a98:	20 81       	ld	r18, Z
     a9a:	82 2b       	or	r24, r18
     a9c:	85 35       	cpi	r24, 0x55	; 85
     a9e:	9a 4a       	sbci	r25, 0xAA	; 170
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <check_fs+0x38>
     aa2:	45 c0       	rjmp	.+138    	; 0xb2e <check_fs+0xc2>
     aa4:	e5 5c       	subi	r30, 0xC5	; 197
     aa6:	f1 40       	sbci	r31, 0x01	; 1
     aa8:	20 81       	ld	r18, Z
     aaa:	31 97       	sbiw	r30, 0x01	; 1
     aac:	80 81       	ld	r24, Z
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	dc 01       	movw	r26, r24
     ab6:	99 27       	eor	r25, r25
     ab8:	88 27       	eor	r24, r24
     aba:	b2 2b       	or	r27, r18
     abc:	32 97       	sbiw	r30, 0x02	; 2
     abe:	20 81       	ld	r18, Z
     ac0:	82 2b       	or	r24, r18
     ac2:	31 96       	adiw	r30, 0x01	; 1
     ac4:	40 81       	ld	r20, Z
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	54 2f       	mov	r21, r20
     aca:	44 27       	eor	r20, r20
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	84 2b       	or	r24, r20
     ad2:	95 2b       	or	r25, r21
     ad4:	a6 2b       	or	r26, r22
     ad6:	b7 2b       	or	r27, r23
     ad8:	bb 27       	eor	r27, r27
     ada:	86 34       	cpi	r24, 0x46	; 70
     adc:	91 44       	sbci	r25, 0x41	; 65
     ade:	a4 45       	sbci	r26, 0x54	; 84
     ae0:	b1 05       	cpc	r27, r1
     ae2:	39 f1       	breq	.+78     	; 0xb32 <check_fs+0xc6>
     ae4:	7e 96       	adiw	r30, 0x1e	; 30
     ae6:	80 81       	ld	r24, Z
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	40 81       	ld	r20, Z
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	ba 01       	movw	r22, r20
     af4:	55 27       	eor	r21, r21
     af6:	44 27       	eor	r20, r20
     af8:	78 2b       	or	r23, r24
     afa:	32 97       	sbiw	r30, 0x02	; 2
     afc:	80 81       	ld	r24, Z
     afe:	48 2b       	or	r20, r24
     b00:	cb 57       	subi	r28, 0x7B	; 123
     b02:	df 4f       	sbci	r29, 0xFF	; 255
     b04:	88 81       	ld	r24, Y
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	98 2f       	mov	r25, r24
     b0a:	88 27       	eor	r24, r24
     b0c:	a0 e0       	ldi	r26, 0x00	; 0
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	48 2b       	or	r20, r24
     b12:	59 2b       	or	r21, r25
     b14:	6a 2b       	or	r22, r26
     b16:	7b 2b       	or	r23, r27
     b18:	77 27       	eor	r23, r23
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	46 34       	cpi	r20, 0x46	; 70
     b1e:	51 44       	sbci	r21, 0x41	; 65
     b20:	64 45       	sbci	r22, 0x54	; 84
     b22:	71 05       	cpc	r23, r1
     b24:	39 f4       	brne	.+14     	; 0xb34 <check_fs+0xc8>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	05 c0       	rjmp	.+10     	; 0xb34 <check_fs+0xc8>
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	03 c0       	rjmp	.+6      	; 0xb34 <check_fs+0xc8>
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	01 c0       	rjmp	.+2      	; 0xb34 <check_fs+0xc8>
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	0f 91       	pop	r16
     b3a:	08 95       	ret

00000b3c <validate>:
     b3c:	dc 01       	movw	r26, r24
     b3e:	ed 91       	ld	r30, X+
     b40:	fc 91       	ld	r31, X
     b42:	11 97       	sbiw	r26, 0x01	; 1
     b44:	30 97       	sbiw	r30, 0x00	; 0
     b46:	91 f0       	breq	.+36     	; 0xb6c <validate+0x30>
     b48:	20 81       	ld	r18, Z
     b4a:	22 23       	and	r18, r18
     b4c:	89 f0       	breq	.+34     	; 0xb70 <validate+0x34>
     b4e:	26 81       	ldd	r18, Z+6	; 0x06
     b50:	37 81       	ldd	r19, Z+7	; 0x07
     b52:	12 96       	adiw	r26, 0x02	; 2
     b54:	8d 91       	ld	r24, X+
     b56:	9c 91       	ld	r25, X
     b58:	13 97       	sbiw	r26, 0x03	; 3
     b5a:	28 17       	cp	r18, r24
     b5c:	39 07       	cpc	r19, r25
     b5e:	51 f4       	brne	.+20     	; 0xb74 <validate+0x38>
     b60:	81 81       	ldd	r24, Z+1	; 0x01
     b62:	6c dc       	rcall	.-1832   	; 0x43c <disk_status>
     b64:	80 fd       	sbrc	r24, 0
     b66:	08 c0       	rjmp	.+16     	; 0xb78 <validate+0x3c>
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	08 95       	ret
     b6c:	89 e0       	ldi	r24, 0x09	; 9
     b6e:	08 95       	ret
     b70:	89 e0       	ldi	r24, 0x09	; 9
     b72:	08 95       	ret
     b74:	89 e0       	ldi	r24, 0x09	; 9
     b76:	08 95       	ret
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	08 95       	ret

00000b7c <chk_mounted>:
     b7c:	2f 92       	push	r2
     b7e:	3f 92       	push	r3
     b80:	4f 92       	push	r4
     b82:	5f 92       	push	r5
     b84:	6f 92       	push	r6
     b86:	7f 92       	push	r7
     b88:	8f 92       	push	r8
     b8a:	9f 92       	push	r9
     b8c:	af 92       	push	r10
     b8e:	bf 92       	push	r11
     b90:	cf 92       	push	r12
     b92:	df 92       	push	r13
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	2e 97       	sbiw	r28, 0x0e	; 14
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61
     bb0:	dc 01       	movw	r26, r24
     bb2:	ed 91       	ld	r30, X+
     bb4:	fc 91       	ld	r31, X
     bb6:	11 97       	sbiw	r26, 0x01	; 1
     bb8:	20 81       	ld	r18, Z
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	20 53       	subi	r18, 0x30	; 48
     bbe:	31 09       	sbc	r19, r1
     bc0:	2a 30       	cpi	r18, 0x0A	; 10
     bc2:	31 05       	cpc	r19, r1
     bc4:	38 f4       	brcc	.+14     	; 0xbd4 <chk_mounted+0x58>
     bc6:	51 81       	ldd	r21, Z+1	; 0x01
     bc8:	5a 33       	cpi	r21, 0x3A	; 58
     bca:	21 f4       	brne	.+8      	; 0xbd4 <chk_mounted+0x58>
     bcc:	32 96       	adiw	r30, 0x02	; 2
     bce:	ed 93       	st	X+, r30
     bd0:	fc 93       	st	X, r31
     bd2:	03 c0       	rjmp	.+6      	; 0xbda <chk_mounted+0x5e>
     bd4:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <CurrVol>
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	fb 01       	movw	r30, r22
     bdc:	11 82       	std	Z+1, r1	; 0x01
     bde:	10 82       	st	Z, r1
     be0:	23 2b       	or	r18, r19
     be2:	09 f0       	breq	.+2      	; 0xbe6 <chk_mounted+0x6a>
     be4:	e9 c2       	rjmp	.+1490   	; 0x11b8 <chk_mounted+0x63c>
     be6:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <FatFs>
     bea:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <FatFs+0x1>
     bee:	3e 87       	std	Y+14, r19	; 0x0e
     bf0:	2d 87       	std	Y+13, r18	; 0x0d
     bf2:	21 15       	cp	r18, r1
     bf4:	31 05       	cpc	r19, r1
     bf6:	09 f4       	brne	.+2      	; 0xbfa <chk_mounted+0x7e>
     bf8:	e1 c2       	rjmp	.+1474   	; 0x11bc <chk_mounted+0x640>
     bfa:	14 2f       	mov	r17, r20
     bfc:	31 83       	std	Z+1, r19	; 0x01
     bfe:	20 83       	st	Z, r18
     c00:	d9 01       	movw	r26, r18
     c02:	8c 91       	ld	r24, X
     c04:	88 23       	and	r24, r24
     c06:	61 f0       	breq	.+24     	; 0xc20 <chk_mounted+0xa4>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	8c 91       	ld	r24, X
     c0c:	17 dc       	rcall	.-2002   	; 0x43c <disk_status>
     c0e:	80 fd       	sbrc	r24, 0
     c10:	07 c0       	rjmp	.+14     	; 0xc20 <chk_mounted+0xa4>
     c12:	11 23       	and	r17, r17
     c14:	09 f4       	brne	.+2      	; 0xc18 <chk_mounted+0x9c>
     c16:	d4 c2       	rjmp	.+1448   	; 0x11c0 <chk_mounted+0x644>
     c18:	82 ff       	sbrs	r24, 2
     c1a:	d4 c2       	rjmp	.+1448   	; 0x11c4 <chk_mounted+0x648>
     c1c:	8a e0       	ldi	r24, 0x0A	; 10
     c1e:	ab c3       	rjmp	.+1878   	; 0x1376 <chk_mounted+0x7fa>
     c20:	ed 85       	ldd	r30, Y+13	; 0x0d
     c22:	fe 85       	ldd	r31, Y+14	; 0x0e
     c24:	10 82       	st	Z, r1
     c26:	11 82       	std	Z+1, r1	; 0x01
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	46 db       	rcall	.-2420   	; 0x2b8 <disk_initialize>
     c2c:	80 fd       	sbrc	r24, 0
     c2e:	cc c2       	rjmp	.+1432   	; 0x11c8 <chk_mounted+0x64c>
     c30:	11 23       	and	r17, r17
     c32:	11 f0       	breq	.+4      	; 0xc38 <chk_mounted+0xbc>
     c34:	82 fd       	sbrc	r24, 2
     c36:	ca c2       	rjmp	.+1428   	; 0x11cc <chk_mounted+0x650>
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	ba 01       	movw	r22, r20
     c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c40:	9e 85       	ldd	r25, Y+14	; 0x0e
     c42:	14 df       	rcall	.-472    	; 0xa6c <check_fs>
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	c9 f5       	brne	.+114    	; 0xcba <chk_mounted+0x13e>
     c48:	ed 85       	ldd	r30, Y+13	; 0x0d
     c4a:	fe 85       	ldd	r31, Y+14	; 0x0e
     c4c:	ec 50       	subi	r30, 0x0C	; 12
     c4e:	fe 4f       	sbci	r31, 0xFE	; 254
     c50:	80 81       	ld	r24, Z
     c52:	88 23       	and	r24, r24
     c54:	09 f4       	brne	.+2      	; 0xc58 <chk_mounted+0xdc>
     c56:	bc c2       	rjmp	.+1400   	; 0x11d0 <chk_mounted+0x654>
     c58:	ed 85       	ldd	r30, Y+13	; 0x0d
     c5a:	fe 85       	ldd	r31, Y+14	; 0x0e
     c5c:	e5 50       	subi	r30, 0x05	; 5
     c5e:	fe 4f       	sbci	r31, 0xFE	; 254
     c60:	80 81       	ld	r24, Z
     c62:	ed 85       	ldd	r30, Y+13	; 0x0d
     c64:	fe 85       	ldd	r31, Y+14	; 0x0e
     c66:	e6 50       	subi	r30, 0x06	; 6
     c68:	fe 4f       	sbci	r31, 0xFE	; 254
     c6a:	40 80       	ld	r4, Z
     c6c:	51 2c       	mov	r5, r1
     c6e:	61 2c       	mov	r6, r1
     c70:	71 2c       	mov	r7, r1
     c72:	32 01       	movw	r6, r4
     c74:	55 24       	eor	r5, r5
     c76:	44 24       	eor	r4, r4
     c78:	78 2a       	or	r7, r24
     c7a:	ed 85       	ldd	r30, Y+13	; 0x0d
     c7c:	fe 85       	ldd	r31, Y+14	; 0x0e
     c7e:	e8 50       	subi	r30, 0x08	; 8
     c80:	fe 4f       	sbci	r31, 0xFE	; 254
     c82:	80 81       	ld	r24, Z
     c84:	a3 01       	movw	r20, r6
     c86:	92 01       	movw	r18, r4
     c88:	28 2b       	or	r18, r24
     c8a:	da 01       	movw	r26, r20
     c8c:	c9 01       	movw	r24, r18
     c8e:	ed 85       	ldd	r30, Y+13	; 0x0d
     c90:	fe 85       	ldd	r31, Y+14	; 0x0e
     c92:	e7 50       	subi	r30, 0x07	; 7
     c94:	fe 4f       	sbci	r31, 0xFE	; 254
     c96:	e0 81       	ld	r30, Z
     c98:	4e 2e       	mov	r4, r30
     c9a:	51 2c       	mov	r5, r1
     c9c:	f4 2d       	mov	r31, r4
     c9e:	ee 27       	eor	r30, r30
     ca0:	2f 01       	movw	r4, r30
     ca2:	61 2c       	mov	r6, r1
     ca4:	71 2c       	mov	r7, r1
     ca6:	48 2a       	or	r4, r24
     ca8:	59 2a       	or	r5, r25
     caa:	6a 2a       	or	r6, r26
     cac:	7b 2a       	or	r7, r27
     cae:	b3 01       	movw	r22, r6
     cb0:	a2 01       	movw	r20, r4
     cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb6:	da de       	rcall	.-588    	; 0xa6c <check_fs>
     cb8:	03 c0       	rjmp	.+6      	; 0xcc0 <chk_mounted+0x144>
     cba:	41 2c       	mov	r4, r1
     cbc:	51 2c       	mov	r5, r1
     cbe:	32 01       	movw	r6, r4
     cc0:	83 30       	cpi	r24, 0x03	; 3
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <chk_mounted+0x14a>
     cc4:	87 c2       	rjmp	.+1294   	; 0x11d4 <chk_mounted+0x658>
     cc6:	81 11       	cpse	r24, r1
     cc8:	87 c2       	rjmp	.+1294   	; 0x11d8 <chk_mounted+0x65c>
     cca:	ad 85       	ldd	r26, Y+13	; 0x0d
     ccc:	be 85       	ldd	r27, Y+14	; 0x0e
     cce:	de 96       	adiw	r26, 0x3e	; 62
     cd0:	8c 91       	ld	r24, X
     cd2:	de 97       	sbiw	r26, 0x3e	; 62
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	98 2f       	mov	r25, r24
     cd8:	88 27       	eor	r24, r24
     cda:	dd 96       	adiw	r26, 0x3d	; 61
     cdc:	2c 91       	ld	r18, X
     cde:	82 2b       	or	r24, r18
     ce0:	81 15       	cp	r24, r1
     ce2:	92 40       	sbci	r25, 0x02	; 2
     ce4:	09 f0       	breq	.+2      	; 0xce8 <chk_mounted+0x16c>
     ce6:	7a c2       	rjmp	.+1268   	; 0x11dc <chk_mounted+0x660>
     ce8:	ed 85       	ldd	r30, Y+13	; 0x0d
     cea:	fe 85       	ldd	r31, Y+14	; 0x0e
     cec:	e7 5b       	subi	r30, 0xB7	; 183
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	c0 80       	ld	r12, Z
     cf2:	d1 2c       	mov	r13, r1
     cf4:	dc 2c       	mov	r13, r12
     cf6:	cc 24       	eor	r12, r12
     cf8:	ed 85       	ldd	r30, Y+13	; 0x0d
     cfa:	fe 85       	ldd	r31, Y+14	; 0x0e
     cfc:	e8 5b       	subi	r30, 0xB8	; 184
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
     d00:	80 81       	ld	r24, Z
     d02:	c8 2a       	or	r12, r24
     d04:	e1 2c       	mov	r14, r1
     d06:	f1 2c       	mov	r15, r1
     d08:	c1 14       	cp	r12, r1
     d0a:	d1 04       	cpc	r13, r1
     d0c:	e1 04       	cpc	r14, r1
     d0e:	f1 04       	cpc	r15, r1
     d10:	49 f5       	brne	.+82     	; 0xd64 <chk_mounted+0x1e8>
     d12:	ed 85       	ldd	r30, Y+13	; 0x0d
     d14:	fe 85       	ldd	r31, Y+14	; 0x0e
     d16:	e7 5a       	subi	r30, 0xA7	; 167
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	80 81       	ld	r24, Z
     d1c:	ed 85       	ldd	r30, Y+13	; 0x0d
     d1e:	fe 85       	ldd	r31, Y+14	; 0x0e
     d20:	e8 5a       	subi	r30, 0xA8	; 168
     d22:	ff 4f       	sbci	r31, 0xFF	; 255
     d24:	c0 80       	ld	r12, Z
     d26:	d1 2c       	mov	r13, r1
     d28:	e1 2c       	mov	r14, r1
     d2a:	f1 2c       	mov	r15, r1
     d2c:	76 01       	movw	r14, r12
     d2e:	dd 24       	eor	r13, r13
     d30:	cc 24       	eor	r12, r12
     d32:	f8 2a       	or	r15, r24
     d34:	ed 85       	ldd	r30, Y+13	; 0x0d
     d36:	fe 85       	ldd	r31, Y+14	; 0x0e
     d38:	ea 5a       	subi	r30, 0xAA	; 170
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	80 81       	ld	r24, Z
     d3e:	a7 01       	movw	r20, r14
     d40:	96 01       	movw	r18, r12
     d42:	28 2b       	or	r18, r24
     d44:	da 01       	movw	r26, r20
     d46:	c9 01       	movw	r24, r18
     d48:	ed 85       	ldd	r30, Y+13	; 0x0d
     d4a:	fe 85       	ldd	r31, Y+14	; 0x0e
     d4c:	e9 5a       	subi	r30, 0xA9	; 169
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	c0 80       	ld	r12, Z
     d52:	d1 2c       	mov	r13, r1
     d54:	dc 2c       	mov	r13, r12
     d56:	cc 24       	eor	r12, r12
     d58:	e1 2c       	mov	r14, r1
     d5a:	f1 2c       	mov	r15, r1
     d5c:	c8 2a       	or	r12, r24
     d5e:	d9 2a       	or	r13, r25
     d60:	ea 2a       	or	r14, r26
     d62:	fb 2a       	or	r15, r27
     d64:	ad 85       	ldd	r26, Y+13	; 0x0d
     d66:	be 85       	ldd	r27, Y+14	; 0x0e
     d68:	5e 96       	adiw	r26, 0x1e	; 30
     d6a:	cd 92       	st	X+, r12
     d6c:	dd 92       	st	X+, r13
     d6e:	ed 92       	st	X+, r14
     d70:	fc 92       	st	X, r15
     d72:	91 97       	sbiw	r26, 0x21	; 33
     d74:	fd 01       	movw	r30, r26
     d76:	ee 5b       	subi	r30, 0xBE	; 190
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	a0 81       	ld	r26, Z
     d7c:	ed 85       	ldd	r30, Y+13	; 0x0d
     d7e:	fe 85       	ldd	r31, Y+14	; 0x0e
     d80:	a3 83       	std	Z+3, r26	; 0x03
     d82:	8f ef       	ldi	r24, 0xFF	; 255
     d84:	8a 0f       	add	r24, r26
     d86:	82 30       	cpi	r24, 0x02	; 2
     d88:	08 f0       	brcs	.+2      	; 0xd8c <chk_mounted+0x210>
     d8a:	2a c2       	rjmp	.+1108   	; 0x11e0 <chk_mounted+0x664>
     d8c:	17 ad       	ldd	r17, Z+63	; 0x3f
     d8e:	12 83       	std	Z+2, r17	; 0x02
     d90:	11 23       	and	r17, r17
     d92:	09 f4       	brne	.+2      	; 0xd96 <chk_mounted+0x21a>
     d94:	27 c2       	rjmp	.+1102   	; 0x11e4 <chk_mounted+0x668>
     d96:	81 2f       	mov	r24, r17
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	9c 01       	movw	r18, r24
     d9c:	21 50       	subi	r18, 0x01	; 1
     d9e:	31 09       	sbc	r19, r1
     da0:	82 23       	and	r24, r18
     da2:	93 23       	and	r25, r19
     da4:	89 2b       	or	r24, r25
     da6:	09 f0       	breq	.+2      	; 0xdaa <chk_mounted+0x22e>
     da8:	1f c2       	rjmp	.+1086   	; 0x11e8 <chk_mounted+0x66c>
     daa:	ec 5b       	subi	r30, 0xBC	; 188
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	20 80       	ld	r2, Z
     db0:	31 2c       	mov	r3, r1
     db2:	32 2c       	mov	r3, r2
     db4:	22 24       	eor	r2, r2
     db6:	ed 85       	ldd	r30, Y+13	; 0x0d
     db8:	fe 85       	ldd	r31, Y+14	; 0x0e
     dba:	ed 5b       	subi	r30, 0xBD	; 189
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	80 81       	ld	r24, Z
     dc0:	28 2a       	or	r2, r24
     dc2:	ed 85       	ldd	r30, Y+13	; 0x0d
     dc4:	fe 85       	ldd	r31, Y+14	; 0x0e
     dc6:	31 86       	std	Z+9, r3	; 0x09
     dc8:	20 86       	std	Z+8, r2	; 0x08
     dca:	c1 01       	movw	r24, r2
     dcc:	8f 70       	andi	r24, 0x0F	; 15
     dce:	99 27       	eor	r25, r25
     dd0:	89 2b       	or	r24, r25
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <chk_mounted+0x25a>
     dd4:	0b c2       	rjmp	.+1046   	; 0x11ec <chk_mounted+0x670>
     dd6:	ea 5b       	subi	r30, 0xBA	; 186
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	80 80       	ld	r8, Z
     ddc:	91 2c       	mov	r9, r1
     dde:	98 2c       	mov	r9, r8
     de0:	88 24       	eor	r8, r8
     de2:	ed 85       	ldd	r30, Y+13	; 0x0d
     de4:	fe 85       	ldd	r31, Y+14	; 0x0e
     de6:	eb 5b       	subi	r30, 0xBB	; 187
     de8:	ff 4f       	sbci	r31, 0xFF	; 255
     dea:	80 81       	ld	r24, Z
     dec:	88 2a       	or	r8, r24
     dee:	a1 2c       	mov	r10, r1
     df0:	b1 2c       	mov	r11, r1
     df2:	81 14       	cp	r8, r1
     df4:	91 04       	cpc	r9, r1
     df6:	a1 04       	cpc	r10, r1
     df8:	b1 04       	cpc	r11, r1
     dfa:	31 f5       	brne	.+76     	; 0xe48 <chk_mounted+0x2cc>
     dfc:	ed 85       	ldd	r30, Y+13	; 0x0d
     dfe:	fe 85       	ldd	r31, Y+14	; 0x0e
     e00:	eb 5a       	subi	r30, 0xAB	; 171
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	80 81       	ld	r24, Z
     e06:	ed 85       	ldd	r30, Y+13	; 0x0d
     e08:	fe 85       	ldd	r31, Y+14	; 0x0e
     e0a:	ec 5a       	subi	r30, 0xAC	; 172
     e0c:	ff 4f       	sbci	r31, 0xFF	; 255
     e0e:	80 80       	ld	r8, Z
     e10:	91 2c       	mov	r9, r1
     e12:	a1 2c       	mov	r10, r1
     e14:	b1 2c       	mov	r11, r1
     e16:	54 01       	movw	r10, r8
     e18:	99 24       	eor	r9, r9
     e1a:	88 24       	eor	r8, r8
     e1c:	b8 2a       	or	r11, r24
     e1e:	ed 85       	ldd	r30, Y+13	; 0x0d
     e20:	fe 85       	ldd	r31, Y+14	; 0x0e
     e22:	ee 5a       	subi	r30, 0xAE	; 174
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	80 81       	ld	r24, Z
     e28:	88 2a       	or	r8, r24
     e2a:	ed 85       	ldd	r30, Y+13	; 0x0d
     e2c:	fe 85       	ldd	r31, Y+14	; 0x0e
     e2e:	ed 5a       	subi	r30, 0xAD	; 173
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	80 81       	ld	r24, Z
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	98 2f       	mov	r25, r24
     e38:	88 27       	eor	r24, r24
     e3a:	ac 01       	movw	r20, r24
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	84 2a       	or	r8, r20
     e42:	95 2a       	or	r9, r21
     e44:	a6 2a       	or	r10, r22
     e46:	b7 2a       	or	r11, r23
     e48:	ed 85       	ldd	r30, Y+13	; 0x0d
     e4a:	fe 85       	ldd	r31, Y+14	; 0x0e
     e4c:	ef 5b       	subi	r30, 0xBF	; 191
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	e0 81       	ld	r30, Z
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	3e 2f       	mov	r19, r30
     e56:	22 27       	eor	r18, r18
     e58:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5c:	80 5c       	subi	r24, 0xC0	; 192
     e5e:	9f 4f       	sbci	r25, 0xFF	; 255
     e60:	fc 01       	movw	r30, r24
     e62:	80 81       	ld	r24, Z
     e64:	f9 01       	movw	r30, r18
     e66:	e8 2b       	or	r30, r24
     e68:	30 97       	sbiw	r30, 0x00	; 0
     e6a:	09 f4       	brne	.+2      	; 0xe6e <chk_mounted+0x2f2>
     e6c:	c1 c1       	rjmp	.+898    	; 0x11f0 <chk_mounted+0x674>
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	a7 01       	movw	r20, r14
     e72:	96 01       	movw	r18, r12
     e74:	0e 94 44 19 	call	0x3288	; 0x3288 <__muluhisi3>
     e78:	69 87       	std	Y+9, r22	; 0x09
     e7a:	7a 87       	std	Y+10, r23	; 0x0a
     e7c:	8b 87       	std	Y+11, r24	; 0x0b
     e7e:	9c 87       	std	Y+12, r25	; 0x0c
     e80:	9f 01       	movw	r18, r30
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	2d 83       	std	Y+5, r18	; 0x05
     e88:	3e 83       	std	Y+6, r19	; 0x06
     e8a:	4f 83       	std	Y+7, r20	; 0x07
     e8c:	58 87       	std	Y+8, r21	; 0x08
     e8e:	c1 01       	movw	r24, r2
     e90:	92 95       	swap	r25
     e92:	82 95       	swap	r24
     e94:	8f 70       	andi	r24, 0x0F	; 15
     e96:	89 27       	eor	r24, r25
     e98:	9f 70       	andi	r25, 0x0F	; 15
     e9a:	89 27       	eor	r24, r25
     e9c:	28 0f       	add	r18, r24
     e9e:	39 1f       	adc	r19, r25
     ea0:	41 1d       	adc	r20, r1
     ea2:	51 1d       	adc	r21, r1
     ea4:	da 01       	movw	r26, r20
     ea6:	c9 01       	movw	r24, r18
     ea8:	29 85       	ldd	r18, Y+9	; 0x09
     eaa:	3a 85       	ldd	r19, Y+10	; 0x0a
     eac:	4b 85       	ldd	r20, Y+11	; 0x0b
     eae:	5c 85       	ldd	r21, Y+12	; 0x0c
     eb0:	28 0f       	add	r18, r24
     eb2:	39 1f       	adc	r19, r25
     eb4:	4a 1f       	adc	r20, r26
     eb6:	5b 1f       	adc	r21, r27
     eb8:	29 83       	std	Y+1, r18	; 0x01
     eba:	3a 83       	std	Y+2, r19	; 0x02
     ebc:	4b 83       	std	Y+3, r20	; 0x03
     ebe:	5c 83       	std	Y+4, r21	; 0x04
     ec0:	82 16       	cp	r8, r18
     ec2:	93 06       	cpc	r9, r19
     ec4:	a4 06       	cpc	r10, r20
     ec6:	b5 06       	cpc	r11, r21
     ec8:	08 f4       	brcc	.+2      	; 0xecc <chk_mounted+0x350>
     eca:	94 c1       	rjmp	.+808    	; 0x11f4 <chk_mounted+0x678>
     ecc:	c5 01       	movw	r24, r10
     ece:	b4 01       	movw	r22, r8
     ed0:	62 1b       	sub	r22, r18
     ed2:	73 0b       	sbc	r23, r19
     ed4:	84 0b       	sbc	r24, r20
     ed6:	95 0b       	sbc	r25, r21
     ed8:	21 2f       	mov	r18, r17
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	0e 94 19 19 	call	0x3232	; 0x3232 <__udivmodsi4>
     ee4:	da 01       	movw	r26, r20
     ee6:	c9 01       	movw	r24, r18
     ee8:	21 15       	cp	r18, r1
     eea:	31 05       	cpc	r19, r1
     eec:	41 05       	cpc	r20, r1
     eee:	51 05       	cpc	r21, r1
     ef0:	09 f4       	brne	.+2      	; 0xef4 <chk_mounted+0x378>
     ef2:	82 c1       	rjmp	.+772    	; 0x11f8 <chk_mounted+0x67c>
     ef4:	26 3f       	cpi	r18, 0xF6	; 246
     ef6:	6f e0       	ldi	r22, 0x0F	; 15
     ef8:	36 07       	cpc	r19, r22
     efa:	41 05       	cpc	r20, r1
     efc:	51 05       	cpc	r21, r1
     efe:	08 f0       	brcs	.+2      	; 0xf02 <chk_mounted+0x386>
     f00:	32 c2       	rjmp	.+1124   	; 0x1366 <chk_mounted+0x7ea>
     f02:	f1 e0       	ldi	r31, 0x01	; 1
     f04:	31 c2       	rjmp	.+1122   	; 0x1368 <chk_mounted+0x7ec>
     f06:	ed 85       	ldd	r30, Y+13	; 0x0d
     f08:	fe 85       	ldd	r31, Y+14	; 0x0e
     f0a:	ef 59       	subi	r30, 0x9F	; 159
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	80 81       	ld	r24, Z
     f10:	ed 85       	ldd	r30, Y+13	; 0x0d
     f12:	fe 85       	ldd	r31, Y+14	; 0x0e
     f14:	e0 5a       	subi	r30, 0xA0	; 160
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	40 81       	ld	r20, Z
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	ba 01       	movw	r22, r20
     f22:	55 27       	eor	r21, r21
     f24:	44 27       	eor	r20, r20
     f26:	78 2b       	or	r23, r24
     f28:	ed 85       	ldd	r30, Y+13	; 0x0d
     f2a:	fe 85       	ldd	r31, Y+14	; 0x0e
     f2c:	e2 5a       	subi	r30, 0xA2	; 162
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	80 81       	ld	r24, Z
     f32:	48 2b       	or	r20, r24
     f34:	ed 85       	ldd	r30, Y+13	; 0x0d
     f36:	fe 85       	ldd	r31, Y+14	; 0x0e
     f38:	e1 5a       	subi	r30, 0xA1	; 161
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	80 81       	ld	r24, Z
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	92 2f       	mov	r25, r18
     f44:	88 27       	eor	r24, r24
     f46:	a0 e0       	ldi	r26, 0x00	; 0
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	48 2b       	or	r20, r24
     f4c:	59 2b       	or	r21, r25
     f4e:	6a 2b       	or	r22, r26
     f50:	7b 2b       	or	r23, r27
     f52:	ad 85       	ldd	r26, Y+13	; 0x0d
     f54:	be 85       	ldd	r27, Y+14	; 0x0e
     f56:	96 96       	adiw	r26, 0x26	; 38
     f58:	4d 93       	st	X+, r20
     f5a:	5d 93       	st	X+, r21
     f5c:	6d 93       	st	X+, r22
     f5e:	7c 93       	st	X, r23
     f60:	99 97       	sbiw	r26, 0x29	; 41
     f62:	88 0c       	add	r8, r8
     f64:	99 1c       	adc	r9, r9
     f66:	aa 1c       	adc	r10, r10
     f68:	bb 1c       	adc	r11, r11
     f6a:	88 0c       	add	r8, r8
     f6c:	99 1c       	adc	r9, r9
     f6e:	aa 1c       	adc	r10, r10
     f70:	bb 1c       	adc	r11, r11
     f72:	bf ef       	ldi	r27, 0xFF	; 255
     f74:	8b 0e       	add	r8, r27
     f76:	b1 e0       	ldi	r27, 0x01	; 1
     f78:	9b 1e       	adc	r9, r27
     f7a:	a1 1c       	adc	r10, r1
     f7c:	b1 1c       	adc	r11, r1
     f7e:	07 2e       	mov	r0, r23
     f80:	79 e0       	ldi	r23, 0x09	; 9
     f82:	b6 94       	lsr	r11
     f84:	a7 94       	ror	r10
     f86:	97 94       	ror	r9
     f88:	87 94       	ror	r8
     f8a:	7a 95       	dec	r23
     f8c:	d1 f7       	brne	.-12     	; 0xf82 <chk_mounted+0x406>
     f8e:	70 2d       	mov	r23, r0
     f90:	c8 14       	cp	r12, r8
     f92:	d9 04       	cpc	r13, r9
     f94:	ea 04       	cpc	r14, r10
     f96:	fb 04       	cpc	r15, r11
     f98:	08 f4       	brcc	.+2      	; 0xf9c <chk_mounted+0x420>
     f9a:	30 c1       	rjmp	.+608    	; 0x11fc <chk_mounted+0x680>
     f9c:	87 c1       	rjmp	.+782    	; 0x12ac <chk_mounted+0x730>
     f9e:	29 85       	ldd	r18, Y+9	; 0x09
     fa0:	3a 85       	ldd	r19, Y+10	; 0x0a
     fa2:	4b 85       	ldd	r20, Y+11	; 0x0b
     fa4:	5c 85       	ldd	r21, Y+12	; 0x0c
     fa6:	42 0e       	add	r4, r18
     fa8:	53 1e       	adc	r5, r19
     faa:	64 1e       	adc	r6, r20
     fac:	75 1e       	adc	r7, r21
     fae:	ad 85       	ldd	r26, Y+13	; 0x0d
     fb0:	be 85       	ldd	r27, Y+14	; 0x0e
     fb2:	96 96       	adiw	r26, 0x26	; 38
     fb4:	4d 92       	st	X+, r4
     fb6:	5d 92       	st	X+, r5
     fb8:	6d 92       	st	X+, r6
     fba:	7c 92       	st	X, r7
     fbc:	99 97       	sbiw	r26, 0x29	; 41
     fbe:	f2 30       	cpi	r31, 0x02	; 2
     fc0:	29 f4       	brne	.+10     	; 0xfcc <chk_mounted+0x450>
     fc2:	88 0c       	add	r8, r8
     fc4:	99 1c       	adc	r9, r9
     fc6:	aa 1c       	adc	r10, r10
     fc8:	bb 1c       	adc	r11, r11
     fca:	5a c1       	rjmp	.+692    	; 0x1280 <chk_mounted+0x704>
     fcc:	a3 e0       	ldi	r26, 0x03	; 3
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	a5 01       	movw	r20, r10
     fd2:	94 01       	movw	r18, r8
     fd4:	0e 94 44 19 	call	0x3288	; 0x3288 <__muluhisi3>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	b6 95       	lsr	r27
     fde:	a7 95       	ror	r26
     fe0:	97 95       	ror	r25
     fe2:	87 95       	ror	r24
     fe4:	e1 e0       	ldi	r30, 0x01	; 1
     fe6:	8e 22       	and	r8, r30
     fe8:	99 24       	eor	r9, r9
     fea:	aa 24       	eor	r10, r10
     fec:	bb 24       	eor	r11, r11
     fee:	88 0e       	add	r8, r24
     ff0:	99 1e       	adc	r9, r25
     ff2:	aa 1e       	adc	r10, r26
     ff4:	bb 1e       	adc	r11, r27
     ff6:	44 c1       	rjmp	.+648    	; 0x1280 <chk_mounted+0x704>
     ff8:	ed 85       	ldd	r30, Y+13	; 0x0d
     ffa:	fe 85       	ldd	r31, Y+14	; 0x0e
     ffc:	ef 5c       	subi	r30, 0xCF	; 207
     ffe:	fd 4f       	sbci	r31, 0xFD	; 253
    1000:	80 81       	ld	r24, Z
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	98 2f       	mov	r25, r24
    1006:	88 27       	eor	r24, r24
    1008:	ed 85       	ldd	r30, Y+13	; 0x0d
    100a:	fe 85       	ldd	r31, Y+14	; 0x0e
    100c:	e0 5d       	subi	r30, 0xD0	; 208
    100e:	fd 4f       	sbci	r31, 0xFD	; 253
    1010:	20 81       	ld	r18, Z
    1012:	82 2b       	or	r24, r18
    1014:	85 35       	cpi	r24, 0x55	; 85
    1016:	9a 4a       	sbci	r25, 0xAA	; 170
    1018:	09 f0       	breq	.+2      	; 0x101c <chk_mounted+0x4a0>
    101a:	ab c0       	rjmp	.+342    	; 0x1172 <chk_mounted+0x5f6>
    101c:	ad 85       	ldd	r26, Y+13	; 0x0d
    101e:	be 85       	ldd	r27, Y+14	; 0x0e
    1020:	d5 96       	adiw	r26, 0x35	; 53
    1022:	2c 91       	ld	r18, X
    1024:	d5 97       	sbiw	r26, 0x35	; 53
    1026:	d4 96       	adiw	r26, 0x34	; 52
    1028:	8c 91       	ld	r24, X
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	a0 e0       	ldi	r26, 0x00	; 0
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	dc 01       	movw	r26, r24
    1032:	99 27       	eor	r25, r25
    1034:	88 27       	eor	r24, r24
    1036:	b2 2b       	or	r27, r18
    1038:	ed 85       	ldd	r30, Y+13	; 0x0d
    103a:	fe 85       	ldd	r31, Y+14	; 0x0e
    103c:	22 a9       	ldd	r18, Z+50	; 0x32
    103e:	ac 01       	movw	r20, r24
    1040:	bd 01       	movw	r22, r26
    1042:	42 2b       	or	r20, r18
    1044:	23 a9       	ldd	r18, Z+51	; 0x33
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	92 2f       	mov	r25, r18
    104a:	88 27       	eor	r24, r24
    104c:	a0 e0       	ldi	r26, 0x00	; 0
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	84 2b       	or	r24, r20
    1052:	95 2b       	or	r25, r21
    1054:	a6 2b       	or	r26, r22
    1056:	b7 2b       	or	r27, r23
    1058:	82 35       	cpi	r24, 0x52	; 82
    105a:	92 45       	sbci	r25, 0x52	; 82
    105c:	a1 46       	sbci	r26, 0x61	; 97
    105e:	b1 44       	sbci	r27, 0x41	; 65
    1060:	09 f0       	breq	.+2      	; 0x1064 <chk_mounted+0x4e8>
    1062:	89 c0       	rjmp	.+274    	; 0x1176 <chk_mounted+0x5fa>
    1064:	ed 85       	ldd	r30, Y+13	; 0x0d
    1066:	fe 85       	ldd	r31, Y+14	; 0x0e
    1068:	e7 5e       	subi	r30, 0xE7	; 231
    106a:	fd 4f       	sbci	r31, 0xFD	; 253
    106c:	20 81       	ld	r18, Z
    106e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1070:	fe 85       	ldd	r31, Y+14	; 0x0e
    1072:	e8 5e       	subi	r30, 0xE8	; 232
    1074:	fd 4f       	sbci	r31, 0xFD	; 253
    1076:	80 81       	ld	r24, Z
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	a0 e0       	ldi	r26, 0x00	; 0
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	dc 01       	movw	r26, r24
    1080:	99 27       	eor	r25, r25
    1082:	88 27       	eor	r24, r24
    1084:	b2 2b       	or	r27, r18
    1086:	ed 85       	ldd	r30, Y+13	; 0x0d
    1088:	fe 85       	ldd	r31, Y+14	; 0x0e
    108a:	ea 5e       	subi	r30, 0xEA	; 234
    108c:	fd 4f       	sbci	r31, 0xFD	; 253
    108e:	20 81       	ld	r18, Z
    1090:	ac 01       	movw	r20, r24
    1092:	bd 01       	movw	r22, r26
    1094:	42 2b       	or	r20, r18
    1096:	ed 85       	ldd	r30, Y+13	; 0x0d
    1098:	fe 85       	ldd	r31, Y+14	; 0x0e
    109a:	e9 5e       	subi	r30, 0xE9	; 233
    109c:	fd 4f       	sbci	r31, 0xFD	; 253
    109e:	20 81       	ld	r18, Z
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	92 2f       	mov	r25, r18
    10a4:	88 27       	eor	r24, r24
    10a6:	a0 e0       	ldi	r26, 0x00	; 0
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	84 2b       	or	r24, r20
    10ac:	95 2b       	or	r25, r21
    10ae:	a6 2b       	or	r26, r22
    10b0:	b7 2b       	or	r27, r23
    10b2:	82 37       	cpi	r24, 0x72	; 114
    10b4:	92 47       	sbci	r25, 0x72	; 114
    10b6:	a1 44       	sbci	r26, 0x41	; 65
    10b8:	b1 46       	sbci	r27, 0x61	; 97
    10ba:	09 f0       	breq	.+2      	; 0x10be <chk_mounted+0x542>
    10bc:	5e c0       	rjmp	.+188    	; 0x117a <chk_mounted+0x5fe>
    10be:	ed 85       	ldd	r30, Y+13	; 0x0d
    10c0:	fe 85       	ldd	r31, Y+14	; 0x0e
    10c2:	ef 5d       	subi	r30, 0xDF	; 223
    10c4:	fd 4f       	sbci	r31, 0xFD	; 253
    10c6:	20 81       	ld	r18, Z
    10c8:	ed 85       	ldd	r30, Y+13	; 0x0d
    10ca:	fe 85       	ldd	r31, Y+14	; 0x0e
    10cc:	e0 5e       	subi	r30, 0xE0	; 224
    10ce:	fd 4f       	sbci	r31, 0xFD	; 253
    10d0:	80 81       	ld	r24, Z
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a0 e0       	ldi	r26, 0x00	; 0
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	dc 01       	movw	r26, r24
    10da:	99 27       	eor	r25, r25
    10dc:	88 27       	eor	r24, r24
    10de:	b2 2b       	or	r27, r18
    10e0:	ed 85       	ldd	r30, Y+13	; 0x0d
    10e2:	fe 85       	ldd	r31, Y+14	; 0x0e
    10e4:	e2 5e       	subi	r30, 0xE2	; 226
    10e6:	fd 4f       	sbci	r31, 0xFD	; 253
    10e8:	20 81       	ld	r18, Z
    10ea:	ac 01       	movw	r20, r24
    10ec:	bd 01       	movw	r22, r26
    10ee:	42 2b       	or	r20, r18
    10f0:	ed 85       	ldd	r30, Y+13	; 0x0d
    10f2:	fe 85       	ldd	r31, Y+14	; 0x0e
    10f4:	e1 5e       	subi	r30, 0xE1	; 225
    10f6:	fd 4f       	sbci	r31, 0xFD	; 253
    10f8:	20 81       	ld	r18, Z
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	92 2f       	mov	r25, r18
    10fe:	88 27       	eor	r24, r24
    1100:	a0 e0       	ldi	r26, 0x00	; 0
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	84 2b       	or	r24, r20
    1106:	95 2b       	or	r25, r21
    1108:	a6 2b       	or	r26, r22
    110a:	b7 2b       	or	r27, r23
    110c:	ed 85       	ldd	r30, Y+13	; 0x0d
    110e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1110:	82 87       	std	Z+10, r24	; 0x0a
    1112:	93 87       	std	Z+11, r25	; 0x0b
    1114:	a4 87       	std	Z+12, r26	; 0x0c
    1116:	b5 87       	std	Z+13, r27	; 0x0d
    1118:	e3 5e       	subi	r30, 0xE3	; 227
    111a:	fd 4f       	sbci	r31, 0xFD	; 253
    111c:	20 81       	ld	r18, Z
    111e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1120:	fe 85       	ldd	r31, Y+14	; 0x0e
    1122:	e4 5e       	subi	r30, 0xE4	; 228
    1124:	fd 4f       	sbci	r31, 0xFD	; 253
    1126:	80 81       	ld	r24, Z
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a0 e0       	ldi	r26, 0x00	; 0
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	dc 01       	movw	r26, r24
    1130:	99 27       	eor	r25, r25
    1132:	88 27       	eor	r24, r24
    1134:	b2 2b       	or	r27, r18
    1136:	ed 85       	ldd	r30, Y+13	; 0x0d
    1138:	fe 85       	ldd	r31, Y+14	; 0x0e
    113a:	e6 5e       	subi	r30, 0xE6	; 230
    113c:	fd 4f       	sbci	r31, 0xFD	; 253
    113e:	20 81       	ld	r18, Z
    1140:	ac 01       	movw	r20, r24
    1142:	bd 01       	movw	r22, r26
    1144:	42 2b       	or	r20, r18
    1146:	ed 85       	ldd	r30, Y+13	; 0x0d
    1148:	fe 85       	ldd	r31, Y+14	; 0x0e
    114a:	e5 5e       	subi	r30, 0xE5	; 229
    114c:	fd 4f       	sbci	r31, 0xFD	; 253
    114e:	20 81       	ld	r18, Z
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	92 2f       	mov	r25, r18
    1154:	88 27       	eor	r24, r24
    1156:	a0 e0       	ldi	r26, 0x00	; 0
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	84 2b       	or	r24, r20
    115c:	95 2b       	or	r25, r21
    115e:	a6 2b       	or	r26, r22
    1160:	b7 2b       	or	r27, r23
    1162:	ed 85       	ldd	r30, Y+13	; 0x0d
    1164:	fe 85       	ldd	r31, Y+14	; 0x0e
    1166:	86 87       	std	Z+14, r24	; 0x0e
    1168:	97 87       	std	Z+15, r25	; 0x0f
    116a:	a0 8b       	std	Z+16, r26	; 0x10
    116c:	b1 8b       	std	Z+17, r27	; 0x11
    116e:	f3 e0       	ldi	r31, 0x03	; 3
    1170:	05 c0       	rjmp	.+10     	; 0x117c <chk_mounted+0x600>
    1172:	f3 e0       	ldi	r31, 0x03	; 3
    1174:	03 c0       	rjmp	.+6      	; 0x117c <chk_mounted+0x600>
    1176:	f3 e0       	ldi	r31, 0x03	; 3
    1178:	01 c0       	rjmp	.+2      	; 0x117c <chk_mounted+0x600>
    117a:	f3 e0       	ldi	r31, 0x03	; 3
    117c:	ad 85       	ldd	r26, Y+13	; 0x0d
    117e:	be 85       	ldd	r27, Y+14	; 0x0e
    1180:	fc 93       	st	X, r31
    1182:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <Fsid>
    1186:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <Fsid+0x1>
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <Fsid+0x1>
    1190:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <Fsid>
    1194:	17 96       	adiw	r26, 0x07	; 7
    1196:	9c 93       	st	X, r25
    1198:	8e 93       	st	-X, r24
    119a:	16 97       	sbiw	r26, 0x06	; 6
    119c:	fd 01       	movw	r30, r26
    119e:	16 a6       	std	Z+46, r1	; 0x2e
    11a0:	17 a6       	std	Z+47, r1	; 0x2f
    11a2:	10 aa       	std	Z+48, r1	; 0x30
    11a4:	11 aa       	std	Z+49, r1	; 0x31
    11a6:	14 82       	std	Z+4, r1	; 0x04
    11a8:	56 96       	adiw	r26, 0x16	; 22
    11aa:	1d 92       	st	X+, r1
    11ac:	1d 92       	st	X+, r1
    11ae:	1d 92       	st	X+, r1
    11b0:	1c 92       	st	X, r1
    11b2:	59 97       	sbiw	r26, 0x19	; 25
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	df c0       	rjmp	.+446    	; 0x1376 <chk_mounted+0x7fa>
    11b8:	8b e0       	ldi	r24, 0x0B	; 11
    11ba:	dd c0       	rjmp	.+442    	; 0x1376 <chk_mounted+0x7fa>
    11bc:	8c e0       	ldi	r24, 0x0C	; 12
    11be:	db c0       	rjmp	.+438    	; 0x1376 <chk_mounted+0x7fa>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	d9 c0       	rjmp	.+434    	; 0x1376 <chk_mounted+0x7fa>
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	d7 c0       	rjmp	.+430    	; 0x1376 <chk_mounted+0x7fa>
    11c8:	83 e0       	ldi	r24, 0x03	; 3
    11ca:	d5 c0       	rjmp	.+426    	; 0x1376 <chk_mounted+0x7fa>
    11cc:	8a e0       	ldi	r24, 0x0A	; 10
    11ce:	d3 c0       	rjmp	.+422    	; 0x1376 <chk_mounted+0x7fa>
    11d0:	8d e0       	ldi	r24, 0x0D	; 13
    11d2:	d1 c0       	rjmp	.+418    	; 0x1376 <chk_mounted+0x7fa>
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	cf c0       	rjmp	.+414    	; 0x1376 <chk_mounted+0x7fa>
    11d8:	8d e0       	ldi	r24, 0x0D	; 13
    11da:	cd c0       	rjmp	.+410    	; 0x1376 <chk_mounted+0x7fa>
    11dc:	8d e0       	ldi	r24, 0x0D	; 13
    11de:	cb c0       	rjmp	.+406    	; 0x1376 <chk_mounted+0x7fa>
    11e0:	8d e0       	ldi	r24, 0x0D	; 13
    11e2:	c9 c0       	rjmp	.+402    	; 0x1376 <chk_mounted+0x7fa>
    11e4:	8d e0       	ldi	r24, 0x0D	; 13
    11e6:	c7 c0       	rjmp	.+398    	; 0x1376 <chk_mounted+0x7fa>
    11e8:	8d e0       	ldi	r24, 0x0D	; 13
    11ea:	c5 c0       	rjmp	.+394    	; 0x1376 <chk_mounted+0x7fa>
    11ec:	8d e0       	ldi	r24, 0x0D	; 13
    11ee:	c3 c0       	rjmp	.+390    	; 0x1376 <chk_mounted+0x7fa>
    11f0:	8d e0       	ldi	r24, 0x0D	; 13
    11f2:	c1 c0       	rjmp	.+386    	; 0x1376 <chk_mounted+0x7fa>
    11f4:	8d e0       	ldi	r24, 0x0D	; 13
    11f6:	bf c0       	rjmp	.+382    	; 0x1376 <chk_mounted+0x7fa>
    11f8:	8d e0       	ldi	r24, 0x0D	; 13
    11fa:	bd c0       	rjmp	.+378    	; 0x1376 <chk_mounted+0x7fa>
    11fc:	8d e0       	ldi	r24, 0x0D	; 13
    11fe:	bb c0       	rjmp	.+374    	; 0x1376 <chk_mounted+0x7fa>
    1200:	8d e0       	ldi	r24, 0x0D	; 13
    1202:	b9 c0       	rjmp	.+370    	; 0x1376 <chk_mounted+0x7fa>
    1204:	8d e0       	ldi	r24, 0x0D	; 13
    1206:	b7 c0       	rjmp	.+366    	; 0x1376 <chk_mounted+0x7fa>
    1208:	8d e0       	ldi	r24, 0x0D	; 13
    120a:	b5 c0       	rjmp	.+362    	; 0x1376 <chk_mounted+0x7fa>
    120c:	49 01       	movw	r8, r18
    120e:	5a 01       	movw	r10, r20
    1210:	b2 e0       	ldi	r27, 0x02	; 2
    1212:	8b 0e       	add	r8, r27
    1214:	91 1c       	adc	r9, r1
    1216:	a1 1c       	adc	r10, r1
    1218:	b1 1c       	adc	r11, r1
    121a:	ed 85       	ldd	r30, Y+13	; 0x0d
    121c:	fe 85       	ldd	r31, Y+14	; 0x0e
    121e:	82 8e       	std	Z+26, r8	; 0x1a
    1220:	93 8e       	std	Z+27, r9	; 0x1b
    1222:	a4 8e       	std	Z+28, r10	; 0x1c
    1224:	b5 8e       	std	Z+29, r11	; 0x1d
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	9a 81       	ldd	r25, Y+2	; 0x02
    122a:	ab 81       	ldd	r26, Y+3	; 0x03
    122c:	bc 81       	ldd	r27, Y+4	; 0x04
    122e:	84 0d       	add	r24, r4
    1230:	95 1d       	adc	r25, r5
    1232:	a6 1d       	adc	r26, r6
    1234:	b7 1d       	adc	r27, r7
    1236:	82 a7       	std	Z+42, r24	; 0x2a
    1238:	93 a7       	std	Z+43, r25	; 0x2b
    123a:	a4 a7       	std	Z+44, r26	; 0x2c
    123c:	b5 a7       	std	Z+45, r27	; 0x2d
    123e:	8d 81       	ldd	r24, Y+5	; 0x05
    1240:	9e 81       	ldd	r25, Y+6	; 0x06
    1242:	af 81       	ldd	r26, Y+7	; 0x07
    1244:	b8 85       	ldd	r27, Y+8	; 0x08
    1246:	84 0d       	add	r24, r4
    1248:	95 1d       	adc	r25, r5
    124a:	a6 1d       	adc	r26, r6
    124c:	b7 1d       	adc	r27, r7
    124e:	82 a3       	std	Z+34, r24	; 0x22
    1250:	93 a3       	std	Z+35, r25	; 0x23
    1252:	a4 a3       	std	Z+36, r26	; 0x24
    1254:	b5 a3       	std	Z+37, r27	; 0x25
    1256:	23 28       	or	r2, r3
    1258:	99 f6       	brne	.-90     	; 0x1200 <chk_mounted+0x684>
    125a:	55 ce       	rjmp	.-854    	; 0xf06 <chk_mounted+0x38a>
    125c:	4f ef       	ldi	r20, 0xFF	; 255
    125e:	5f ef       	ldi	r21, 0xFF	; 255
    1260:	ba 01       	movw	r22, r20
    1262:	ad 85       	ldd	r26, Y+13	; 0x0d
    1264:	be 85       	ldd	r27, Y+14	; 0x0e
    1266:	1e 96       	adiw	r26, 0x0e	; 14
    1268:	4d 93       	st	X+, r20
    126a:	5d 93       	st	X+, r21
    126c:	6d 93       	st	X+, r22
    126e:	7c 93       	st	X, r23
    1270:	51 97       	sbiw	r26, 0x11	; 17
    1272:	1a 96       	adiw	r26, 0x0a	; 10
    1274:	1d 92       	st	X+, r1
    1276:	1d 92       	st	X+, r1
    1278:	1d 92       	st	X+, r1
    127a:	1c 92       	st	X, r1
    127c:	1d 97       	sbiw	r26, 0x0d	; 13
    127e:	7e cf       	rjmp	.-260    	; 0x117c <chk_mounted+0x600>
    1280:	bf ef       	ldi	r27, 0xFF	; 255
    1282:	8b 0e       	add	r8, r27
    1284:	b1 e0       	ldi	r27, 0x01	; 1
    1286:	9b 1e       	adc	r9, r27
    1288:	a1 1c       	adc	r10, r1
    128a:	b1 1c       	adc	r11, r1
    128c:	07 2e       	mov	r0, r23
    128e:	79 e0       	ldi	r23, 0x09	; 9
    1290:	b6 94       	lsr	r11
    1292:	a7 94       	ror	r10
    1294:	97 94       	ror	r9
    1296:	87 94       	ror	r8
    1298:	7a 95       	dec	r23
    129a:	d1 f7       	brne	.-12     	; 0x1290 <chk_mounted+0x714>
    129c:	70 2d       	mov	r23, r0
    129e:	c8 14       	cp	r12, r8
    12a0:	d9 04       	cpc	r13, r9
    12a2:	ea 04       	cpc	r14, r10
    12a4:	fb 04       	cpc	r15, r11
    12a6:	08 f4       	brcc	.+2      	; 0x12aa <chk_mounted+0x72e>
    12a8:	ad cf       	rjmp	.-166    	; 0x1204 <chk_mounted+0x688>
    12aa:	d8 cf       	rjmp	.-80     	; 0x125c <chk_mounted+0x6e0>
    12ac:	8f ef       	ldi	r24, 0xFF	; 255
    12ae:	9f ef       	ldi	r25, 0xFF	; 255
    12b0:	dc 01       	movw	r26, r24
    12b2:	ed 85       	ldd	r30, Y+13	; 0x0d
    12b4:	fe 85       	ldd	r31, Y+14	; 0x0e
    12b6:	86 87       	std	Z+14, r24	; 0x0e
    12b8:	97 87       	std	Z+15, r25	; 0x0f
    12ba:	a0 8b       	std	Z+16, r26	; 0x10
    12bc:	b1 8b       	std	Z+17, r27	; 0x11
    12be:	df 01       	movw	r26, r30
    12c0:	12 86       	std	Z+10, r1	; 0x0a
    12c2:	13 86       	std	Z+11, r1	; 0x0b
    12c4:	14 86       	std	Z+12, r1	; 0x0c
    12c6:	15 86       	std	Z+13, r1	; 0x0d
    12c8:	15 82       	std	Z+5, r1	; 0x05
    12ca:	ed 59       	subi	r30, 0x9D	; 157
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	80 81       	ld	r24, Z
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	98 2f       	mov	r25, r24
    12d4:	88 27       	eor	r24, r24
    12d6:	31 97       	sbiw	r30, 0x01	; 1
    12d8:	20 81       	ld	r18, Z
    12da:	82 2b       	or	r24, r18
    12dc:	a3 01       	movw	r20, r6
    12de:	92 01       	movw	r18, r4
    12e0:	28 0f       	add	r18, r24
    12e2:	39 1f       	adc	r19, r25
    12e4:	41 1d       	adc	r20, r1
    12e6:	51 1d       	adc	r21, r1
    12e8:	fd 01       	movw	r30, r26
    12ea:	22 8b       	std	Z+18, r18	; 0x12
    12ec:	33 8b       	std	Z+19, r19	; 0x13
    12ee:	44 8b       	std	Z+20, r20	; 0x14
    12f0:	55 8b       	std	Z+21, r21	; 0x15
    12f2:	01 e0       	ldi	r16, 0x01	; 1
    12f4:	bd 01       	movw	r22, r26
    12f6:	6e 5c       	subi	r22, 0xCE	; 206
    12f8:	7f 4f       	sbci	r23, 0xFF	; 255
    12fa:	81 81       	ldd	r24, Z+1	; 0x01
    12fc:	a6 d8       	rcall	.-3764   	; 0x44a <disk_read>
    12fe:	88 23       	and	r24, r24
    1300:	09 f4       	brne	.+2      	; 0x1304 <chk_mounted+0x788>
    1302:	7a ce       	rjmp	.-780    	; 0xff8 <chk_mounted+0x47c>
    1304:	f3 e0       	ldi	r31, 0x03	; 3
    1306:	3a cf       	rjmp	.-396    	; 0x117c <chk_mounted+0x600>
    1308:	49 01       	movw	r8, r18
    130a:	5a 01       	movw	r10, r20
    130c:	62 e0       	ldi	r22, 0x02	; 2
    130e:	86 0e       	add	r8, r22
    1310:	91 1c       	adc	r9, r1
    1312:	a1 1c       	adc	r10, r1
    1314:	b1 1c       	adc	r11, r1
    1316:	ad 85       	ldd	r26, Y+13	; 0x0d
    1318:	be 85       	ldd	r27, Y+14	; 0x0e
    131a:	5a 96       	adiw	r26, 0x1a	; 26
    131c:	8d 92       	st	X+, r8
    131e:	9d 92       	st	X+, r9
    1320:	ad 92       	st	X+, r10
    1322:	bc 92       	st	X, r11
    1324:	5d 97       	sbiw	r26, 0x1d	; 29
    1326:	49 81       	ldd	r20, Y+1	; 0x01
    1328:	5a 81       	ldd	r21, Y+2	; 0x02
    132a:	6b 81       	ldd	r22, Y+3	; 0x03
    132c:	7c 81       	ldd	r23, Y+4	; 0x04
    132e:	44 0d       	add	r20, r4
    1330:	55 1d       	adc	r21, r5
    1332:	66 1d       	adc	r22, r6
    1334:	77 1d       	adc	r23, r7
    1336:	9a 96       	adiw	r26, 0x2a	; 42
    1338:	4d 93       	st	X+, r20
    133a:	5d 93       	st	X+, r21
    133c:	6d 93       	st	X+, r22
    133e:	7c 93       	st	X, r23
    1340:	9d 97       	sbiw	r26, 0x2d	; 45
    1342:	2d 81       	ldd	r18, Y+5	; 0x05
    1344:	3e 81       	ldd	r19, Y+6	; 0x06
    1346:	4f 81       	ldd	r20, Y+7	; 0x07
    1348:	58 85       	ldd	r21, Y+8	; 0x08
    134a:	42 0e       	add	r4, r18
    134c:	53 1e       	adc	r5, r19
    134e:	64 1e       	adc	r6, r20
    1350:	75 1e       	adc	r7, r21
    1352:	92 96       	adiw	r26, 0x22	; 34
    1354:	4d 92       	st	X+, r4
    1356:	5d 92       	st	X+, r5
    1358:	6d 92       	st	X+, r6
    135a:	7c 92       	st	X, r7
    135c:	95 97       	sbiw	r26, 0x25	; 37
    135e:	23 28       	or	r2, r3
    1360:	09 f4       	brne	.+2      	; 0x1364 <chk_mounted+0x7e8>
    1362:	52 cf       	rjmp	.-348    	; 0x1208 <chk_mounted+0x68c>
    1364:	1c ce       	rjmp	.-968    	; 0xf9e <chk_mounted+0x422>
    1366:	f2 e0       	ldi	r31, 0x02	; 2
    1368:	86 3f       	cpi	r24, 0xF6	; 246
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	a1 05       	cpc	r26, r1
    136e:	b1 05       	cpc	r27, r1
    1370:	08 f0       	brcs	.+2      	; 0x1374 <chk_mounted+0x7f8>
    1372:	4c cf       	rjmp	.-360    	; 0x120c <chk_mounted+0x690>
    1374:	c9 cf       	rjmp	.-110    	; 0x1308 <chk_mounted+0x78c>
    1376:	2e 96       	adiw	r28, 0x0e	; 14
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	df 90       	pop	r13
    1390:	cf 90       	pop	r12
    1392:	bf 90       	pop	r11
    1394:	af 90       	pop	r10
    1396:	9f 90       	pop	r9
    1398:	8f 90       	pop	r8
    139a:	7f 90       	pop	r7
    139c:	6f 90       	pop	r6
    139e:	5f 90       	pop	r5
    13a0:	4f 90       	pop	r4
    13a2:	3f 90       	pop	r3
    13a4:	2f 90       	pop	r2
    13a6:	08 95       	ret

000013a8 <sync>:
    13a8:	0f 93       	push	r16
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	ec 01       	movw	r28, r24
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	ba 01       	movw	r22, r20
    13b6:	df da       	rcall	.-2626   	; 0x976 <move_window>
    13b8:	98 2f       	mov	r25, r24
    13ba:	81 11       	cpse	r24, r1
    13bc:	58 c0       	rjmp	.+176    	; 0x146e <sync+0xc6>
    13be:	88 81       	ld	r24, Y
    13c0:	83 30       	cpi	r24, 0x03	; 3
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <sync+0x1e>
    13c4:	4b c0       	rjmp	.+150    	; 0x145c <sync+0xb4>
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	88 23       	and	r24, r24
    13ca:	09 f4       	brne	.+2      	; 0x13ce <sync+0x26>
    13cc:	47 c0       	rjmp	.+142    	; 0x145c <sync+0xb4>
    13ce:	1e a6       	std	Y+46, r1	; 0x2e
    13d0:	1f a6       	std	Y+47, r1	; 0x2f
    13d2:	18 aa       	std	Y+48, r1	; 0x30
    13d4:	19 aa       	std	Y+49, r1	; 0x31
    13d6:	be 01       	movw	r22, r28
    13d8:	6e 5c       	subi	r22, 0xCE	; 206
    13da:	7f 4f       	sbci	r23, 0xFF	; 255
    13dc:	fb 01       	movw	r30, r22
    13de:	ce 01       	movw	r24, r28
    13e0:	8e 5c       	subi	r24, 0xCE	; 206
    13e2:	9d 4f       	sbci	r25, 0xFD	; 253
    13e4:	11 92       	st	Z+, r1
    13e6:	e8 17       	cp	r30, r24
    13e8:	f9 07       	cpc	r31, r25
    13ea:	e1 f7       	brne	.-8      	; 0x13e4 <sync+0x3c>
    13ec:	85 e5       	ldi	r24, 0x55	; 85
    13ee:	fe 01       	movw	r30, r28
    13f0:	e0 5d       	subi	r30, 0xD0	; 208
    13f2:	fd 4f       	sbci	r31, 0xFD	; 253
    13f4:	80 83       	st	Z, r24
    13f6:	8a ea       	ldi	r24, 0xAA	; 170
    13f8:	31 96       	adiw	r30, 0x01	; 1
    13fa:	80 83       	st	Z, r24
    13fc:	82 e5       	ldi	r24, 0x52	; 82
    13fe:	8a ab       	std	Y+50, r24	; 0x32
    1400:	8b ab       	std	Y+51, r24	; 0x33
    1402:	81 e6       	ldi	r24, 0x61	; 97
    1404:	8c ab       	std	Y+52, r24	; 0x34
    1406:	91 e4       	ldi	r25, 0x41	; 65
    1408:	9d ab       	std	Y+53, r25	; 0x35
    140a:	22 e7       	ldi	r18, 0x72	; 114
    140c:	7b 97       	sbiw	r30, 0x1b	; 27
    140e:	20 83       	st	Z, r18
    1410:	31 96       	adiw	r30, 0x01	; 1
    1412:	20 83       	st	Z, r18
    1414:	31 96       	adiw	r30, 0x01	; 1
    1416:	90 83       	st	Z, r25
    1418:	31 96       	adiw	r30, 0x01	; 1
    141a:	80 83       	st	Z, r24
    141c:	3e 85       	ldd	r19, Y+14	; 0x0e
    141e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1420:	98 89       	ldd	r25, Y+16	; 0x10
    1422:	89 89       	ldd	r24, Y+17	; 0x11
    1424:	31 96       	adiw	r30, 0x01	; 1
    1426:	30 83       	st	Z, r19
    1428:	31 96       	adiw	r30, 0x01	; 1
    142a:	20 83       	st	Z, r18
    142c:	31 96       	adiw	r30, 0x01	; 1
    142e:	90 83       	st	Z, r25
    1430:	31 96       	adiw	r30, 0x01	; 1
    1432:	80 83       	st	Z, r24
    1434:	3a 85       	ldd	r19, Y+10	; 0x0a
    1436:	2b 85       	ldd	r18, Y+11	; 0x0b
    1438:	9c 85       	ldd	r25, Y+12	; 0x0c
    143a:	8d 85       	ldd	r24, Y+13	; 0x0d
    143c:	31 96       	adiw	r30, 0x01	; 1
    143e:	30 83       	st	Z, r19
    1440:	31 96       	adiw	r30, 0x01	; 1
    1442:	20 83       	st	Z, r18
    1444:	31 96       	adiw	r30, 0x01	; 1
    1446:	90 83       	st	Z, r25
    1448:	31 96       	adiw	r30, 0x01	; 1
    144a:	80 83       	st	Z, r24
    144c:	2a 89       	ldd	r18, Y+18	; 0x12
    144e:	3b 89       	ldd	r19, Y+19	; 0x13
    1450:	4c 89       	ldd	r20, Y+20	; 0x14
    1452:	5d 89       	ldd	r21, Y+21	; 0x15
    1454:	01 e0       	ldi	r16, 0x01	; 1
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	45 d8       	rcall	.-3958   	; 0x4e4 <disk_write>
    145a:	1d 82       	std	Y+5, r1	; 0x05
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	a4 d8       	rcall	.-3768   	; 0x5ae <disk_ioctl>
    1466:	91 e0       	ldi	r25, 0x01	; 1
    1468:	81 11       	cpse	r24, r1
    146a:	01 c0       	rjmp	.+2      	; 0x146e <sync+0xc6>
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	89 2f       	mov	r24, r25
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	0f 91       	pop	r16
    1476:	08 95       	ret

00001478 <clust2sect>:
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	fc 01       	movw	r30, r24
    147e:	9a 01       	movw	r18, r20
    1480:	ab 01       	movw	r20, r22
    1482:	22 50       	subi	r18, 0x02	; 2
    1484:	31 09       	sbc	r19, r1
    1486:	41 09       	sbc	r20, r1
    1488:	51 09       	sbc	r21, r1
    148a:	82 8d       	ldd	r24, Z+26	; 0x1a
    148c:	93 8d       	ldd	r25, Z+27	; 0x1b
    148e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1490:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1492:	02 97       	sbiw	r24, 0x02	; 2
    1494:	a1 09       	sbc	r26, r1
    1496:	b1 09       	sbc	r27, r1
    1498:	28 17       	cp	r18, r24
    149a:	39 07       	cpc	r19, r25
    149c:	4a 07       	cpc	r20, r26
    149e:	5b 07       	cpc	r21, r27
    14a0:	68 f4       	brcc	.+26     	; 0x14bc <clust2sect+0x44>
    14a2:	a2 81       	ldd	r26, Z+2	; 0x02
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	0e 94 44 19 	call	0x3288	; 0x3288 <__muluhisi3>
    14aa:	02 a5       	ldd	r16, Z+42	; 0x2a
    14ac:	13 a5       	ldd	r17, Z+43	; 0x2b
    14ae:	24 a5       	ldd	r18, Z+44	; 0x2c
    14b0:	35 a5       	ldd	r19, Z+45	; 0x2d
    14b2:	60 0f       	add	r22, r16
    14b4:	71 1f       	adc	r23, r17
    14b6:	82 1f       	adc	r24, r18
    14b8:	93 1f       	adc	r25, r19
    14ba:	03 c0       	rjmp	.+6      	; 0x14c2 <clust2sect+0x4a>
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	cb 01       	movw	r24, r22
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	08 95       	ret

000014c8 <get_fat>:
    14c8:	af 92       	push	r10
    14ca:	bf 92       	push	r11
    14cc:	cf 92       	push	r12
    14ce:	df 92       	push	r13
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	42 30       	cpi	r20, 0x02	; 2
    14dc:	51 05       	cpc	r21, r1
    14de:	61 05       	cpc	r22, r1
    14e0:	71 05       	cpc	r23, r1
    14e2:	08 f4       	brcc	.+2      	; 0x14e6 <get_fat+0x1e>
    14e4:	c6 c0       	rjmp	.+396    	; 0x1672 <get_fat+0x1aa>
    14e6:	fc 01       	movw	r30, r24
    14e8:	c2 8c       	ldd	r12, Z+26	; 0x1a
    14ea:	d3 8c       	ldd	r13, Z+27	; 0x1b
    14ec:	e4 8c       	ldd	r14, Z+28	; 0x1c
    14ee:	f5 8c       	ldd	r15, Z+29	; 0x1d
    14f0:	4c 15       	cp	r20, r12
    14f2:	5d 05       	cpc	r21, r13
    14f4:	6e 05       	cpc	r22, r14
    14f6:	7f 05       	cpc	r23, r15
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <get_fat+0x34>
    14fa:	c0 c0       	rjmp	.+384    	; 0x167c <get_fat+0x1b4>
    14fc:	6a 01       	movw	r12, r20
    14fe:	7b 01       	movw	r14, r22
    1500:	ec 01       	movw	r28, r24
    1502:	80 81       	ld	r24, Z
    1504:	82 30       	cpi	r24, 0x02	; 2
    1506:	09 f4       	brne	.+2      	; 0x150a <get_fat+0x42>
    1508:	4a c0       	rjmp	.+148    	; 0x159e <get_fat+0xd6>
    150a:	83 30       	cpi	r24, 0x03	; 3
    150c:	09 f4       	brne	.+2      	; 0x1510 <get_fat+0x48>
    150e:	6d c0       	rjmp	.+218    	; 0x15ea <get_fat+0x122>
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	09 f0       	breq	.+2      	; 0x1516 <get_fat+0x4e>
    1514:	b8 c0       	rjmp	.+368    	; 0x1686 <get_fat+0x1be>
    1516:	5a 01       	movw	r10, r20
    1518:	b6 94       	lsr	r11
    151a:	a7 94       	ror	r10
    151c:	a4 0e       	add	r10, r20
    151e:	b5 1e       	adc	r11, r21
    1520:	c5 01       	movw	r24, r10
    1522:	89 2f       	mov	r24, r25
    1524:	99 27       	eor	r25, r25
    1526:	86 95       	lsr	r24
    1528:	42 a1       	ldd	r20, Z+34	; 0x22
    152a:	53 a1       	ldd	r21, Z+35	; 0x23
    152c:	64 a1       	ldd	r22, Z+36	; 0x24
    152e:	75 a1       	ldd	r23, Z+37	; 0x25
    1530:	48 0f       	add	r20, r24
    1532:	59 1f       	adc	r21, r25
    1534:	61 1d       	adc	r22, r1
    1536:	71 1d       	adc	r23, r1
    1538:	cf 01       	movw	r24, r30
    153a:	1d da       	rcall	.-3014   	; 0x976 <move_window>
    153c:	81 11       	cpse	r24, r1
    153e:	a7 c0       	rjmp	.+334    	; 0x168e <get_fat+0x1c6>
    1540:	f5 01       	movw	r30, r10
    1542:	f1 70       	andi	r31, 0x01	; 1
    1544:	ec 0f       	add	r30, r28
    1546:	fd 1f       	adc	r31, r29
    1548:	12 a9       	ldd	r17, Z+50	; 0x32
    154a:	ff ef       	ldi	r31, 0xFF	; 255
    154c:	af 1a       	sub	r10, r31
    154e:	bf 0a       	sbc	r11, r31
    1550:	c5 01       	movw	r24, r10
    1552:	89 2f       	mov	r24, r25
    1554:	99 27       	eor	r25, r25
    1556:	86 95       	lsr	r24
    1558:	4a a1       	ldd	r20, Y+34	; 0x22
    155a:	5b a1       	ldd	r21, Y+35	; 0x23
    155c:	6c a1       	ldd	r22, Y+36	; 0x24
    155e:	7d a1       	ldd	r23, Y+37	; 0x25
    1560:	48 0f       	add	r20, r24
    1562:	59 1f       	adc	r21, r25
    1564:	61 1d       	adc	r22, r1
    1566:	71 1d       	adc	r23, r1
    1568:	ce 01       	movw	r24, r28
    156a:	05 da       	rcall	.-3062   	; 0x976 <move_window>
    156c:	81 11       	cpse	r24, r1
    156e:	93 c0       	rjmp	.+294    	; 0x1696 <get_fat+0x1ce>
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	b8 22       	and	r11, r24
    1574:	ca 0d       	add	r28, r10
    1576:	db 1d       	adc	r29, r11
    1578:	8a a9       	ldd	r24, Y+50	; 0x32
    157a:	61 2f       	mov	r22, r17
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	78 2b       	or	r23, r24
    1580:	c0 fe       	sbrs	r12, 0
    1582:	09 c0       	rjmp	.+18     	; 0x1596 <get_fat+0xce>
    1584:	72 95       	swap	r23
    1586:	62 95       	swap	r22
    1588:	6f 70       	andi	r22, 0x0F	; 15
    158a:	67 27       	eor	r22, r23
    158c:	7f 70       	andi	r23, 0x0F	; 15
    158e:	67 27       	eor	r22, r23
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	8b c0       	rjmp	.+278    	; 0x16ac <get_fat+0x1e4>
    1596:	7f 70       	andi	r23, 0x0F	; 15
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	87 c0       	rjmp	.+270    	; 0x16ac <get_fat+0x1e4>
    159e:	45 2f       	mov	r20, r21
    15a0:	56 2f       	mov	r21, r22
    15a2:	67 2f       	mov	r22, r23
    15a4:	77 27       	eor	r23, r23
    15a6:	82 a1       	ldd	r24, Z+34	; 0x22
    15a8:	93 a1       	ldd	r25, Z+35	; 0x23
    15aa:	a4 a1       	ldd	r26, Z+36	; 0x24
    15ac:	b5 a1       	ldd	r27, Z+37	; 0x25
    15ae:	48 0f       	add	r20, r24
    15b0:	59 1f       	adc	r21, r25
    15b2:	6a 1f       	adc	r22, r26
    15b4:	7b 1f       	adc	r23, r27
    15b6:	cf 01       	movw	r24, r30
    15b8:	de d9       	rcall	.-3140   	; 0x976 <move_window>
    15ba:	81 11       	cpse	r24, r1
    15bc:	70 c0       	rjmp	.+224    	; 0x169e <get_fat+0x1d6>
    15be:	cc 0c       	add	r12, r12
    15c0:	dd 1c       	adc	r13, r13
    15c2:	ee 1c       	adc	r14, r14
    15c4:	ff 1c       	adc	r15, r15
    15c6:	e8 94       	clt
    15c8:	c0 f8       	bld	r12, 0
    15ca:	e1 e0       	ldi	r30, 0x01	; 1
    15cc:	de 22       	and	r13, r30
    15ce:	ee 24       	eor	r14, r14
    15d0:	ff 24       	eor	r15, r15
    15d2:	fe 01       	movw	r30, r28
    15d4:	ec 0d       	add	r30, r12
    15d6:	fd 1d       	adc	r31, r13
    15d8:	63 a9       	ldd	r22, Z+51	; 0x33
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	76 2f       	mov	r23, r22
    15de:	66 27       	eor	r22, r22
    15e0:	82 a9       	ldd	r24, Z+50	; 0x32
    15e2:	68 2b       	or	r22, r24
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	61 c0       	rjmp	.+194    	; 0x16ac <get_fat+0x1e4>
    15ea:	82 a1       	ldd	r24, Z+34	; 0x22
    15ec:	93 a1       	ldd	r25, Z+35	; 0x23
    15ee:	a4 a1       	ldd	r26, Z+36	; 0x24
    15f0:	b5 a1       	ldd	r27, Z+37	; 0x25
    15f2:	68 94       	set
    15f4:	16 f8       	bld	r1, 6
    15f6:	76 95       	lsr	r23
    15f8:	67 95       	ror	r22
    15fa:	57 95       	ror	r21
    15fc:	47 95       	ror	r20
    15fe:	16 94       	lsr	r1
    1600:	d1 f7       	brne	.-12     	; 0x15f6 <get_fat+0x12e>
    1602:	48 0f       	add	r20, r24
    1604:	59 1f       	adc	r21, r25
    1606:	6a 1f       	adc	r22, r26
    1608:	7b 1f       	adc	r23, r27
    160a:	cf 01       	movw	r24, r30
    160c:	b4 d9       	rcall	.-3224   	; 0x976 <move_window>
    160e:	81 11       	cpse	r24, r1
    1610:	4a c0       	rjmp	.+148    	; 0x16a6 <get_fat+0x1de>
    1612:	cc 0c       	add	r12, r12
    1614:	dd 1c       	adc	r13, r13
    1616:	ee 1c       	adc	r14, r14
    1618:	ff 1c       	adc	r15, r15
    161a:	cc 0c       	add	r12, r12
    161c:	dd 1c       	adc	r13, r13
    161e:	ee 1c       	adc	r14, r14
    1620:	ff 1c       	adc	r15, r15
    1622:	fc ef       	ldi	r31, 0xFC	; 252
    1624:	cf 22       	and	r12, r31
    1626:	f1 e0       	ldi	r31, 0x01	; 1
    1628:	df 22       	and	r13, r31
    162a:	ee 24       	eor	r14, r14
    162c:	ff 24       	eor	r15, r15
    162e:	f6 01       	movw	r30, r12
    1630:	f2 96       	adiw	r30, 0x32	; 50
    1632:	ec 0f       	add	r30, r28
    1634:	fd 1f       	adc	r31, r29
    1636:	23 81       	ldd	r18, Z+3	; 0x03
    1638:	62 81       	ldd	r22, Z+2	; 0x02
    163a:	86 2f       	mov	r24, r22
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	a0 e0       	ldi	r26, 0x00	; 0
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	dc 01       	movw	r26, r24
    1644:	99 27       	eor	r25, r25
    1646:	88 27       	eor	r24, r24
    1648:	ac 01       	movw	r20, r24
    164a:	bd 01       	movw	r22, r26
    164c:	72 2b       	or	r23, r18
    164e:	81 81       	ldd	r24, Z+1	; 0x01
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	98 2f       	mov	r25, r24
    1654:	88 27       	eor	r24, r24
    1656:	a0 e0       	ldi	r26, 0x00	; 0
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	84 2b       	or	r24, r20
    165c:	95 2b       	or	r25, r21
    165e:	a6 2b       	or	r26, r22
    1660:	b7 2b       	or	r27, r23
    1662:	cc 0d       	add	r28, r12
    1664:	dd 1d       	adc	r29, r13
    1666:	2a a9       	ldd	r18, Y+50	; 0x32
    1668:	82 2b       	or	r24, r18
    166a:	bc 01       	movw	r22, r24
    166c:	cd 01       	movw	r24, r26
    166e:	9f 70       	andi	r25, 0x0F	; 15
    1670:	1d c0       	rjmp	.+58     	; 0x16ac <get_fat+0x1e4>
    1672:	61 e0       	ldi	r22, 0x01	; 1
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	18 c0       	rjmp	.+48     	; 0x16ac <get_fat+0x1e4>
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	13 c0       	rjmp	.+38     	; 0x16ac <get_fat+0x1e4>
    1686:	6f ef       	ldi	r22, 0xFF	; 255
    1688:	7f ef       	ldi	r23, 0xFF	; 255
    168a:	cb 01       	movw	r24, r22
    168c:	0f c0       	rjmp	.+30     	; 0x16ac <get_fat+0x1e4>
    168e:	6f ef       	ldi	r22, 0xFF	; 255
    1690:	7f ef       	ldi	r23, 0xFF	; 255
    1692:	cb 01       	movw	r24, r22
    1694:	0b c0       	rjmp	.+22     	; 0x16ac <get_fat+0x1e4>
    1696:	6f ef       	ldi	r22, 0xFF	; 255
    1698:	7f ef       	ldi	r23, 0xFF	; 255
    169a:	cb 01       	movw	r24, r22
    169c:	07 c0       	rjmp	.+14     	; 0x16ac <get_fat+0x1e4>
    169e:	6f ef       	ldi	r22, 0xFF	; 255
    16a0:	7f ef       	ldi	r23, 0xFF	; 255
    16a2:	cb 01       	movw	r24, r22
    16a4:	03 c0       	rjmp	.+6      	; 0x16ac <get_fat+0x1e4>
    16a6:	6f ef       	ldi	r22, 0xFF	; 255
    16a8:	7f ef       	ldi	r23, 0xFF	; 255
    16aa:	cb 01       	movw	r24, r22
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	df 90       	pop	r13
    16b8:	cf 90       	pop	r12
    16ba:	bf 90       	pop	r11
    16bc:	af 90       	pop	r10
    16be:	08 95       	ret

000016c0 <dir_sdi>:
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	ec 01       	movw	r28, r24
    16ce:	8b 01       	movw	r16, r22
    16d0:	7d 83       	std	Y+5, r23	; 0x05
    16d2:	6c 83       	std	Y+4, r22	; 0x04
    16d4:	4e 81       	ldd	r20, Y+6	; 0x06
    16d6:	5f 81       	ldd	r21, Y+7	; 0x07
    16d8:	68 85       	ldd	r22, Y+8	; 0x08
    16da:	79 85       	ldd	r23, Y+9	; 0x09
    16dc:	41 30       	cpi	r20, 0x01	; 1
    16de:	51 05       	cpc	r21, r1
    16e0:	61 05       	cpc	r22, r1
    16e2:	71 05       	cpc	r23, r1
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <dir_sdi+0x28>
    16e6:	90 c0       	rjmp	.+288    	; 0x1808 <dir_sdi+0x148>
    16e8:	e8 81       	ld	r30, Y
    16ea:	f9 81       	ldd	r31, Y+1	; 0x01
    16ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    16ee:	93 8d       	ldd	r25, Z+27	; 0x1b
    16f0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    16f2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    16f4:	48 17       	cp	r20, r24
    16f6:	59 07       	cpc	r21, r25
    16f8:	6a 07       	cpc	r22, r26
    16fa:	7b 07       	cpc	r23, r27
    16fc:	08 f0       	brcs	.+2      	; 0x1700 <dir_sdi+0x40>
    16fe:	86 c0       	rjmp	.+268    	; 0x180c <dir_sdi+0x14c>
    1700:	41 15       	cp	r20, r1
    1702:	51 05       	cpc	r21, r1
    1704:	61 05       	cpc	r22, r1
    1706:	71 05       	cpc	r23, r1
    1708:	51 f5       	brne	.+84     	; 0x175e <dir_sdi+0x9e>
    170a:	80 81       	ld	r24, Z
    170c:	83 30       	cpi	r24, 0x03	; 3
    170e:	49 f4       	brne	.+18     	; 0x1722 <dir_sdi+0x62>
    1710:	46 a1       	ldd	r20, Z+38	; 0x26
    1712:	57 a1       	ldd	r21, Z+39	; 0x27
    1714:	60 a5       	ldd	r22, Z+40	; 0x28
    1716:	71 a5       	ldd	r23, Z+41	; 0x29
    1718:	41 15       	cp	r20, r1
    171a:	51 05       	cpc	r21, r1
    171c:	61 05       	cpc	r22, r1
    171e:	71 05       	cpc	r23, r1
    1720:	f1 f4       	brne	.+60     	; 0x175e <dir_sdi+0x9e>
    1722:	1a 86       	std	Y+10, r1	; 0x0a
    1724:	1b 86       	std	Y+11, r1	; 0x0b
    1726:	1c 86       	std	Y+12, r1	; 0x0c
    1728:	1d 86       	std	Y+13, r1	; 0x0d
    172a:	80 85       	ldd	r24, Z+8	; 0x08
    172c:	91 85       	ldd	r25, Z+9	; 0x09
    172e:	08 17       	cp	r16, r24
    1730:	19 07       	cpc	r17, r25
    1732:	08 f0       	brcs	.+2      	; 0x1736 <dir_sdi+0x76>
    1734:	6d c0       	rjmp	.+218    	; 0x1810 <dir_sdi+0x150>
    1736:	86 a1       	ldd	r24, Z+38	; 0x26
    1738:	97 a1       	ldd	r25, Z+39	; 0x27
    173a:	a0 a5       	ldd	r26, Z+40	; 0x28
    173c:	b1 a5       	ldd	r27, Z+41	; 0x29
    173e:	98 01       	movw	r18, r16
    1740:	32 95       	swap	r19
    1742:	22 95       	swap	r18
    1744:	2f 70       	andi	r18, 0x0F	; 15
    1746:	23 27       	eor	r18, r19
    1748:	3f 70       	andi	r19, 0x0F	; 15
    174a:	23 27       	eor	r18, r19
    174c:	82 0f       	add	r24, r18
    174e:	93 1f       	adc	r25, r19
    1750:	a1 1d       	adc	r26, r1
    1752:	b1 1d       	adc	r27, r1
    1754:	8e 87       	std	Y+14, r24	; 0x0e
    1756:	9f 87       	std	Y+15, r25	; 0x0f
    1758:	a8 8b       	std	Y+16, r26	; 0x10
    175a:	b9 8b       	std	Y+17, r27	; 0x11
    175c:	42 c0       	rjmp	.+132    	; 0x17e2 <dir_sdi+0x122>
    175e:	e2 80       	ldd	r14, Z+2	; 0x02
    1760:	80 e1       	ldi	r24, 0x10	; 16
    1762:	e8 9e       	mul	r14, r24
    1764:	70 01       	movw	r14, r0
    1766:	11 24       	eor	r1, r1
    1768:	0e 15       	cp	r16, r14
    176a:	1f 05       	cpc	r17, r15
    176c:	10 f1       	brcs	.+68     	; 0x17b2 <dir_sdi+0xf2>
    176e:	88 81       	ld	r24, Y
    1770:	99 81       	ldd	r25, Y+1	; 0x01
    1772:	aa de       	rcall	.-684    	; 0x14c8 <get_fat>
    1774:	ab 01       	movw	r20, r22
    1776:	bc 01       	movw	r22, r24
    1778:	4f 3f       	cpi	r20, 0xFF	; 255
    177a:	8f ef       	ldi	r24, 0xFF	; 255
    177c:	58 07       	cpc	r21, r24
    177e:	68 07       	cpc	r22, r24
    1780:	78 07       	cpc	r23, r24
    1782:	09 f4       	brne	.+2      	; 0x1786 <dir_sdi+0xc6>
    1784:	47 c0       	rjmp	.+142    	; 0x1814 <dir_sdi+0x154>
    1786:	42 30       	cpi	r20, 0x02	; 2
    1788:	51 05       	cpc	r21, r1
    178a:	61 05       	cpc	r22, r1
    178c:	71 05       	cpc	r23, r1
    178e:	08 f4       	brcc	.+2      	; 0x1792 <dir_sdi+0xd2>
    1790:	43 c0       	rjmp	.+134    	; 0x1818 <dir_sdi+0x158>
    1792:	e8 81       	ld	r30, Y
    1794:	f9 81       	ldd	r31, Y+1	; 0x01
    1796:	82 8d       	ldd	r24, Z+26	; 0x1a
    1798:	93 8d       	ldd	r25, Z+27	; 0x1b
    179a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    179c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    179e:	48 17       	cp	r20, r24
    17a0:	59 07       	cpc	r21, r25
    17a2:	6a 07       	cpc	r22, r26
    17a4:	7b 07       	cpc	r23, r27
    17a6:	d0 f5       	brcc	.+116    	; 0x181c <dir_sdi+0x15c>
    17a8:	0e 19       	sub	r16, r14
    17aa:	1f 09       	sbc	r17, r15
    17ac:	0e 15       	cp	r16, r14
    17ae:	1f 05       	cpc	r17, r15
    17b0:	f0 f6       	brcc	.-68     	; 0x176e <dir_sdi+0xae>
    17b2:	4a 87       	std	Y+10, r20	; 0x0a
    17b4:	5b 87       	std	Y+11, r21	; 0x0b
    17b6:	6c 87       	std	Y+12, r22	; 0x0c
    17b8:	7d 87       	std	Y+13, r23	; 0x0d
    17ba:	88 81       	ld	r24, Y
    17bc:	99 81       	ldd	r25, Y+1	; 0x01
    17be:	5c de       	rcall	.-840    	; 0x1478 <clust2sect>
    17c0:	98 01       	movw	r18, r16
    17c2:	32 95       	swap	r19
    17c4:	22 95       	swap	r18
    17c6:	2f 70       	andi	r18, 0x0F	; 15
    17c8:	23 27       	eor	r18, r19
    17ca:	3f 70       	andi	r19, 0x0F	; 15
    17cc:	23 27       	eor	r18, r19
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	82 0f       	add	r24, r18
    17d4:	93 1f       	adc	r25, r19
    17d6:	a1 1d       	adc	r26, r1
    17d8:	b1 1d       	adc	r27, r1
    17da:	8e 87       	std	Y+14, r24	; 0x0e
    17dc:	9f 87       	std	Y+15, r25	; 0x0f
    17de:	a8 8b       	std	Y+16, r26	; 0x10
    17e0:	b9 8b       	std	Y+17, r27	; 0x11
    17e2:	88 81       	ld	r24, Y
    17e4:	99 81       	ldd	r25, Y+1	; 0x01
    17e6:	c2 96       	adiw	r24, 0x32	; 50
    17e8:	0f 70       	andi	r16, 0x0F	; 15
    17ea:	11 27       	eor	r17, r17
    17ec:	00 0f       	add	r16, r16
    17ee:	11 1f       	adc	r17, r17
    17f0:	02 95       	swap	r16
    17f2:	12 95       	swap	r17
    17f4:	10 7f       	andi	r17, 0xF0	; 240
    17f6:	10 27       	eor	r17, r16
    17f8:	00 7f       	andi	r16, 0xF0	; 240
    17fa:	10 27       	eor	r17, r16
    17fc:	08 0f       	add	r16, r24
    17fe:	19 1f       	adc	r17, r25
    1800:	1b 8b       	std	Y+19, r17	; 0x13
    1802:	0a 8b       	std	Y+18, r16	; 0x12
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	0b c0       	rjmp	.+22     	; 0x181e <dir_sdi+0x15e>
    1808:	82 e0       	ldi	r24, 0x02	; 2
    180a:	09 c0       	rjmp	.+18     	; 0x181e <dir_sdi+0x15e>
    180c:	82 e0       	ldi	r24, 0x02	; 2
    180e:	07 c0       	rjmp	.+14     	; 0x181e <dir_sdi+0x15e>
    1810:	82 e0       	ldi	r24, 0x02	; 2
    1812:	05 c0       	rjmp	.+10     	; 0x181e <dir_sdi+0x15e>
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	03 c0       	rjmp	.+6      	; 0x181e <dir_sdi+0x15e>
    1818:	82 e0       	ldi	r24, 0x02	; 2
    181a:	01 c0       	rjmp	.+2      	; 0x181e <dir_sdi+0x15e>
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	08 95       	ret

0000182c <put_fat>:
    182c:	7f 92       	push	r7
    182e:	8f 92       	push	r8
    1830:	9f 92       	push	r9
    1832:	af 92       	push	r10
    1834:	bf 92       	push	r11
    1836:	cf 92       	push	r12
    1838:	df 92       	push	r13
    183a:	ef 92       	push	r14
    183c:	ff 92       	push	r15
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	42 30       	cpi	r20, 0x02	; 2
    1848:	51 05       	cpc	r21, r1
    184a:	61 05       	cpc	r22, r1
    184c:	71 05       	cpc	r23, r1
    184e:	08 f4       	brcc	.+2      	; 0x1852 <put_fat+0x26>
    1850:	e3 c0       	rjmp	.+454    	; 0x1a18 <put_fat+0x1ec>
    1852:	fc 01       	movw	r30, r24
    1854:	c2 8c       	ldd	r12, Z+26	; 0x1a
    1856:	d3 8c       	ldd	r13, Z+27	; 0x1b
    1858:	e4 8c       	ldd	r14, Z+28	; 0x1c
    185a:	f5 8c       	ldd	r15, Z+29	; 0x1d
    185c:	4c 15       	cp	r20, r12
    185e:	5d 05       	cpc	r21, r13
    1860:	6e 05       	cpc	r22, r14
    1862:	7f 05       	cpc	r23, r15
    1864:	08 f0       	brcs	.+2      	; 0x1868 <put_fat+0x3c>
    1866:	dc c0       	rjmp	.+440    	; 0x1a20 <put_fat+0x1f4>
    1868:	68 01       	movw	r12, r16
    186a:	79 01       	movw	r14, r18
    186c:	4a 01       	movw	r8, r20
    186e:	5b 01       	movw	r10, r22
    1870:	ec 01       	movw	r28, r24
    1872:	80 81       	ld	r24, Z
    1874:	82 30       	cpi	r24, 0x02	; 2
    1876:	09 f4       	brne	.+2      	; 0x187a <put_fat+0x4e>
    1878:	5f c0       	rjmp	.+190    	; 0x1938 <put_fat+0x10c>
    187a:	83 30       	cpi	r24, 0x03	; 3
    187c:	09 f4       	brne	.+2      	; 0x1880 <put_fat+0x54>
    187e:	80 c0       	rjmp	.+256    	; 0x1980 <put_fat+0x154>
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	09 f0       	breq	.+2      	; 0x1886 <put_fat+0x5a>
    1884:	bf c0       	rjmp	.+382    	; 0x1a04 <put_fat+0x1d8>
    1886:	8a 01       	movw	r16, r20
    1888:	16 95       	lsr	r17
    188a:	07 95       	ror	r16
    188c:	04 0f       	add	r16, r20
    188e:	15 1f       	adc	r17, r21
    1890:	c8 01       	movw	r24, r16
    1892:	89 2f       	mov	r24, r25
    1894:	99 27       	eor	r25, r25
    1896:	86 95       	lsr	r24
    1898:	42 a1       	ldd	r20, Z+34	; 0x22
    189a:	53 a1       	ldd	r21, Z+35	; 0x23
    189c:	64 a1       	ldd	r22, Z+36	; 0x24
    189e:	75 a1       	ldd	r23, Z+37	; 0x25
    18a0:	48 0f       	add	r20, r24
    18a2:	59 1f       	adc	r21, r25
    18a4:	61 1d       	adc	r22, r1
    18a6:	71 1d       	adc	r23, r1
    18a8:	cf 01       	movw	r24, r30
    18aa:	65 d8       	rcall	.-3894   	; 0x976 <move_window>
    18ac:	78 2e       	mov	r7, r24
    18ae:	81 11       	cpse	r24, r1
    18b0:	b0 c0       	rjmp	.+352    	; 0x1a12 <put_fat+0x1e6>
    18b2:	c8 01       	movw	r24, r16
    18b4:	91 70       	andi	r25, 0x01	; 1
    18b6:	80 fe       	sbrs	r8, 0
    18b8:	21 c0       	rjmp	.+66     	; 0x18fc <put_fat+0xd0>
    18ba:	fe 01       	movw	r30, r28
    18bc:	e8 0f       	add	r30, r24
    18be:	f9 1f       	adc	r31, r25
    18c0:	82 a9       	ldd	r24, Z+50	; 0x32
    18c2:	28 2f       	mov	r18, r24
    18c4:	2f 70       	andi	r18, 0x0F	; 15
    18c6:	30 e1       	ldi	r19, 0x10	; 16
    18c8:	c3 9e       	mul	r12, r19
    18ca:	c0 01       	movw	r24, r0
    18cc:	11 24       	eor	r1, r1
    18ce:	82 2b       	or	r24, r18
    18d0:	82 ab       	std	Z+50, r24	; 0x32
    18d2:	0f 5f       	subi	r16, 0xFF	; 255
    18d4:	1f 4f       	sbci	r17, 0xFF	; 255
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	8c 83       	std	Y+4, r24	; 0x04
    18da:	c8 01       	movw	r24, r16
    18dc:	89 2f       	mov	r24, r25
    18de:	99 27       	eor	r25, r25
    18e0:	86 95       	lsr	r24
    18e2:	4a a1       	ldd	r20, Y+34	; 0x22
    18e4:	5b a1       	ldd	r21, Y+35	; 0x23
    18e6:	6c a1       	ldd	r22, Y+36	; 0x24
    18e8:	7d a1       	ldd	r23, Y+37	; 0x25
    18ea:	48 0f       	add	r20, r24
    18ec:	59 1f       	adc	r21, r25
    18ee:	61 1d       	adc	r22, r1
    18f0:	71 1d       	adc	r23, r1
    18f2:	ce 01       	movw	r24, r28
    18f4:	40 d8       	rcall	.-3968   	; 0x976 <move_window>
    18f6:	81 11       	cpse	r24, r1
    18f8:	89 c0       	rjmp	.+274    	; 0x1a0c <put_fat+0x1e0>
    18fa:	96 c0       	rjmp	.+300    	; 0x1a28 <put_fat+0x1fc>
    18fc:	fe 01       	movw	r30, r28
    18fe:	e8 0f       	add	r30, r24
    1900:	f9 1f       	adc	r31, r25
    1902:	c2 aa       	std	Z+50, r12	; 0x32
    1904:	0f 5f       	subi	r16, 0xFF	; 255
    1906:	1f 4f       	sbci	r17, 0xFF	; 255
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	8c 83       	std	Y+4, r24	; 0x04
    190c:	c8 01       	movw	r24, r16
    190e:	89 2f       	mov	r24, r25
    1910:	99 27       	eor	r25, r25
    1912:	86 95       	lsr	r24
    1914:	4a a1       	ldd	r20, Y+34	; 0x22
    1916:	5b a1       	ldd	r21, Y+35	; 0x23
    1918:	6c a1       	ldd	r22, Y+36	; 0x24
    191a:	7d a1       	ldd	r23, Y+37	; 0x25
    191c:	48 0f       	add	r20, r24
    191e:	59 1f       	adc	r21, r25
    1920:	61 1d       	adc	r22, r1
    1922:	71 1d       	adc	r23, r1
    1924:	ce 01       	movw	r24, r28
    1926:	27 d8       	rcall	.-4018   	; 0x976 <move_window>
    1928:	81 11       	cpse	r24, r1
    192a:	72 c0       	rjmp	.+228    	; 0x1a10 <put_fat+0x1e4>
    192c:	88 c0       	rjmp	.+272    	; 0x1a3e <put_fat+0x212>
    192e:	fe 01       	movw	r30, r28
    1930:	e8 0f       	add	r30, r24
    1932:	f9 1f       	adc	r31, r25
    1934:	c2 aa       	std	Z+50, r12	; 0x32
    1936:	6d c0       	rjmp	.+218    	; 0x1a12 <put_fat+0x1e6>
    1938:	45 2f       	mov	r20, r21
    193a:	56 2f       	mov	r21, r22
    193c:	67 2f       	mov	r22, r23
    193e:	77 27       	eor	r23, r23
    1940:	82 a1       	ldd	r24, Z+34	; 0x22
    1942:	93 a1       	ldd	r25, Z+35	; 0x23
    1944:	a4 a1       	ldd	r26, Z+36	; 0x24
    1946:	b5 a1       	ldd	r27, Z+37	; 0x25
    1948:	48 0f       	add	r20, r24
    194a:	59 1f       	adc	r21, r25
    194c:	6a 1f       	adc	r22, r26
    194e:	7b 1f       	adc	r23, r27
    1950:	cf 01       	movw	r24, r30
    1952:	11 d8       	rcall	.-4062   	; 0x976 <move_window>
    1954:	78 2e       	mov	r7, r24
    1956:	81 11       	cpse	r24, r1
    1958:	5c c0       	rjmp	.+184    	; 0x1a12 <put_fat+0x1e6>
    195a:	b5 01       	movw	r22, r10
    195c:	a4 01       	movw	r20, r8
    195e:	44 0f       	add	r20, r20
    1960:	55 1f       	adc	r21, r21
    1962:	66 1f       	adc	r22, r22
    1964:	77 1f       	adc	r23, r23
    1966:	4e 7f       	andi	r20, 0xFE	; 254
    1968:	51 70       	andi	r21, 0x01	; 1
    196a:	66 27       	eor	r22, r22
    196c:	77 27       	eor	r23, r23
    196e:	fe 01       	movw	r30, r28
    1970:	e4 0f       	add	r30, r20
    1972:	f5 1f       	adc	r31, r21
    1974:	c2 aa       	std	Z+50, r12	; 0x32
    1976:	fe 01       	movw	r30, r28
    1978:	e4 0f       	add	r30, r20
    197a:	f5 1f       	adc	r31, r21
    197c:	d3 aa       	std	Z+51, r13	; 0x33
    197e:	49 c0       	rjmp	.+146    	; 0x1a12 <put_fat+0x1e6>
    1980:	82 a1       	ldd	r24, Z+34	; 0x22
    1982:	93 a1       	ldd	r25, Z+35	; 0x23
    1984:	a4 a1       	ldd	r26, Z+36	; 0x24
    1986:	b5 a1       	ldd	r27, Z+37	; 0x25
    1988:	68 94       	set
    198a:	16 f8       	bld	r1, 6
    198c:	76 95       	lsr	r23
    198e:	67 95       	ror	r22
    1990:	57 95       	ror	r21
    1992:	47 95       	ror	r20
    1994:	16 94       	lsr	r1
    1996:	d1 f7       	brne	.-12     	; 0x198c <put_fat+0x160>
    1998:	48 0f       	add	r20, r24
    199a:	59 1f       	adc	r21, r25
    199c:	6a 1f       	adc	r22, r26
    199e:	7b 1f       	adc	r23, r27
    19a0:	cf 01       	movw	r24, r30
    19a2:	0e 94 bb 04 	call	0x976	; 0x976 <move_window>
    19a6:	78 2e       	mov	r7, r24
    19a8:	81 11       	cpse	r24, r1
    19aa:	33 c0       	rjmp	.+102    	; 0x1a12 <put_fat+0x1e6>
    19ac:	b5 01       	movw	r22, r10
    19ae:	a4 01       	movw	r20, r8
    19b0:	44 0f       	add	r20, r20
    19b2:	55 1f       	adc	r21, r21
    19b4:	66 1f       	adc	r22, r22
    19b6:	77 1f       	adc	r23, r23
    19b8:	44 0f       	add	r20, r20
    19ba:	55 1f       	adc	r21, r21
    19bc:	66 1f       	adc	r22, r22
    19be:	77 1f       	adc	r23, r23
    19c0:	4c 7f       	andi	r20, 0xFC	; 252
    19c2:	51 70       	andi	r21, 0x01	; 1
    19c4:	66 27       	eor	r22, r22
    19c6:	77 27       	eor	r23, r23
    19c8:	fa 01       	movw	r30, r20
    19ca:	f2 96       	adiw	r30, 0x32	; 50
    19cc:	ec 0f       	add	r30, r28
    19ce:	fd 1f       	adc	r31, r29
    19d0:	83 81       	ldd	r24, Z+3	; 0x03
    19d2:	02 81       	ldd	r16, Z+2	; 0x02
    19d4:	10 e0       	ldi	r17, 0x00	; 0
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	98 01       	movw	r18, r16
    19dc:	11 27       	eor	r17, r17
    19de:	00 27       	eor	r16, r16
    19e0:	38 2b       	or	r19, r24
    19e2:	de 01       	movw	r26, r28
    19e4:	a4 0f       	add	r26, r20
    19e6:	b5 1f       	adc	r27, r21
    19e8:	00 27       	eor	r16, r16
    19ea:	11 27       	eor	r17, r17
    19ec:	22 27       	eor	r18, r18
    19ee:	30 7f       	andi	r19, 0xF0	; 240
    19f0:	c0 2a       	or	r12, r16
    19f2:	d1 2a       	or	r13, r17
    19f4:	e2 2a       	or	r14, r18
    19f6:	f3 2a       	or	r15, r19
    19f8:	d2 96       	adiw	r26, 0x32	; 50
    19fa:	cc 92       	st	X, r12
    19fc:	d1 82       	std	Z+1, r13	; 0x01
    19fe:	e2 82       	std	Z+2, r14	; 0x02
    1a00:	f3 82       	std	Z+3, r15	; 0x03
    1a02:	07 c0       	rjmp	.+14     	; 0x1a12 <put_fat+0x1e6>
    1a04:	68 94       	set
    1a06:	77 24       	eor	r7, r7
    1a08:	71 f8       	bld	r7, 1
    1a0a:	03 c0       	rjmp	.+6      	; 0x1a12 <put_fat+0x1e6>
    1a0c:	78 2e       	mov	r7, r24
    1a0e:	01 c0       	rjmp	.+2      	; 0x1a12 <put_fat+0x1e6>
    1a10:	78 2e       	mov	r7, r24
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	8c 83       	std	Y+4, r24	; 0x04
    1a16:	1f c0       	rjmp	.+62     	; 0x1a56 <put_fat+0x22a>
    1a18:	68 94       	set
    1a1a:	77 24       	eor	r7, r7
    1a1c:	71 f8       	bld	r7, 1
    1a1e:	1b c0       	rjmp	.+54     	; 0x1a56 <put_fat+0x22a>
    1a20:	68 94       	set
    1a22:	77 24       	eor	r7, r7
    1a24:	71 f8       	bld	r7, 1
    1a26:	17 c0       	rjmp	.+46     	; 0x1a56 <put_fat+0x22a>
    1a28:	c8 01       	movw	r24, r16
    1a2a:	91 70       	andi	r25, 0x01	; 1
    1a2c:	68 94       	set
    1a2e:	13 f8       	bld	r1, 3
    1a30:	f6 94       	lsr	r15
    1a32:	e7 94       	ror	r14
    1a34:	d7 94       	ror	r13
    1a36:	c7 94       	ror	r12
    1a38:	16 94       	lsr	r1
    1a3a:	d1 f7       	brne	.-12     	; 0x1a30 <put_fat+0x204>
    1a3c:	78 cf       	rjmp	.-272    	; 0x192e <put_fat+0x102>
    1a3e:	c8 01       	movw	r24, r16
    1a40:	91 70       	andi	r25, 0x01	; 1
    1a42:	fe 01       	movw	r30, r28
    1a44:	e8 0f       	add	r30, r24
    1a46:	f9 1f       	adc	r31, r25
    1a48:	32 a9       	ldd	r19, Z+50	; 0x32
    1a4a:	30 7f       	andi	r19, 0xF0	; 240
    1a4c:	2d 2d       	mov	r18, r13
    1a4e:	2f 70       	andi	r18, 0x0F	; 15
    1a50:	c3 2e       	mov	r12, r19
    1a52:	c2 2a       	or	r12, r18
    1a54:	6c cf       	rjmp	.-296    	; 0x192e <put_fat+0x102>
    1a56:	87 2d       	mov	r24, r7
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	ff 90       	pop	r15
    1a62:	ef 90       	pop	r14
    1a64:	df 90       	pop	r13
    1a66:	cf 90       	pop	r12
    1a68:	bf 90       	pop	r11
    1a6a:	af 90       	pop	r10
    1a6c:	9f 90       	pop	r9
    1a6e:	8f 90       	pop	r8
    1a70:	7f 90       	pop	r7
    1a72:	08 95       	ret

00001a74 <create_chain>:
    1a74:	4f 92       	push	r4
    1a76:	5f 92       	push	r5
    1a78:	6f 92       	push	r6
    1a7a:	7f 92       	push	r7
    1a7c:	8f 92       	push	r8
    1a7e:	9f 92       	push	r9
    1a80:	af 92       	push	r10
    1a82:	bf 92       	push	r11
    1a84:	cf 92       	push	r12
    1a86:	df 92       	push	r13
    1a88:	ef 92       	push	r14
    1a8a:	ff 92       	push	r15
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	ec 01       	movw	r28, r24
    1a96:	2a 01       	movw	r4, r20
    1a98:	3b 01       	movw	r6, r22
    1a9a:	41 15       	cp	r20, r1
    1a9c:	51 05       	cpc	r21, r1
    1a9e:	61 05       	cpc	r22, r1
    1aa0:	71 05       	cpc	r23, r1
    1aa2:	b9 f4       	brne	.+46     	; 0x1ad2 <create_chain+0x5e>
    1aa4:	8a 84       	ldd	r8, Y+10	; 0x0a
    1aa6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1aa8:	ac 84       	ldd	r10, Y+12	; 0x0c
    1aaa:	bd 84       	ldd	r11, Y+13	; 0x0d
    1aac:	81 14       	cp	r8, r1
    1aae:	91 04       	cpc	r9, r1
    1ab0:	a1 04       	cpc	r10, r1
    1ab2:	b1 04       	cpc	r11, r1
    1ab4:	21 f1       	breq	.+72     	; 0x1afe <create_chain+0x8a>
    1ab6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ab8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1aba:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1abc:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1abe:	88 16       	cp	r8, r24
    1ac0:	99 06       	cpc	r9, r25
    1ac2:	aa 06       	cpc	r10, r26
    1ac4:	bb 06       	cpc	r11, r27
    1ac6:	f8 f0       	brcs	.+62     	; 0x1b06 <create_chain+0x92>
    1ac8:	81 2c       	mov	r8, r1
    1aca:	91 2c       	mov	r9, r1
    1acc:	54 01       	movw	r10, r8
    1ace:	83 94       	inc	r8
    1ad0:	1a c0       	rjmp	.+52     	; 0x1b06 <create_chain+0x92>
    1ad2:	fa dc       	rcall	.-1548   	; 0x14c8 <get_fat>
    1ad4:	6b 01       	movw	r12, r22
    1ad6:	7c 01       	movw	r14, r24
    1ad8:	62 30       	cpi	r22, 0x02	; 2
    1ada:	71 05       	cpc	r23, r1
    1adc:	81 05       	cpc	r24, r1
    1ade:	91 05       	cpc	r25, r1
    1ae0:	08 f4       	brcc	.+2      	; 0x1ae4 <create_chain+0x70>
    1ae2:	83 c0       	rjmp	.+262    	; 0x1bea <create_chain+0x176>
    1ae4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ae6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ae8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1aea:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1aec:	c8 16       	cp	r12, r24
    1aee:	d9 06       	cpc	r13, r25
    1af0:	ea 06       	cpc	r14, r26
    1af2:	fb 06       	cpc	r15, r27
    1af4:	08 f4       	brcc	.+2      	; 0x1af8 <create_chain+0x84>
    1af6:	7e c0       	rjmp	.+252    	; 0x1bf4 <create_chain+0x180>
    1af8:	53 01       	movw	r10, r6
    1afa:	42 01       	movw	r8, r4
    1afc:	04 c0       	rjmp	.+8      	; 0x1b06 <create_chain+0x92>
    1afe:	81 2c       	mov	r8, r1
    1b00:	91 2c       	mov	r9, r1
    1b02:	54 01       	movw	r10, r8
    1b04:	83 94       	inc	r8
    1b06:	75 01       	movw	r14, r10
    1b08:	64 01       	movw	r12, r8
    1b0a:	8f ef       	ldi	r24, 0xFF	; 255
    1b0c:	c8 1a       	sub	r12, r24
    1b0e:	d8 0a       	sbc	r13, r24
    1b10:	e8 0a       	sbc	r14, r24
    1b12:	f8 0a       	sbc	r15, r24
    1b14:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b16:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b18:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1b1a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1b1c:	c8 16       	cp	r12, r24
    1b1e:	d9 06       	cpc	r13, r25
    1b20:	ea 06       	cpc	r14, r26
    1b22:	fb 06       	cpc	r15, r27
    1b24:	60 f0       	brcs	.+24     	; 0x1b3e <create_chain+0xca>
    1b26:	22 e0       	ldi	r18, 0x02	; 2
    1b28:	82 16       	cp	r8, r18
    1b2a:	91 04       	cpc	r9, r1
    1b2c:	a1 04       	cpc	r10, r1
    1b2e:	b1 04       	cpc	r11, r1
    1b30:	08 f4       	brcc	.+2      	; 0x1b34 <create_chain+0xc0>
    1b32:	65 c0       	rjmp	.+202    	; 0x1bfe <create_chain+0x18a>
    1b34:	c1 2c       	mov	r12, r1
    1b36:	d1 2c       	mov	r13, r1
    1b38:	76 01       	movw	r14, r12
    1b3a:	68 94       	set
    1b3c:	c1 f8       	bld	r12, 1
    1b3e:	b7 01       	movw	r22, r14
    1b40:	a6 01       	movw	r20, r12
    1b42:	ce 01       	movw	r24, r28
    1b44:	c1 dc       	rcall	.-1662   	; 0x14c8 <get_fat>
    1b46:	61 15       	cp	r22, r1
    1b48:	71 05       	cpc	r23, r1
    1b4a:	81 05       	cpc	r24, r1
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	99 f0       	breq	.+38     	; 0x1b76 <create_chain+0x102>
    1b50:	6f 3f       	cpi	r22, 0xFF	; 255
    1b52:	2f ef       	ldi	r18, 0xFF	; 255
    1b54:	72 07       	cpc	r23, r18
    1b56:	82 07       	cpc	r24, r18
    1b58:	92 07       	cpc	r25, r18
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <create_chain+0xea>
    1b5c:	55 c0       	rjmp	.+170    	; 0x1c08 <create_chain+0x194>
    1b5e:	61 30       	cpi	r22, 0x01	; 1
    1b60:	71 05       	cpc	r23, r1
    1b62:	81 05       	cpc	r24, r1
    1b64:	91 05       	cpc	r25, r1
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <create_chain+0xf6>
    1b68:	54 c0       	rjmp	.+168    	; 0x1c12 <create_chain+0x19e>
    1b6a:	c8 14       	cp	r12, r8
    1b6c:	d9 04       	cpc	r13, r9
    1b6e:	ea 04       	cpc	r14, r10
    1b70:	fb 04       	cpc	r15, r11
    1b72:	59 f6       	brne	.-106    	; 0x1b0a <create_chain+0x96>
    1b74:	53 c0       	rjmp	.+166    	; 0x1c1c <create_chain+0x1a8>
    1b76:	0f ef       	ldi	r16, 0xFF	; 255
    1b78:	1f ef       	ldi	r17, 0xFF	; 255
    1b7a:	2f ef       	ldi	r18, 0xFF	; 255
    1b7c:	3f e0       	ldi	r19, 0x0F	; 15
    1b7e:	b7 01       	movw	r22, r14
    1b80:	a6 01       	movw	r20, r12
    1b82:	ce 01       	movw	r24, r28
    1b84:	53 de       	rcall	.-858    	; 0x182c <put_fat>
    1b86:	81 11       	cpse	r24, r1
    1b88:	29 c0       	rjmp	.+82     	; 0x1bdc <create_chain+0x168>
    1b8a:	41 14       	cp	r4, r1
    1b8c:	51 04       	cpc	r5, r1
    1b8e:	61 04       	cpc	r6, r1
    1b90:	71 04       	cpc	r7, r1
    1b92:	41 f0       	breq	.+16     	; 0x1ba4 <create_chain+0x130>
    1b94:	97 01       	movw	r18, r14
    1b96:	86 01       	movw	r16, r12
    1b98:	b3 01       	movw	r22, r6
    1b9a:	a2 01       	movw	r20, r4
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	46 de       	rcall	.-884    	; 0x182c <put_fat>
    1ba0:	81 11       	cpse	r24, r1
    1ba2:	1c c0       	rjmp	.+56     	; 0x1bdc <create_chain+0x168>
    1ba4:	ca 86       	std	Y+10, r12	; 0x0a
    1ba6:	db 86       	std	Y+11, r13	; 0x0b
    1ba8:	ec 86       	std	Y+12, r14	; 0x0c
    1baa:	fd 86       	std	Y+13, r15	; 0x0d
    1bac:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bae:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bb0:	a8 89       	ldd	r26, Y+16	; 0x10
    1bb2:	b9 89       	ldd	r27, Y+17	; 0x11
    1bb4:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb6:	2f ef       	ldi	r18, 0xFF	; 255
    1bb8:	92 07       	cpc	r25, r18
    1bba:	a2 07       	cpc	r26, r18
    1bbc:	b2 07       	cpc	r27, r18
    1bbe:	99 f1       	breq	.+102    	; 0x1c26 <create_chain+0x1b2>
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	a1 09       	sbc	r26, r1
    1bc4:	b1 09       	sbc	r27, r1
    1bc6:	8e 87       	std	Y+14, r24	; 0x0e
    1bc8:	9f 87       	std	Y+15, r25	; 0x0f
    1bca:	a8 8b       	std	Y+16, r26	; 0x10
    1bcc:	b9 8b       	std	Y+17, r27	; 0x11
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
    1bd2:	6c 2d       	mov	r22, r12
    1bd4:	7d 2d       	mov	r23, r13
    1bd6:	8e 2d       	mov	r24, r14
    1bd8:	9f 2d       	mov	r25, r15
    1bda:	2e c0       	rjmp	.+92     	; 0x1c38 <create_chain+0x1c4>
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	41 f1       	breq	.+80     	; 0x1c30 <create_chain+0x1bc>
    1be0:	61 e0       	ldi	r22, 0x01	; 1
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	27 c0       	rjmp	.+78     	; 0x1c38 <create_chain+0x1c4>
    1bea:	61 e0       	ldi	r22, 0x01	; 1
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	22 c0       	rjmp	.+68     	; 0x1c38 <create_chain+0x1c4>
    1bf4:	6c 2d       	mov	r22, r12
    1bf6:	7d 2d       	mov	r23, r13
    1bf8:	8e 2d       	mov	r24, r14
    1bfa:	9f 2d       	mov	r25, r15
    1bfc:	1d c0       	rjmp	.+58     	; 0x1c38 <create_chain+0x1c4>
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	18 c0       	rjmp	.+48     	; 0x1c38 <create_chain+0x1c4>
    1c08:	6f ef       	ldi	r22, 0xFF	; 255
    1c0a:	7f ef       	ldi	r23, 0xFF	; 255
    1c0c:	8f ef       	ldi	r24, 0xFF	; 255
    1c0e:	9f ef       	ldi	r25, 0xFF	; 255
    1c10:	13 c0       	rjmp	.+38     	; 0x1c38 <create_chain+0x1c4>
    1c12:	61 e0       	ldi	r22, 0x01	; 1
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	0e c0       	rjmp	.+28     	; 0x1c38 <create_chain+0x1c4>
    1c1c:	60 e0       	ldi	r22, 0x00	; 0
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	09 c0       	rjmp	.+18     	; 0x1c38 <create_chain+0x1c4>
    1c26:	6c 2d       	mov	r22, r12
    1c28:	7d 2d       	mov	r23, r13
    1c2a:	8e 2d       	mov	r24, r14
    1c2c:	9f 2d       	mov	r25, r15
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <create_chain+0x1c4>
    1c30:	6f ef       	ldi	r22, 0xFF	; 255
    1c32:	7f ef       	ldi	r23, 0xFF	; 255
    1c34:	8f ef       	ldi	r24, 0xFF	; 255
    1c36:	9f ef       	ldi	r25, 0xFF	; 255
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	1f 91       	pop	r17
    1c3e:	0f 91       	pop	r16
    1c40:	ff 90       	pop	r15
    1c42:	ef 90       	pop	r14
    1c44:	df 90       	pop	r13
    1c46:	cf 90       	pop	r12
    1c48:	bf 90       	pop	r11
    1c4a:	af 90       	pop	r10
    1c4c:	9f 90       	pop	r9
    1c4e:	8f 90       	pop	r8
    1c50:	7f 90       	pop	r7
    1c52:	6f 90       	pop	r6
    1c54:	5f 90       	pop	r5
    1c56:	4f 90       	pop	r4
    1c58:	08 95       	ret

00001c5a <dir_next>:
    1c5a:	8f 92       	push	r8
    1c5c:	9f 92       	push	r9
    1c5e:	af 92       	push	r10
    1c60:	bf 92       	push	r11
    1c62:	cf 92       	push	r12
    1c64:	df 92       	push	r13
    1c66:	ef 92       	push	r14
    1c68:	ff 92       	push	r15
    1c6a:	0f 93       	push	r16
    1c6c:	1f 93       	push	r17
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29
    1c72:	dc 01       	movw	r26, r24
    1c74:	14 96       	adiw	r26, 0x04	; 4
    1c76:	cd 91       	ld	r28, X+
    1c78:	dc 91       	ld	r29, X
    1c7a:	15 97       	sbiw	r26, 0x05	; 5
    1c7c:	21 96       	adiw	r28, 0x01	; 1
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <dir_next+0x28>
    1c80:	fe c0       	rjmp	.+508    	; 0x1e7e <dir_next+0x224>
    1c82:	1e 96       	adiw	r26, 0x0e	; 14
    1c84:	8d 90       	ld	r8, X+
    1c86:	9d 90       	ld	r9, X+
    1c88:	ad 90       	ld	r10, X+
    1c8a:	bc 90       	ld	r11, X
    1c8c:	51 97       	sbiw	r26, 0x11	; 17
    1c8e:	81 14       	cp	r8, r1
    1c90:	91 04       	cpc	r9, r1
    1c92:	a1 04       	cpc	r10, r1
    1c94:	b1 04       	cpc	r11, r1
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <dir_next+0x40>
    1c98:	f4 c0       	rjmp	.+488    	; 0x1e82 <dir_next+0x228>
    1c9a:	7b 01       	movw	r14, r22
    1c9c:	8c 01       	movw	r16, r24
    1c9e:	6e 01       	movw	r12, r28
    1ca0:	bf e0       	ldi	r27, 0x0F	; 15
    1ca2:	cb 22       	and	r12, r27
    1ca4:	dd 24       	eor	r13, r13
    1ca6:	c1 14       	cp	r12, r1
    1ca8:	d1 04       	cpc	r13, r1
    1caa:	09 f0       	breq	.+2      	; 0x1cae <dir_next+0x54>
    1cac:	d2 c0       	rjmp	.+420    	; 0x1e52 <dir_next+0x1f8>
    1cae:	ef ef       	ldi	r30, 0xFF	; 255
    1cb0:	8e 1a       	sub	r8, r30
    1cb2:	9e 0a       	sbc	r9, r30
    1cb4:	ae 0a       	sbc	r10, r30
    1cb6:	be 0a       	sbc	r11, r30
    1cb8:	dc 01       	movw	r26, r24
    1cba:	1e 96       	adiw	r26, 0x0e	; 14
    1cbc:	8d 92       	st	X+, r8
    1cbe:	9d 92       	st	X+, r9
    1cc0:	ad 92       	st	X+, r10
    1cc2:	bc 92       	st	X, r11
    1cc4:	51 97       	sbiw	r26, 0x11	; 17
    1cc6:	1a 96       	adiw	r26, 0x0a	; 10
    1cc8:	4d 91       	ld	r20, X+
    1cca:	5d 91       	ld	r21, X+
    1ccc:	6d 91       	ld	r22, X+
    1cce:	7c 91       	ld	r23, X
    1cd0:	1d 97       	sbiw	r26, 0x0d	; 13
    1cd2:	41 15       	cp	r20, r1
    1cd4:	51 05       	cpc	r21, r1
    1cd6:	61 05       	cpc	r22, r1
    1cd8:	71 05       	cpc	r23, r1
    1cda:	49 f4       	brne	.+18     	; 0x1cee <dir_next+0x94>
    1cdc:	ed 91       	ld	r30, X+
    1cde:	fc 91       	ld	r31, X
    1ce0:	80 85       	ldd	r24, Z+8	; 0x08
    1ce2:	91 85       	ldd	r25, Z+9	; 0x09
    1ce4:	c8 17       	cp	r28, r24
    1ce6:	d9 07       	cpc	r29, r25
    1ce8:	08 f0       	brcs	.+2      	; 0x1cec <dir_next+0x92>
    1cea:	cd c0       	rjmp	.+410    	; 0x1e86 <dir_next+0x22c>
    1cec:	b2 c0       	rjmp	.+356    	; 0x1e52 <dir_next+0x1f8>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	ed 91       	ld	r30, X+
    1cf2:	fc 91       	ld	r31, X
    1cf4:	22 81       	ldd	r18, Z+2	; 0x02
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	21 50       	subi	r18, 0x01	; 1
    1cfa:	31 09       	sbc	r19, r1
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	92 95       	swap	r25
    1d00:	82 95       	swap	r24
    1d02:	8f 70       	andi	r24, 0x0F	; 15
    1d04:	89 27       	eor	r24, r25
    1d06:	9f 70       	andi	r25, 0x0F	; 15
    1d08:	89 27       	eor	r24, r25
    1d0a:	28 23       	and	r18, r24
    1d0c:	39 23       	and	r19, r25
    1d0e:	23 2b       	or	r18, r19
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <dir_next+0xba>
    1d12:	9f c0       	rjmp	.+318    	; 0x1e52 <dir_next+0x1f8>
    1d14:	cf 01       	movw	r24, r30
    1d16:	d8 db       	rcall	.-2128   	; 0x14c8 <get_fat>
    1d18:	4b 01       	movw	r8, r22
    1d1a:	5c 01       	movw	r10, r24
    1d1c:	62 30       	cpi	r22, 0x02	; 2
    1d1e:	71 05       	cpc	r23, r1
    1d20:	81 05       	cpc	r24, r1
    1d22:	91 05       	cpc	r25, r1
    1d24:	08 f4       	brcc	.+2      	; 0x1d28 <dir_next+0xce>
    1d26:	b1 c0       	rjmp	.+354    	; 0x1e8a <dir_next+0x230>
    1d28:	6f 3f       	cpi	r22, 0xFF	; 255
    1d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <dir_next+0xda>
    1d32:	ad c0       	rjmp	.+346    	; 0x1e8e <dir_next+0x234>
    1d34:	d8 01       	movw	r26, r16
    1d36:	ed 91       	ld	r30, X+
    1d38:	fc 91       	ld	r31, X
    1d3a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d3c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d3e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1d40:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1d42:	88 16       	cp	r8, r24
    1d44:	99 06       	cpc	r9, r25
    1d46:	aa 06       	cpc	r10, r26
    1d48:	bb 06       	cpc	r11, r27
    1d4a:	08 f4       	brcc	.+2      	; 0x1d4e <dir_next+0xf4>
    1d4c:	71 c0       	rjmp	.+226    	; 0x1e30 <dir_next+0x1d6>
    1d4e:	ef 28       	or	r14, r15
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <dir_next+0xfa>
    1d52:	9f c0       	rjmp	.+318    	; 0x1e92 <dir_next+0x238>
    1d54:	d8 01       	movw	r26, r16
    1d56:	1a 96       	adiw	r26, 0x0a	; 10
    1d58:	4d 91       	ld	r20, X+
    1d5a:	5d 91       	ld	r21, X+
    1d5c:	6d 91       	ld	r22, X+
    1d5e:	7c 91       	ld	r23, X
    1d60:	1d 97       	sbiw	r26, 0x0d	; 13
    1d62:	cf 01       	movw	r24, r30
    1d64:	87 de       	rcall	.-754    	; 0x1a74 <create_chain>
    1d66:	4b 01       	movw	r8, r22
    1d68:	5c 01       	movw	r10, r24
    1d6a:	61 15       	cp	r22, r1
    1d6c:	71 05       	cpc	r23, r1
    1d6e:	81 05       	cpc	r24, r1
    1d70:	91 05       	cpc	r25, r1
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <dir_next+0x11c>
    1d74:	90 c0       	rjmp	.+288    	; 0x1e96 <dir_next+0x23c>
    1d76:	61 30       	cpi	r22, 0x01	; 1
    1d78:	71 05       	cpc	r23, r1
    1d7a:	81 05       	cpc	r24, r1
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <dir_next+0x128>
    1d80:	8c c0       	rjmp	.+280    	; 0x1e9a <dir_next+0x240>
    1d82:	6f 3f       	cpi	r22, 0xFF	; 255
    1d84:	7f 4f       	sbci	r23, 0xFF	; 255
    1d86:	8f 4f       	sbci	r24, 0xFF	; 255
    1d88:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <dir_next+0x134>
    1d8c:	88 c0       	rjmp	.+272    	; 0x1e9e <dir_next+0x244>
    1d8e:	40 e0       	ldi	r20, 0x00	; 0
    1d90:	50 e0       	ldi	r21, 0x00	; 0
    1d92:	ba 01       	movw	r22, r20
    1d94:	d8 01       	movw	r26, r16
    1d96:	8d 91       	ld	r24, X+
    1d98:	9c 91       	ld	r25, X
    1d9a:	0e 94 bb 04 	call	0x976	; 0x976 <move_window>
    1d9e:	81 11       	cpse	r24, r1
    1da0:	80 c0       	rjmp	.+256    	; 0x1ea2 <dir_next+0x248>
    1da2:	f8 01       	movw	r30, r16
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	fc 01       	movw	r30, r24
    1daa:	f2 96       	adiw	r30, 0x32	; 50
    1dac:	8e 5c       	subi	r24, 0xCE	; 206
    1dae:	9d 4f       	sbci	r25, 0xFD	; 253
    1db0:	11 92       	st	Z+, r1
    1db2:	e8 17       	cp	r30, r24
    1db4:	f9 07       	cpc	r31, r25
    1db6:	e1 f7       	brne	.-8      	; 0x1db0 <dir_next+0x156>
    1db8:	d8 01       	movw	r26, r16
    1dba:	ed 90       	ld	r14, X+
    1dbc:	fc 90       	ld	r15, X
    1dbe:	b5 01       	movw	r22, r10
    1dc0:	a4 01       	movw	r20, r8
    1dc2:	c7 01       	movw	r24, r14
    1dc4:	59 db       	rcall	.-2382   	; 0x1478 <clust2sect>
    1dc6:	f7 01       	movw	r30, r14
    1dc8:	66 a7       	std	Z+46, r22	; 0x2e
    1dca:	77 a7       	std	Z+47, r23	; 0x2f
    1dcc:	80 ab       	std	Z+48, r24	; 0x30
    1dce:	91 ab       	std	Z+49, r25	; 0x31
    1dd0:	f1 2c       	mov	r15, r1
    1dd2:	ee 24       	eor	r14, r14
    1dd4:	e3 94       	inc	r14
    1dd6:	1a c0       	rjmp	.+52     	; 0x1e0c <dir_next+0x1b2>
    1dd8:	e4 82       	std	Z+4, r14	; 0x04
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	ba 01       	movw	r22, r20
    1de0:	d8 01       	movw	r26, r16
    1de2:	8d 91       	ld	r24, X+
    1de4:	9c 91       	ld	r25, X
    1de6:	0e 94 bb 04 	call	0x976	; 0x976 <move_window>
    1dea:	81 11       	cpse	r24, r1
    1dec:	5c c0       	rjmp	.+184    	; 0x1ea6 <dir_next+0x24c>
    1dee:	d8 01       	movw	r26, r16
    1df0:	ed 91       	ld	r30, X+
    1df2:	fc 91       	ld	r31, X
    1df4:	86 a5       	ldd	r24, Z+46	; 0x2e
    1df6:	97 a5       	ldd	r25, Z+47	; 0x2f
    1df8:	a0 a9       	ldd	r26, Z+48	; 0x30
    1dfa:	b1 a9       	ldd	r27, Z+49	; 0x31
    1dfc:	01 96       	adiw	r24, 0x01	; 1
    1dfe:	a1 1d       	adc	r26, r1
    1e00:	b1 1d       	adc	r27, r1
    1e02:	86 a7       	std	Z+46, r24	; 0x2e
    1e04:	97 a7       	std	Z+47, r25	; 0x2f
    1e06:	a0 ab       	std	Z+48, r26	; 0x30
    1e08:	b1 ab       	std	Z+49, r27	; 0x31
    1e0a:	f3 94       	inc	r15
    1e0c:	d8 01       	movw	r26, r16
    1e0e:	ed 91       	ld	r30, X+
    1e10:	fc 91       	ld	r31, X
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	f8 16       	cp	r15, r24
    1e16:	00 f3       	brcs	.-64     	; 0x1dd8 <dir_next+0x17e>
    1e18:	86 a5       	ldd	r24, Z+46	; 0x2e
    1e1a:	97 a5       	ldd	r25, Z+47	; 0x2f
    1e1c:	a0 a9       	ldd	r26, Z+48	; 0x30
    1e1e:	b1 a9       	ldd	r27, Z+49	; 0x31
    1e20:	8f 19       	sub	r24, r15
    1e22:	91 09       	sbc	r25, r1
    1e24:	a1 09       	sbc	r26, r1
    1e26:	b1 09       	sbc	r27, r1
    1e28:	86 a7       	std	Z+46, r24	; 0x2e
    1e2a:	97 a7       	std	Z+47, r25	; 0x2f
    1e2c:	a0 ab       	std	Z+48, r26	; 0x30
    1e2e:	b1 ab       	std	Z+49, r27	; 0x31
    1e30:	f8 01       	movw	r30, r16
    1e32:	82 86       	std	Z+10, r8	; 0x0a
    1e34:	93 86       	std	Z+11, r9	; 0x0b
    1e36:	a4 86       	std	Z+12, r10	; 0x0c
    1e38:	b5 86       	std	Z+13, r11	; 0x0d
    1e3a:	b5 01       	movw	r22, r10
    1e3c:	a4 01       	movw	r20, r8
    1e3e:	80 81       	ld	r24, Z
    1e40:	91 81       	ldd	r25, Z+1	; 0x01
    1e42:	1a db       	rcall	.-2508   	; 0x1478 <clust2sect>
    1e44:	d8 01       	movw	r26, r16
    1e46:	1e 96       	adiw	r26, 0x0e	; 14
    1e48:	6d 93       	st	X+, r22
    1e4a:	7d 93       	st	X+, r23
    1e4c:	8d 93       	st	X+, r24
    1e4e:	9c 93       	st	X, r25
    1e50:	51 97       	sbiw	r26, 0x11	; 17
    1e52:	f8 01       	movw	r30, r16
    1e54:	d5 83       	std	Z+5, r29	; 0x05
    1e56:	c4 83       	std	Z+4, r28	; 0x04
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	c2 96       	adiw	r24, 0x32	; 50
    1e5e:	cc 0c       	add	r12, r12
    1e60:	dd 1c       	adc	r13, r13
    1e62:	cc 0c       	add	r12, r12
    1e64:	dd 1c       	adc	r13, r13
    1e66:	cc 0c       	add	r12, r12
    1e68:	dd 1c       	adc	r13, r13
    1e6a:	cc 0c       	add	r12, r12
    1e6c:	dd 1c       	adc	r13, r13
    1e6e:	cc 0c       	add	r12, r12
    1e70:	dd 1c       	adc	r13, r13
    1e72:	c8 0e       	add	r12, r24
    1e74:	d9 1e       	adc	r13, r25
    1e76:	d3 8a       	std	Z+19, r13	; 0x13
    1e78:	c2 8a       	std	Z+18, r12	; 0x12
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	15 c0       	rjmp	.+42     	; 0x1ea8 <dir_next+0x24e>
    1e7e:	84 e0       	ldi	r24, 0x04	; 4
    1e80:	13 c0       	rjmp	.+38     	; 0x1ea8 <dir_next+0x24e>
    1e82:	84 e0       	ldi	r24, 0x04	; 4
    1e84:	11 c0       	rjmp	.+34     	; 0x1ea8 <dir_next+0x24e>
    1e86:	84 e0       	ldi	r24, 0x04	; 4
    1e88:	0f c0       	rjmp	.+30     	; 0x1ea8 <dir_next+0x24e>
    1e8a:	82 e0       	ldi	r24, 0x02	; 2
    1e8c:	0d c0       	rjmp	.+26     	; 0x1ea8 <dir_next+0x24e>
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	0b c0       	rjmp	.+22     	; 0x1ea8 <dir_next+0x24e>
    1e92:	84 e0       	ldi	r24, 0x04	; 4
    1e94:	09 c0       	rjmp	.+18     	; 0x1ea8 <dir_next+0x24e>
    1e96:	87 e0       	ldi	r24, 0x07	; 7
    1e98:	07 c0       	rjmp	.+14     	; 0x1ea8 <dir_next+0x24e>
    1e9a:	82 e0       	ldi	r24, 0x02	; 2
    1e9c:	05 c0       	rjmp	.+10     	; 0x1ea8 <dir_next+0x24e>
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	03 c0       	rjmp	.+6      	; 0x1ea8 <dir_next+0x24e>
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	01 c0       	rjmp	.+2      	; 0x1ea8 <dir_next+0x24e>
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	1f 91       	pop	r17
    1eae:	0f 91       	pop	r16
    1eb0:	ff 90       	pop	r15
    1eb2:	ef 90       	pop	r14
    1eb4:	df 90       	pop	r13
    1eb6:	cf 90       	pop	r12
    1eb8:	bf 90       	pop	r11
    1eba:	af 90       	pop	r10
    1ebc:	9f 90       	pop	r9
    1ebe:	8f 90       	pop	r8
    1ec0:	08 95       	ret

00001ec2 <follow_path>:
    1ec2:	2f 92       	push	r2
    1ec4:	3f 92       	push	r3
    1ec6:	4f 92       	push	r4
    1ec8:	5f 92       	push	r5
    1eca:	6f 92       	push	r6
    1ecc:	7f 92       	push	r7
    1ece:	8f 92       	push	r8
    1ed0:	9f 92       	push	r9
    1ed2:	af 92       	push	r10
    1ed4:	bf 92       	push	r11
    1ed6:	cf 92       	push	r12
    1ed8:	df 92       	push	r13
    1eda:	ef 92       	push	r14
    1edc:	ff 92       	push	r15
    1ede:	0f 93       	push	r16
    1ee0:	1f 93       	push	r17
    1ee2:	cf 93       	push	r28
    1ee4:	df 93       	push	r29
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <follow_path+0x26>
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <follow_path+0x28>
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <follow_path+0x2a>
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	8c 01       	movw	r16, r24
    1ef2:	1b 01       	movw	r2, r22
    1ef4:	db 01       	movw	r26, r22
    1ef6:	8c 91       	ld	r24, X
    1ef8:	8f 32       	cpi	r24, 0x2F	; 47
    1efa:	11 f0       	breq	.+4      	; 0x1f00 <follow_path+0x3e>
    1efc:	8c 35       	cpi	r24, 0x5C	; 92
    1efe:	49 f4       	brne	.+18     	; 0x1f12 <follow_path+0x50>
    1f00:	bf ef       	ldi	r27, 0xFF	; 255
    1f02:	2b 1a       	sub	r2, r27
    1f04:	3b 0a       	sbc	r3, r27
    1f06:	f8 01       	movw	r30, r16
    1f08:	16 82       	std	Z+6, r1	; 0x06
    1f0a:	17 82       	std	Z+7, r1	; 0x07
    1f0c:	10 86       	std	Z+8, r1	; 0x08
    1f0e:	11 86       	std	Z+9, r1	; 0x09
    1f10:	0c c0       	rjmp	.+24     	; 0x1f2a <follow_path+0x68>
    1f12:	d8 01       	movw	r26, r16
    1f14:	ed 91       	ld	r30, X+
    1f16:	fc 91       	ld	r31, X
    1f18:	86 89       	ldd	r24, Z+22	; 0x16
    1f1a:	97 89       	ldd	r25, Z+23	; 0x17
    1f1c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f1e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f20:	f8 01       	movw	r30, r16
    1f22:	86 83       	std	Z+6, r24	; 0x06
    1f24:	97 83       	std	Z+7, r25	; 0x07
    1f26:	a0 87       	std	Z+8, r26	; 0x08
    1f28:	b1 87       	std	Z+9, r27	; 0x09
    1f2a:	d1 01       	movw	r26, r2
    1f2c:	8c 91       	ld	r24, X
    1f2e:	80 32       	cpi	r24, 0x20	; 32
    1f30:	40 f4       	brcc	.+16     	; 0x1f42 <follow_path+0x80>
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	70 e0       	ldi	r23, 0x00	; 0
    1f36:	c8 01       	movw	r24, r16
    1f38:	c3 db       	rcall	.-2170   	; 0x16c0 <dir_sdi>
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	13 8a       	std	Z+19, r1	; 0x13
    1f3e:	12 8a       	std	Z+18, r1	; 0x12
    1f40:	95 c1       	rjmp	.+810    	; 0x226c <follow_path+0x3aa>
    1f42:	68 94       	set
    1f44:	ff 24       	eor	r15, r15
    1f46:	f5 f8       	bld	r15, 5
    1f48:	68 94       	set
    1f4a:	bb 24       	eor	r11, r11
    1f4c:	b3 f8       	bld	r11, 3
    1f4e:	81 2c       	mov	r8, r1
    1f50:	0f 2e       	mov	r0, r31
    1f52:	f5 e0       	ldi	r31, 0x05	; 5
    1f54:	4f 2e       	mov	r4, r31
    1f56:	f0 2d       	mov	r31, r0
    1f58:	71 2c       	mov	r7, r1
    1f5a:	0f 2e       	mov	r0, r31
    1f5c:	fe e2       	ldi	r31, 0x2E	; 46
    1f5e:	ef 2e       	mov	r14, r31
    1f60:	f0 2d       	mov	r31, r0
    1f62:	61 2c       	mov	r6, r1
    1f64:	0f 2e       	mov	r0, r31
    1f66:	f3 e0       	ldi	r31, 0x03	; 3
    1f68:	af 2e       	mov	r10, r31
    1f6a:	f0 2d       	mov	r31, r0
    1f6c:	51 2c       	mov	r5, r1
    1f6e:	d1 01       	movw	r26, r2
    1f70:	fd 01       	movw	r30, r26
    1f72:	8d 91       	ld	r24, X+
    1f74:	8f 32       	cpi	r24, 0x2F	; 47
    1f76:	e1 f3       	breq	.-8      	; 0x1f70 <follow_path+0xae>
    1f78:	8c 35       	cpi	r24, 0x5C	; 92
    1f7a:	d1 f3       	breq	.-12     	; 0x1f70 <follow_path+0xae>
    1f7c:	af 01       	movw	r20, r30
    1f7e:	f8 01       	movw	r30, r16
    1f80:	a4 89       	ldd	r26, Z+20	; 0x14
    1f82:	b5 89       	ldd	r27, Z+21	; 0x15
    1f84:	cd 01       	movw	r24, r26
    1f86:	0b 96       	adiw	r24, 0x0b	; 11
    1f88:	6a 01       	movw	r12, r20
    1f8a:	ad 01       	movw	r20, r26
    1f8c:	fa 01       	movw	r30, r20
    1f8e:	f1 92       	st	Z+, r15
    1f90:	af 01       	movw	r20, r30
    1f92:	8e 17       	cp	r24, r30
    1f94:	9f 07       	cpc	r25, r31
    1f96:	d1 f7       	brne	.-12     	; 0x1f8c <follow_path+0xca>
    1f98:	a6 01       	movw	r20, r12
    1f9a:	f6 01       	movw	r30, r12
    1f9c:	80 81       	ld	r24, Z
    1f9e:	8e 32       	cpi	r24, 0x2E	; 46
    1fa0:	f9 f4       	brne	.+62     	; 0x1fe0 <follow_path+0x11e>
    1fa2:	ec 92       	st	X, r14
    1fa4:	81 81       	ldd	r24, Z+1	; 0x01
    1fa6:	8e 32       	cpi	r24, 0x2E	; 46
    1fa8:	51 f4       	brne	.+20     	; 0x1fbe <follow_path+0xfc>
    1faa:	11 96       	adiw	r26, 0x01	; 1
    1fac:	ec 92       	st	X, r14
    1fae:	11 97       	sbiw	r26, 0x01	; 1
    1fb0:	82 81       	ldd	r24, Z+2	; 0x02
    1fb2:	8e 32       	cpi	r24, 0x2E	; 46
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <follow_path+0xf6>
    1fb6:	b5 c0       	rjmp	.+362    	; 0x2122 <follow_path+0x260>
    1fb8:	2a 2c       	mov	r2, r10
    1fba:	35 2c       	mov	r3, r5
    1fbc:	04 c0       	rjmp	.+8      	; 0x1fc6 <follow_path+0x104>
    1fbe:	68 94       	set
    1fc0:	22 24       	eor	r2, r2
    1fc2:	21 f8       	bld	r2, 1
    1fc4:	36 2c       	mov	r3, r6
    1fc6:	8f 32       	cpi	r24, 0x2F	; 47
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <follow_path+0x10a>
    1fca:	08 c1       	rjmp	.+528    	; 0x21dc <follow_path+0x31a>
    1fcc:	8c 35       	cpi	r24, 0x5C	; 92
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <follow_path+0x110>
    1fd0:	05 c1       	rjmp	.+522    	; 0x21dc <follow_path+0x31a>
    1fd2:	81 32       	cpi	r24, 0x21	; 33
    1fd4:	08 f4       	brcc	.+2      	; 0x1fd8 <follow_path+0x116>
    1fd6:	fe c0       	rjmp	.+508    	; 0x21d4 <follow_path+0x312>
    1fd8:	22 c1       	rjmp	.+580    	; 0x221e <follow_path+0x35c>
    1fda:	1b 96       	adiw	r26, 0x0b	; 11
    1fdc:	8c 93       	st	X, r24
    1fde:	21 c1       	rjmp	.+578    	; 0x2222 <follow_path+0x360>
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	6b 2d       	mov	r22, r11
    1fea:	78 2d       	mov	r23, r8
    1fec:	91 2c       	mov	r9, r1
    1fee:	de 82       	std	Y+6, r13	; 0x06
    1ff0:	cd 82       	std	Y+5, r12	; 0x05
    1ff2:	6d 01       	movw	r12, r26
    1ff4:	1a 83       	std	Y+2, r17	; 0x02
    1ff6:	09 83       	std	Y+1, r16	; 0x01
    1ff8:	19 2d       	mov	r17, r9
    1ffa:	19 01       	movw	r2, r18
    1ffc:	ff ef       	ldi	r31, 0xFF	; 255
    1ffe:	2f 1a       	sub	r2, r31
    2000:	3f 0a       	sbc	r3, r31
    2002:	ad 81       	ldd	r26, Y+5	; 0x05
    2004:	be 81       	ldd	r27, Y+6	; 0x06
    2006:	a2 0f       	add	r26, r18
    2008:	b3 1f       	adc	r27, r19
    200a:	bc 91       	ld	r27, X
    200c:	b1 32       	cpi	r27, 0x21	; 33
    200e:	08 f4       	brcc	.+2      	; 0x2012 <follow_path+0x150>
    2010:	f2 c0       	rjmp	.+484    	; 0x21f6 <follow_path+0x334>
    2012:	bf 32       	cpi	r27, 0x2F	; 47
    2014:	09 f4       	brne	.+2      	; 0x2018 <follow_path+0x156>
    2016:	f9 c0       	rjmp	.+498    	; 0x220a <follow_path+0x348>
    2018:	bc 35       	cpi	r27, 0x5C	; 92
    201a:	09 f4       	brne	.+2      	; 0x201e <follow_path+0x15c>
    201c:	f6 c0       	rjmp	.+492    	; 0x220a <follow_path+0x348>
    201e:	be 32       	cpi	r27, 0x2E	; 46
    2020:	09 f4       	brne	.+2      	; 0x2024 <follow_path+0x162>
    2022:	1f c1       	rjmp	.+574    	; 0x2262 <follow_path+0x3a0>
    2024:	86 17       	cp	r24, r22
    2026:	97 07       	cpc	r25, r23
    2028:	08 f0       	brcs	.+2      	; 0x202c <follow_path+0x16a>
    202a:	f9 c0       	rjmp	.+498    	; 0x221e <follow_path+0x35c>
    202c:	08 c0       	rjmp	.+16     	; 0x203e <follow_path+0x17c>
    202e:	11 0f       	add	r17, r17
    2030:	11 0f       	add	r17, r17
    2032:	91 01       	movw	r18, r2
    2034:	88 e0       	ldi	r24, 0x08	; 8
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	6b e0       	ldi	r22, 0x0B	; 11
    203a:	77 2d       	mov	r23, r7
    203c:	de cf       	rjmp	.-68     	; 0x1ffa <follow_path+0x138>
    203e:	bb 23       	and	r27, r27
    2040:	0c f4       	brge	.+2      	; 0x2044 <follow_path+0x182>
    2042:	13 60       	ori	r17, 0x03	; 3
    2044:	4f e7       	ldi	r20, 0x7F	; 127
    2046:	4b 0f       	add	r20, r27
    2048:	4f 31       	cpi	r20, 0x1F	; 31
    204a:	20 f0       	brcs	.+8      	; 0x2054 <follow_path+0x192>
    204c:	40 e2       	ldi	r20, 0x20	; 32
    204e:	4b 0f       	add	r20, r27
    2050:	4d 31       	cpi	r20, 0x1D	; 29
    2052:	28 f5       	brcc	.+74     	; 0x209e <follow_path+0x1dc>
    2054:	2e 5f       	subi	r18, 0xFE	; 254
    2056:	3f 4f       	sbci	r19, 0xFF	; 255
    2058:	4d 81       	ldd	r20, Y+5	; 0x05
    205a:	5e 81       	ldd	r21, Y+6	; 0x06
    205c:	24 0e       	add	r2, r20
    205e:	35 1e       	adc	r3, r21
    2060:	f1 01       	movw	r30, r2
    2062:	40 81       	ld	r20, Z
    2064:	50 ec       	ldi	r21, 0xC0	; 192
    2066:	54 0f       	add	r21, r20
    2068:	5f 33       	cpi	r21, 0x3F	; 63
    206a:	28 f0       	brcs	.+10     	; 0x2076 <follow_path+0x1b4>
    206c:	50 e8       	ldi	r21, 0x80	; 128
    206e:	54 0f       	add	r21, r20
    2070:	5d 37       	cpi	r21, 0x7D	; 125
    2072:	08 f0       	brcs	.+2      	; 0x2076 <follow_path+0x1b4>
    2074:	d4 c0       	rjmp	.+424    	; 0x221e <follow_path+0x35c>
    2076:	1b 01       	movw	r2, r22
    2078:	f1 e0       	ldi	r31, 0x01	; 1
    207a:	2f 1a       	sub	r2, r31
    207c:	31 08       	sbc	r3, r1
    207e:	82 15       	cp	r24, r2
    2080:	93 05       	cpc	r25, r3
    2082:	08 f0       	brcs	.+2      	; 0x2086 <follow_path+0x1c4>
    2084:	cc c0       	rjmp	.+408    	; 0x221e <follow_path+0x35c>
    2086:	16 01       	movw	r2, r12
    2088:	28 0e       	add	r2, r24
    208a:	39 1e       	adc	r3, r25
    208c:	f1 01       	movw	r30, r2
    208e:	b0 83       	st	Z, r27
    2090:	dc 01       	movw	r26, r24
    2092:	11 96       	adiw	r26, 0x01	; 1
    2094:	ac 0d       	add	r26, r12
    2096:	bd 1d       	adc	r27, r13
    2098:	02 96       	adiw	r24, 0x02	; 2
    209a:	4c 93       	st	X, r20
    209c:	ae cf       	rjmp	.-164    	; 0x1ffa <follow_path+0x138>
    209e:	4b 2f       	mov	r20, r27
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	42 32       	cpi	r20, 0x22	; 34
    20a4:	51 05       	cpc	r21, r1
    20a6:	e9 f1       	breq	.+122    	; 0x2122 <follow_path+0x260>
    20a8:	24 e0       	ldi	r18, 0x04	; 4
    20aa:	31 e0       	ldi	r19, 0x01	; 1
    20ac:	ed 81       	ldd	r30, Y+5	; 0x05
    20ae:	fe 81       	ldd	r31, Y+6	; 0x06
    20b0:	0b 2f       	mov	r16, r27
    20b2:	3c 83       	std	Y+4, r19	; 0x04
    20b4:	2b 83       	std	Y+3, r18	; 0x03
    20b6:	ab 81       	ldd	r26, Y+3	; 0x03
    20b8:	bc 81       	ldd	r27, Y+4	; 0x04
    20ba:	2d 91       	ld	r18, X+
    20bc:	bc 83       	std	Y+4, r27	; 0x04
    20be:	ab 83       	std	Y+3, r26	; 0x03
    20c0:	22 23       	and	r18, r18
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <follow_path+0x204>
    20c4:	8f c0       	rjmp	.+286    	; 0x21e4 <follow_path+0x322>
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	42 17       	cp	r20, r18
    20ca:	53 07       	cpc	r21, r19
    20cc:	a1 f7       	brne	.-24     	; 0x20b6 <follow_path+0x1f4>
    20ce:	29 c0       	rjmp	.+82     	; 0x2122 <follow_path+0x260>
    20d0:	12 60       	ori	r17, 0x02	; 2
    20d2:	06 c0       	rjmp	.+12     	; 0x20e0 <follow_path+0x21e>
    20d4:	2f e9       	ldi	r18, 0x9F	; 159
    20d6:	2b 0f       	add	r18, r27
    20d8:	2a 31       	cpi	r18, 0x1A	; 26
    20da:	10 f4       	brcc	.+4      	; 0x20e0 <follow_path+0x21e>
    20dc:	11 60       	ori	r17, 0x01	; 1
    20de:	b0 52       	subi	r27, 0x20	; 32
    20e0:	a6 01       	movw	r20, r12
    20e2:	48 0f       	add	r20, r24
    20e4:	59 1f       	adc	r21, r25
    20e6:	fa 01       	movw	r30, r20
    20e8:	b0 83       	st	Z, r27
    20ea:	01 96       	adiw	r24, 0x01	; 1
    20ec:	91 01       	movw	r18, r2
    20ee:	85 cf       	rjmp	.-246    	; 0x1ffa <follow_path+0x138>
    20f0:	89 2b       	or	r24, r25
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <follow_path+0x234>
    20f4:	94 c0       	rjmp	.+296    	; 0x221e <follow_path+0x35c>
    20f6:	8c 91       	ld	r24, X
    20f8:	85 3e       	cpi	r24, 0xE5	; 229
    20fa:	09 f4       	brne	.+2      	; 0x20fe <follow_path+0x23c>
    20fc:	4c 92       	st	X, r4
    20fe:	68 30       	cpi	r22, 0x08	; 8
    2100:	71 05       	cpc	r23, r1
    2102:	11 f4       	brne	.+4      	; 0x2108 <follow_path+0x246>
    2104:	99 0c       	add	r9, r9
    2106:	99 0c       	add	r9, r9
    2108:	89 2d       	mov	r24, r9
    210a:	83 70       	andi	r24, 0x03	; 3
    210c:	81 30       	cpi	r24, 0x01	; 1
    210e:	09 f4       	brne	.+2      	; 0x2112 <follow_path+0x250>
    2110:	20 61       	ori	r18, 0x10	; 16
    2112:	89 2d       	mov	r24, r9
    2114:	8c 70       	andi	r24, 0x0C	; 12
    2116:	84 30       	cpi	r24, 0x04	; 4
    2118:	09 f4       	brne	.+2      	; 0x211c <follow_path+0x25a>
    211a:	28 60       	ori	r18, 0x08	; 8
    211c:	1b 96       	adiw	r26, 0x0b	; 11
    211e:	2c 93       	st	X, r18
    2120:	80 c0       	rjmp	.+256    	; 0x2222 <follow_path+0x360>
    2122:	86 e0       	ldi	r24, 0x06	; 6
    2124:	a3 c0       	rjmp	.+326    	; 0x226c <follow_path+0x3aa>
    2126:	d8 01       	movw	r26, r16
    2128:	1e 96       	adiw	r26, 0x0e	; 14
    212a:	4d 91       	ld	r20, X+
    212c:	5d 91       	ld	r21, X+
    212e:	6d 91       	ld	r22, X+
    2130:	7c 91       	ld	r23, X
    2132:	51 97       	sbiw	r26, 0x11	; 17
    2134:	8d 91       	ld	r24, X+
    2136:	9c 91       	ld	r25, X
    2138:	0e 94 bb 04 	call	0x976	; 0x976 <move_window>
    213c:	81 11       	cpse	r24, r1
    213e:	80 c0       	rjmp	.+256    	; 0x2240 <follow_path+0x37e>
    2140:	f8 01       	movw	r30, r16
    2142:	02 88       	ldd	r0, Z+18	; 0x12
    2144:	f3 89       	ldd	r31, Z+19	; 0x13
    2146:	e0 2d       	mov	r30, r0
    2148:	fa 83       	std	Y+2, r31	; 0x02
    214a:	e9 83       	std	Y+1, r30	; 0x01
    214c:	90 81       	ld	r25, Z
    214e:	99 23       	and	r25, r25
    2150:	09 f4       	brne	.+2      	; 0x2154 <follow_path+0x292>
    2152:	80 c0       	rjmp	.+256    	; 0x2254 <follow_path+0x392>
    2154:	33 85       	ldd	r19, Z+11	; 0x0b
    2156:	33 fd       	sbrc	r19, 3
    2158:	12 c0       	rjmp	.+36     	; 0x217e <follow_path+0x2bc>
    215a:	d8 01       	movw	r26, r16
    215c:	54 96       	adiw	r26, 0x14	; 20
    215e:	4d 91       	ld	r20, X+
    2160:	5c 91       	ld	r21, X
    2162:	55 97       	sbiw	r26, 0x15	; 21
    2164:	da 01       	movw	r26, r20
    2166:	bf 01       	movw	r22, r30
    2168:	65 5f       	subi	r22, 0xF5	; 245
    216a:	7f 4f       	sbci	r23, 0xFF	; 255
    216c:	04 c0       	rjmp	.+8      	; 0x2176 <follow_path+0x2b4>
    216e:	e6 17       	cp	r30, r22
    2170:	f7 07       	cpc	r31, r23
    2172:	09 f4       	brne	.+2      	; 0x2176 <follow_path+0x2b4>
    2174:	5e c0       	rjmp	.+188    	; 0x2232 <follow_path+0x370>
    2176:	21 91       	ld	r18, Z+
    2178:	9d 91       	ld	r25, X+
    217a:	29 17       	cp	r18, r25
    217c:	c1 f3       	breq	.-16     	; 0x216e <follow_path+0x2ac>
    217e:	60 e0       	ldi	r22, 0x00	; 0
    2180:	70 e0       	ldi	r23, 0x00	; 0
    2182:	c8 01       	movw	r24, r16
    2184:	6a dd       	rcall	.-1324   	; 0x1c5a <dir_next>
    2186:	88 23       	and	r24, r24
    2188:	71 f2       	breq	.-100    	; 0x2126 <follow_path+0x264>
    218a:	5a c0       	rjmp	.+180    	; 0x2240 <follow_path+0x37e>
    218c:	95 ff       	sbrs	r25, 5
    218e:	0b c0       	rjmp	.+22     	; 0x21a6 <follow_path+0x2e4>
    2190:	f8 01       	movw	r30, r16
    2192:	16 82       	std	Z+6, r1	; 0x06
    2194:	17 82       	std	Z+7, r1	; 0x07
    2196:	10 86       	std	Z+8, r1	; 0x08
    2198:	11 86       	std	Z+9, r1	; 0x09
    219a:	13 8a       	std	Z+19, r1	; 0x13
    219c:	12 8a       	std	Z+18, r1	; 0x12
    219e:	92 ff       	sbrs	r25, 2
    21a0:	e6 ce       	rjmp	.-564    	; 0x1f6e <follow_path+0xac>
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	63 c0       	rjmp	.+198    	; 0x226c <follow_path+0x3aa>
    21a6:	92 fd       	sbrc	r25, 2
    21a8:	11 c0       	rjmp	.+34     	; 0x21cc <follow_path+0x30a>
    21aa:	85 e0       	ldi	r24, 0x05	; 5
    21ac:	5f c0       	rjmp	.+190    	; 0x226c <follow_path+0x3aa>
    21ae:	74 ff       	sbrs	r23, 4
    21b0:	0f c0       	rjmp	.+30     	; 0x21d0 <follow_path+0x30e>
    21b2:	69 81       	ldd	r22, Y+1	; 0x01
    21b4:	7a 81       	ldd	r23, Y+2	; 0x02
    21b6:	d8 01       	movw	r26, r16
    21b8:	8d 91       	ld	r24, X+
    21ba:	9c 91       	ld	r25, X
    21bc:	0e 94 99 04 	call	0x932	; 0x932 <ld_clust>
    21c0:	f8 01       	movw	r30, r16
    21c2:	66 83       	std	Z+6, r22	; 0x06
    21c4:	77 83       	std	Z+7, r23	; 0x07
    21c6:	80 87       	std	Z+8, r24	; 0x08
    21c8:	91 87       	std	Z+9, r25	; 0x09
    21ca:	d1 ce       	rjmp	.-606    	; 0x1f6e <follow_path+0xac>
    21cc:	84 e0       	ldi	r24, 0x04	; 4
    21ce:	4e c0       	rjmp	.+156    	; 0x226c <follow_path+0x3aa>
    21d0:	85 e0       	ldi	r24, 0x05	; 5
    21d2:	4c c0       	rjmp	.+152    	; 0x226c <follow_path+0x3aa>
    21d4:	24 0e       	add	r2, r20
    21d6:	35 1e       	adc	r3, r21
    21d8:	84 e2       	ldi	r24, 0x24	; 36
    21da:	ff ce       	rjmp	.-514    	; 0x1fda <follow_path+0x118>
    21dc:	24 0e       	add	r2, r20
    21de:	35 1e       	adc	r3, r21
    21e0:	8f 2d       	mov	r24, r15
    21e2:	fb ce       	rjmp	.-522    	; 0x1fda <follow_path+0x118>
    21e4:	fe 83       	std	Y+6, r31	; 0x06
    21e6:	ed 83       	std	Y+5, r30	; 0x05
    21e8:	b0 2f       	mov	r27, r16
    21ea:	2f eb       	ldi	r18, 0xBF	; 191
    21ec:	20 0f       	add	r18, r16
    21ee:	2a 31       	cpi	r18, 0x1A	; 26
    21f0:	08 f4       	brcc	.+2      	; 0x21f4 <follow_path+0x332>
    21f2:	6e cf       	rjmp	.-292    	; 0x20d0 <follow_path+0x20e>
    21f4:	6f cf       	rjmp	.-290    	; 0x20d4 <follow_path+0x212>
    21f6:	4d 81       	ldd	r20, Y+5	; 0x05
    21f8:	5e 81       	ldd	r21, Y+6	; 0x06
    21fa:	d6 01       	movw	r26, r12
    21fc:	91 2e       	mov	r9, r17
    21fe:	09 81       	ldd	r16, Y+1	; 0x01
    2200:	1a 81       	ldd	r17, Y+2	; 0x02
    2202:	24 0e       	add	r2, r20
    2204:	35 1e       	adc	r3, r21
    2206:	24 e0       	ldi	r18, 0x04	; 4
    2208:	73 cf       	rjmp	.-282    	; 0x20f0 <follow_path+0x22e>
    220a:	4d 81       	ldd	r20, Y+5	; 0x05
    220c:	5e 81       	ldd	r21, Y+6	; 0x06
    220e:	d6 01       	movw	r26, r12
    2210:	91 2e       	mov	r9, r17
    2212:	09 81       	ldd	r16, Y+1	; 0x01
    2214:	1a 81       	ldd	r17, Y+2	; 0x02
    2216:	24 0e       	add	r2, r20
    2218:	35 1e       	adc	r3, r21
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	69 cf       	rjmp	.-302    	; 0x20f0 <follow_path+0x22e>
    221e:	86 e0       	ldi	r24, 0x06	; 6
    2220:	25 c0       	rjmp	.+74     	; 0x226c <follow_path+0x3aa>
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	c8 01       	movw	r24, r16
    2228:	4b da       	rcall	.-2922   	; 0x16c0 <dir_sdi>
    222a:	88 23       	and	r24, r24
    222c:	09 f4       	brne	.+2      	; 0x2230 <follow_path+0x36e>
    222e:	7b cf       	rjmp	.-266    	; 0x2126 <follow_path+0x264>
    2230:	07 c0       	rjmp	.+14     	; 0x2240 <follow_path+0x37e>
    2232:	73 2f       	mov	r23, r19
    2234:	da 01       	movw	r26, r20
    2236:	1b 96       	adiw	r26, 0x0b	; 11
    2238:	9c 91       	ld	r25, X
    223a:	92 ff       	sbrs	r25, 2
    223c:	b8 cf       	rjmp	.-144    	; 0x21ae <follow_path+0x2ec>
    223e:	16 c0       	rjmp	.+44     	; 0x226c <follow_path+0x3aa>
    2240:	d8 01       	movw	r26, r16
    2242:	54 96       	adiw	r26, 0x14	; 20
    2244:	ed 91       	ld	r30, X+
    2246:	fc 91       	ld	r31, X
    2248:	55 97       	sbiw	r26, 0x15	; 21
    224a:	93 85       	ldd	r25, Z+11	; 0x0b
    224c:	84 30       	cpi	r24, 0x04	; 4
    224e:	09 f4       	brne	.+2      	; 0x2252 <follow_path+0x390>
    2250:	9d cf       	rjmp	.-198    	; 0x218c <follow_path+0x2ca>
    2252:	0c c0       	rjmp	.+24     	; 0x226c <follow_path+0x3aa>
    2254:	d8 01       	movw	r26, r16
    2256:	54 96       	adiw	r26, 0x14	; 20
    2258:	ed 91       	ld	r30, X+
    225a:	fc 91       	ld	r31, X
    225c:	55 97       	sbiw	r26, 0x15	; 21
    225e:	93 85       	ldd	r25, Z+11	; 0x0b
    2260:	95 cf       	rjmp	.-214    	; 0x218c <follow_path+0x2ca>
    2262:	68 30       	cpi	r22, 0x08	; 8
    2264:	71 05       	cpc	r23, r1
    2266:	09 f4       	brne	.+2      	; 0x226a <follow_path+0x3a8>
    2268:	e2 ce       	rjmp	.-572    	; 0x202e <follow_path+0x16c>
    226a:	d9 cf       	rjmp	.-78     	; 0x221e <follow_path+0x35c>
    226c:	26 96       	adiw	r28, 0x06	; 6
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd bf       	out	0x3d, r28	; 61
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	1f 91       	pop	r17
    227e:	0f 91       	pop	r16
    2280:	ff 90       	pop	r15
    2282:	ef 90       	pop	r14
    2284:	df 90       	pop	r13
    2286:	cf 90       	pop	r12
    2288:	bf 90       	pop	r11
    228a:	af 90       	pop	r10
    228c:	9f 90       	pop	r9
    228e:	8f 90       	pop	r8
    2290:	7f 90       	pop	r7
    2292:	6f 90       	pop	r6
    2294:	5f 90       	pop	r5
    2296:	4f 90       	pop	r4
    2298:	3f 90       	pop	r3
    229a:	2f 90       	pop	r2
    229c:	08 95       	ret

0000229e <dir_register>:
    229e:	0f 93       	push	r16
    22a0:	1f 93       	push	r17
    22a2:	cf 93       	push	r28
    22a4:	8c 01       	movw	r16, r24
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	0a da       	rcall	.-3052   	; 0x16c0 <dir_sdi>
    22ac:	c8 2f       	mov	r28, r24
    22ae:	81 11       	cpse	r24, r1
    22b0:	46 c0       	rjmp	.+140    	; 0x233e <dir_register+0xa0>
    22b2:	d8 01       	movw	r26, r16
    22b4:	1e 96       	adiw	r26, 0x0e	; 14
    22b6:	4d 91       	ld	r20, X+
    22b8:	5d 91       	ld	r21, X+
    22ba:	6d 91       	ld	r22, X+
    22bc:	7c 91       	ld	r23, X
    22be:	51 97       	sbiw	r26, 0x11	; 17
    22c0:	8d 91       	ld	r24, X+
    22c2:	9c 91       	ld	r25, X
    22c4:	0e 94 bb 04 	call	0x976	; 0x976 <move_window>
    22c8:	c8 2f       	mov	r28, r24
    22ca:	81 11       	cpse	r24, r1
    22cc:	38 c0       	rjmp	.+112    	; 0x233e <dir_register+0xa0>
    22ce:	d8 01       	movw	r26, r16
    22d0:	52 96       	adiw	r26, 0x12	; 18
    22d2:	ed 91       	ld	r30, X+
    22d4:	fc 91       	ld	r31, X
    22d6:	53 97       	sbiw	r26, 0x13	; 19
    22d8:	80 81       	ld	r24, Z
    22da:	85 3e       	cpi	r24, 0xE5	; 229
    22dc:	21 f1       	breq	.+72     	; 0x2326 <dir_register+0x88>
    22de:	88 23       	and	r24, r24
    22e0:	11 f1       	breq	.+68     	; 0x2326 <dir_register+0x88>
    22e2:	61 e0       	ldi	r22, 0x01	; 1
    22e4:	70 e0       	ldi	r23, 0x00	; 0
    22e6:	c8 01       	movw	r24, r16
    22e8:	b8 dc       	rcall	.-1680   	; 0x1c5a <dir_next>
    22ea:	c8 2f       	mov	r28, r24
    22ec:	88 23       	and	r24, r24
    22ee:	09 f3       	breq	.-62     	; 0x22b2 <dir_register+0x14>
    22f0:	26 c0       	rjmp	.+76     	; 0x233e <dir_register+0xa0>
    22f2:	f8 01       	movw	r30, r16
    22f4:	82 89       	ldd	r24, Z+18	; 0x12
    22f6:	93 89       	ldd	r25, Z+19	; 0x13
    22f8:	fc 01       	movw	r30, r24
    22fa:	9c 01       	movw	r18, r24
    22fc:	20 5e       	subi	r18, 0xE0	; 224
    22fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2300:	11 92       	st	Z+, r1
    2302:	e2 17       	cp	r30, r18
    2304:	f3 07       	cpc	r31, r19
    2306:	e1 f7       	brne	.-8      	; 0x2300 <dir_register+0x62>
    2308:	d8 01       	movw	r26, r16
    230a:	54 96       	adiw	r26, 0x14	; 20
    230c:	6d 91       	ld	r22, X+
    230e:	7c 91       	ld	r23, X
    2310:	55 97       	sbiw	r26, 0x15	; 21
    2312:	4b e0       	ldi	r20, 0x0B	; 11
    2314:	50 e0       	ldi	r21, 0x00	; 0
    2316:	0e 94 8b 04 	call	0x916	; 0x916 <mem_cpy>
    231a:	d8 01       	movw	r26, r16
    231c:	ed 91       	ld	r30, X+
    231e:	fc 91       	ld	r31, X
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	84 83       	std	Z+4, r24	; 0x04
    2324:	0c c0       	rjmp	.+24     	; 0x233e <dir_register+0xa0>
    2326:	f8 01       	movw	r30, r16
    2328:	46 85       	ldd	r20, Z+14	; 0x0e
    232a:	57 85       	ldd	r21, Z+15	; 0x0f
    232c:	60 89       	ldd	r22, Z+16	; 0x10
    232e:	71 89       	ldd	r23, Z+17	; 0x11
    2330:	80 81       	ld	r24, Z
    2332:	91 81       	ldd	r25, Z+1	; 0x01
    2334:	0e 94 bb 04 	call	0x976	; 0x976 <move_window>
    2338:	c8 2f       	mov	r28, r24
    233a:	88 23       	and	r24, r24
    233c:	d1 f2       	breq	.-76     	; 0x22f2 <dir_register+0x54>
    233e:	8c 2f       	mov	r24, r28
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	08 95       	ret

00002348 <remove_chain>:
    2348:	7f 92       	push	r7
    234a:	8f 92       	push	r8
    234c:	9f 92       	push	r9
    234e:	af 92       	push	r10
    2350:	bf 92       	push	r11
    2352:	cf 92       	push	r12
    2354:	df 92       	push	r13
    2356:	ef 92       	push	r14
    2358:	ff 92       	push	r15
    235a:	0f 93       	push	r16
    235c:	1f 93       	push	r17
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	ec 01       	movw	r28, r24
    2364:	6a 01       	movw	r12, r20
    2366:	7b 01       	movw	r14, r22
    2368:	42 30       	cpi	r20, 0x02	; 2
    236a:	51 05       	cpc	r21, r1
    236c:	61 05       	cpc	r22, r1
    236e:	71 05       	cpc	r23, r1
    2370:	08 f4       	brcc	.+2      	; 0x2374 <remove_chain+0x2c>
    2372:	4a c0       	rjmp	.+148    	; 0x2408 <remove_chain+0xc0>
    2374:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2376:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2378:	ac 8d       	ldd	r26, Y+28	; 0x1c
    237a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    237c:	48 17       	cp	r20, r24
    237e:	59 07       	cpc	r21, r25
    2380:	6a 07       	cpc	r22, r26
    2382:	7b 07       	cpc	r23, r27
    2384:	08 f0       	brcs	.+2      	; 0x2388 <remove_chain+0x40>
    2386:	42 c0       	rjmp	.+132    	; 0x240c <remove_chain+0xc4>
    2388:	77 24       	eor	r7, r7
    238a:	73 94       	inc	r7
    238c:	b7 01       	movw	r22, r14
    238e:	a6 01       	movw	r20, r12
    2390:	ce 01       	movw	r24, r28
    2392:	9a d8       	rcall	.-3788   	; 0x14c8 <get_fat>
    2394:	4b 01       	movw	r8, r22
    2396:	5c 01       	movw	r10, r24
    2398:	67 2b       	or	r22, r23
    239a:	68 2b       	or	r22, r24
    239c:	69 2b       	or	r22, r25
    239e:	c1 f1       	breq	.+112    	; 0x2410 <remove_chain+0xc8>
    23a0:	91 e0       	ldi	r25, 0x01	; 1
    23a2:	89 16       	cp	r8, r25
    23a4:	91 04       	cpc	r9, r1
    23a6:	a1 04       	cpc	r10, r1
    23a8:	b1 04       	cpc	r11, r1
    23aa:	a1 f1       	breq	.+104    	; 0x2414 <remove_chain+0xcc>
    23ac:	8f ef       	ldi	r24, 0xFF	; 255
    23ae:	88 16       	cp	r8, r24
    23b0:	98 06       	cpc	r9, r24
    23b2:	a8 06       	cpc	r10, r24
    23b4:	b8 06       	cpc	r11, r24
    23b6:	81 f1       	breq	.+96     	; 0x2418 <remove_chain+0xd0>
    23b8:	00 e0       	ldi	r16, 0x00	; 0
    23ba:	10 e0       	ldi	r17, 0x00	; 0
    23bc:	98 01       	movw	r18, r16
    23be:	b7 01       	movw	r22, r14
    23c0:	a6 01       	movw	r20, r12
    23c2:	ce 01       	movw	r24, r28
    23c4:	33 da       	rcall	.-2970   	; 0x182c <put_fat>
    23c6:	81 11       	cpse	r24, r1
    23c8:	28 c0       	rjmp	.+80     	; 0x241a <remove_chain+0xd2>
    23ca:	4e 85       	ldd	r20, Y+14	; 0x0e
    23cc:	5f 85       	ldd	r21, Y+15	; 0x0f
    23ce:	68 89       	ldd	r22, Y+16	; 0x10
    23d0:	79 89       	ldd	r23, Y+17	; 0x11
    23d2:	4f 3f       	cpi	r20, 0xFF	; 255
    23d4:	9f ef       	ldi	r25, 0xFF	; 255
    23d6:	59 07       	cpc	r21, r25
    23d8:	69 07       	cpc	r22, r25
    23da:	79 07       	cpc	r23, r25
    23dc:	49 f0       	breq	.+18     	; 0x23f0 <remove_chain+0xa8>
    23de:	4f 5f       	subi	r20, 0xFF	; 255
    23e0:	5f 4f       	sbci	r21, 0xFF	; 255
    23e2:	6f 4f       	sbci	r22, 0xFF	; 255
    23e4:	7f 4f       	sbci	r23, 0xFF	; 255
    23e6:	4e 87       	std	Y+14, r20	; 0x0e
    23e8:	5f 87       	std	Y+15, r21	; 0x0f
    23ea:	68 8b       	std	Y+16, r22	; 0x10
    23ec:	79 8b       	std	Y+17, r23	; 0x11
    23ee:	7d 82       	std	Y+5, r7	; 0x05
    23f0:	75 01       	movw	r14, r10
    23f2:	64 01       	movw	r12, r8
    23f4:	4a 8d       	ldd	r20, Y+26	; 0x1a
    23f6:	5b 8d       	ldd	r21, Y+27	; 0x1b
    23f8:	6c 8d       	ldd	r22, Y+28	; 0x1c
    23fa:	7d 8d       	ldd	r23, Y+29	; 0x1d
    23fc:	84 16       	cp	r8, r20
    23fe:	95 06       	cpc	r9, r21
    2400:	a6 06       	cpc	r10, r22
    2402:	b7 06       	cpc	r11, r23
    2404:	18 f2       	brcs	.-122    	; 0x238c <remove_chain+0x44>
    2406:	09 c0       	rjmp	.+18     	; 0x241a <remove_chain+0xd2>
    2408:	82 e0       	ldi	r24, 0x02	; 2
    240a:	07 c0       	rjmp	.+14     	; 0x241a <remove_chain+0xd2>
    240c:	82 e0       	ldi	r24, 0x02	; 2
    240e:	05 c0       	rjmp	.+10     	; 0x241a <remove_chain+0xd2>
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	03 c0       	rjmp	.+6      	; 0x241a <remove_chain+0xd2>
    2414:	82 e0       	ldi	r24, 0x02	; 2
    2416:	01 c0       	rjmp	.+2      	; 0x241a <remove_chain+0xd2>
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	1f 91       	pop	r17
    2420:	0f 91       	pop	r16
    2422:	ff 90       	pop	r15
    2424:	ef 90       	pop	r14
    2426:	df 90       	pop	r13
    2428:	cf 90       	pop	r12
    242a:	bf 90       	pop	r11
    242c:	af 90       	pop	r10
    242e:	9f 90       	pop	r9
    2430:	8f 90       	pop	r8
    2432:	7f 90       	pop	r7
    2434:	08 95       	ret

00002436 <f_mount>:
    2436:	81 11       	cpse	r24, r1
    2438:	12 c0       	rjmp	.+36     	; 0x245e <f_mount+0x28>
    243a:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <FatFs>
    243e:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <FatFs+0x1>
    2442:	30 97       	sbiw	r30, 0x00	; 0
    2444:	09 f0       	breq	.+2      	; 0x2448 <f_mount+0x12>
    2446:	10 82       	st	Z, r1
    2448:	61 15       	cp	r22, r1
    244a:	71 05       	cpc	r23, r1
    244c:	11 f0       	breq	.+4      	; 0x2452 <f_mount+0x1c>
    244e:	fb 01       	movw	r30, r22
    2450:	10 82       	st	Z, r1
    2452:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <FatFs+0x1>
    2456:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <FatFs>
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	08 95       	ret
    245e:	8b e0       	ldi	r24, 0x0B	; 11
    2460:	08 95       	ret

00002462 <f_open>:
    2462:	4f 92       	push	r4
    2464:	5f 92       	push	r5
    2466:	6f 92       	push	r6
    2468:	7f 92       	push	r7
    246a:	af 92       	push	r10
    246c:	bf 92       	push	r11
    246e:	df 92       	push	r13
    2470:	ef 92       	push	r14
    2472:	ff 92       	push	r15
    2474:	0f 93       	push	r16
    2476:	1f 93       	push	r17
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
    2480:	a8 97       	sbiw	r28, 0x28	; 40
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	7c a3       	std	Y+36, r23	; 0x24
    248e:	6b a3       	std	Y+35, r22	; 0x23
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	09 f4       	brne	.+2      	; 0x2496 <f_open+0x34>
    2494:	db c0       	rjmp	.+438    	; 0x264c <f_open+0x1ea>
    2496:	b4 2e       	mov	r11, r20
    2498:	8c 01       	movw	r16, r24
    249a:	dc 01       	movw	r26, r24
    249c:	1d 92       	st	X+, r1
    249e:	1c 92       	st	X, r1
    24a0:	4e 71       	andi	r20, 0x1E	; 30
    24a2:	be 01       	movw	r22, r28
    24a4:	6f 5f       	subi	r22, 0xFF	; 255
    24a6:	7f 4f       	sbci	r23, 0xFF	; 255
    24a8:	ce 01       	movw	r24, r28
    24aa:	83 96       	adiw	r24, 0x23	; 35
    24ac:	0e 94 be 05 	call	0xb7c	; 0xb7c <chk_mounted>
    24b0:	81 11       	cpse	r24, r1
    24b2:	f3 c0       	rjmp	.+486    	; 0x269a <f_open+0x238>
    24b4:	bb 2d       	mov	r27, r11
    24b6:	bf 71       	andi	r27, 0x1F	; 31
    24b8:	db 2e       	mov	r13, r27
    24ba:	ce 01       	movw	r24, r28
    24bc:	47 96       	adiw	r24, 0x17	; 23
    24be:	9e 8b       	std	Y+22, r25	; 0x16
    24c0:	8d 8b       	std	Y+21, r24	; 0x15
    24c2:	6b a1       	ldd	r22, Y+35	; 0x23
    24c4:	7c a1       	ldd	r23, Y+36	; 0x24
    24c6:	46 97       	sbiw	r24, 0x16	; 22
    24c8:	fc dc       	rcall	.-1544   	; 0x1ec2 <follow_path>
    24ca:	eb 88       	ldd	r14, Y+19	; 0x13
    24cc:	fc 88       	ldd	r15, Y+20	; 0x14
    24ce:	81 11       	cpse	r24, r1
    24d0:	bf c0       	rjmp	.+382    	; 0x2650 <f_open+0x1ee>
    24d2:	e1 14       	cp	r14, r1
    24d4:	f1 04       	cpc	r15, r1
    24d6:	09 f0       	breq	.+2      	; 0x24da <f_open+0x78>
    24d8:	c4 c0       	rjmp	.+392    	; 0x2662 <f_open+0x200>
    24da:	be c0       	rjmp	.+380    	; 0x2658 <f_open+0x1f6>
    24dc:	84 30       	cpi	r24, 0x04	; 4
    24de:	09 f0       	breq	.+2      	; 0x24e2 <f_open+0x80>
    24e0:	ca c0       	rjmp	.+404    	; 0x2676 <f_open+0x214>
    24e2:	ce 01       	movw	r24, r28
    24e4:	01 96       	adiw	r24, 0x01	; 1
    24e6:	db de       	rcall	.-586    	; 0x229e <dir_register>
    24e8:	ed 2d       	mov	r30, r13
    24ea:	e8 60       	ori	r30, 0x08	; 8
    24ec:	de 2e       	mov	r13, r30
    24ee:	eb 88       	ldd	r14, Y+19	; 0x13
    24f0:	fc 88       	ldd	r15, Y+20	; 0x14
    24f2:	88 23       	and	r24, r24
    24f4:	49 f0       	breq	.+18     	; 0x2508 <f_open+0xa6>
    24f6:	d1 c0       	rjmp	.+418    	; 0x269a <f_open+0x238>
    24f8:	d7 01       	movw	r26, r14
    24fa:	1b 96       	adiw	r26, 0x0b	; 11
    24fc:	8c 91       	ld	r24, X
    24fe:	81 71       	andi	r24, 0x11	; 17
    2500:	09 f0       	breq	.+2      	; 0x2504 <f_open+0xa2>
    2502:	c4 c0       	rjmp	.+392    	; 0x268c <f_open+0x22a>
    2504:	b2 fc       	sbrc	r11, 2
    2506:	c4 c0       	rjmp	.+392    	; 0x2690 <f_open+0x22e>
    2508:	d3 fe       	sbrs	r13, 3
    250a:	53 c0       	rjmp	.+166    	; 0x25b2 <f_open+0x150>
    250c:	f7 01       	movw	r30, r14
    250e:	16 86       	std	Z+14, r1	; 0x0e
    2510:	17 86       	std	Z+15, r1	; 0x0f
    2512:	10 8a       	std	Z+16, r1	; 0x10
    2514:	11 8a       	std	Z+17, r1	; 0x11
    2516:	13 86       	std	Z+11, r1	; 0x0b
    2518:	14 8e       	std	Z+28, r1	; 0x1c
    251a:	15 8e       	std	Z+29, r1	; 0x1d
    251c:	16 8e       	std	Z+30, r1	; 0x1e
    251e:	17 8e       	std	Z+31, r1	; 0x1f
    2520:	a9 80       	ldd	r10, Y+1	; 0x01
    2522:	ba 80       	ldd	r11, Y+2	; 0x02
    2524:	b7 01       	movw	r22, r14
    2526:	c5 01       	movw	r24, r10
    2528:	0e 94 99 04 	call	0x932	; 0x932 <ld_clust>
    252c:	2b 01       	movw	r4, r22
    252e:	3c 01       	movw	r6, r24
    2530:	d7 01       	movw	r26, r14
    2532:	5a 96       	adiw	r26, 0x1a	; 26
    2534:	1c 92       	st	X, r1
    2536:	5a 97       	sbiw	r26, 0x1a	; 26
    2538:	5b 96       	adiw	r26, 0x1b	; 27
    253a:	1c 92       	st	X, r1
    253c:	5b 97       	sbiw	r26, 0x1b	; 27
    253e:	54 96       	adiw	r26, 0x14	; 20
    2540:	1c 92       	st	X, r1
    2542:	54 97       	sbiw	r26, 0x14	; 20
    2544:	55 96       	adiw	r26, 0x15	; 21
    2546:	1c 92       	st	X, r1
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	f5 01       	movw	r30, r10
    254c:	84 83       	std	Z+4, r24	; 0x04
    254e:	41 14       	cp	r4, r1
    2550:	51 04       	cpc	r5, r1
    2552:	61 04       	cpc	r6, r1
    2554:	71 04       	cpc	r7, r1
    2556:	51 f1       	breq	.+84     	; 0x25ac <f_open+0x14a>
    2558:	86 a5       	ldd	r24, Z+46	; 0x2e
    255a:	97 a5       	ldd	r25, Z+47	; 0x2f
    255c:	a0 a9       	ldd	r26, Z+48	; 0x30
    255e:	b1 a9       	ldd	r27, Z+49	; 0x31
    2560:	8d a3       	std	Y+37, r24	; 0x25
    2562:	9e a3       	std	Y+38, r25	; 0x26
    2564:	af a3       	std	Y+39, r26	; 0x27
    2566:	b8 a7       	std	Y+40, r27	; 0x28
    2568:	b3 01       	movw	r22, r6
    256a:	a2 01       	movw	r20, r4
    256c:	c5 01       	movw	r24, r10
    256e:	ec de       	rcall	.-552    	; 0x2348 <remove_chain>
    2570:	81 11       	cpse	r24, r1
    2572:	93 c0       	rjmp	.+294    	; 0x269a <f_open+0x238>
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	9a 81       	ldd	r25, Y+2	; 0x02
    2578:	b3 01       	movw	r22, r6
    257a:	a2 01       	movw	r20, r4
    257c:	41 50       	subi	r20, 0x01	; 1
    257e:	51 09       	sbc	r21, r1
    2580:	61 09       	sbc	r22, r1
    2582:	71 09       	sbc	r23, r1
    2584:	fc 01       	movw	r30, r24
    2586:	42 87       	std	Z+10, r20	; 0x0a
    2588:	53 87       	std	Z+11, r21	; 0x0b
    258a:	64 87       	std	Z+12, r22	; 0x0c
    258c:	75 87       	std	Z+13, r23	; 0x0d
    258e:	4d a1       	ldd	r20, Y+37	; 0x25
    2590:	5e a1       	ldd	r21, Y+38	; 0x26
    2592:	6f a1       	ldd	r22, Y+39	; 0x27
    2594:	78 a5       	ldd	r23, Y+40	; 0x28
    2596:	0e 94 bb 04 	call	0x976	; 0x976 <move_window>
    259a:	88 23       	and	r24, r24
    259c:	39 f0       	breq	.+14     	; 0x25ac <f_open+0x14a>
    259e:	7d c0       	rjmp	.+250    	; 0x269a <f_open+0x238>
    25a0:	b1 fe       	sbrs	r11, 1
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <f_open+0x146>
    25a4:	80 fd       	sbrc	r24, 0
    25a6:	76 c0       	rjmp	.+236    	; 0x2694 <f_open+0x232>
    25a8:	b3 fe       	sbrs	r11, 3
    25aa:	03 c0       	rjmp	.+6      	; 0x25b2 <f_open+0x150>
    25ac:	fd 2d       	mov	r31, r13
    25ae:	f0 62       	ori	r31, 0x20	; 32
    25b0:	df 2e       	mov	r13, r31
    25b2:	e9 81       	ldd	r30, Y+1	; 0x01
    25b4:	fa 81       	ldd	r31, Y+2	; 0x02
    25b6:	86 a5       	ldd	r24, Z+46	; 0x2e
    25b8:	97 a5       	ldd	r25, Z+47	; 0x2f
    25ba:	a0 a9       	ldd	r26, Z+48	; 0x30
    25bc:	b1 a9       	ldd	r27, Z+49	; 0x31
    25be:	f8 01       	movw	r30, r16
    25c0:	82 8f       	std	Z+26, r24	; 0x1a
    25c2:	93 8f       	std	Z+27, r25	; 0x1b
    25c4:	a4 8f       	std	Z+28, r26	; 0x1c
    25c6:	b5 8f       	std	Z+29, r27	; 0x1d
    25c8:	f7 8e       	std	Z+31, r15	; 0x1f
    25ca:	e6 8e       	std	Z+30, r14	; 0x1e
    25cc:	d8 01       	movw	r26, r16
    25ce:	14 96       	adiw	r26, 0x04	; 4
    25d0:	dc 92       	st	X, r13
    25d2:	a9 80       	ldd	r10, Y+1	; 0x01
    25d4:	ba 80       	ldd	r11, Y+2	; 0x02
    25d6:	b7 01       	movw	r22, r14
    25d8:	c5 01       	movw	r24, r10
    25da:	0e 94 99 04 	call	0x932	; 0x932 <ld_clust>
    25de:	f8 01       	movw	r30, r16
    25e0:	66 87       	std	Z+14, r22	; 0x0e
    25e2:	77 87       	std	Z+15, r23	; 0x0f
    25e4:	80 8b       	std	Z+16, r24	; 0x10
    25e6:	91 8b       	std	Z+17, r25	; 0x11
    25e8:	d7 01       	movw	r26, r14
    25ea:	5f 96       	adiw	r26, 0x1f	; 31
    25ec:	2c 91       	ld	r18, X
    25ee:	5f 97       	sbiw	r26, 0x1f	; 31
    25f0:	5e 96       	adiw	r26, 0x1e	; 30
    25f2:	8c 91       	ld	r24, X
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	a0 e0       	ldi	r26, 0x00	; 0
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	dc 01       	movw	r26, r24
    25fc:	99 27       	eor	r25, r25
    25fe:	88 27       	eor	r24, r24
    2600:	b2 2b       	or	r27, r18
    2602:	f7 01       	movw	r30, r14
    2604:	24 8d       	ldd	r18, Z+28	; 0x1c
    2606:	82 2b       	or	r24, r18
    2608:	45 8d       	ldd	r20, Z+29	; 0x1d
    260a:	50 e0       	ldi	r21, 0x00	; 0
    260c:	54 2f       	mov	r21, r20
    260e:	44 27       	eor	r20, r20
    2610:	60 e0       	ldi	r22, 0x00	; 0
    2612:	70 e0       	ldi	r23, 0x00	; 0
    2614:	84 2b       	or	r24, r20
    2616:	95 2b       	or	r25, r21
    2618:	a6 2b       	or	r26, r22
    261a:	b7 2b       	or	r27, r23
    261c:	f8 01       	movw	r30, r16
    261e:	82 87       	std	Z+10, r24	; 0x0a
    2620:	93 87       	std	Z+11, r25	; 0x0b
    2622:	a4 87       	std	Z+12, r26	; 0x0c
    2624:	b5 87       	std	Z+13, r27	; 0x0d
    2626:	16 82       	std	Z+6, r1	; 0x06
    2628:	17 82       	std	Z+7, r1	; 0x07
    262a:	10 86       	std	Z+8, r1	; 0x08
    262c:	11 86       	std	Z+9, r1	; 0x09
    262e:	16 8a       	std	Z+22, r1	; 0x16
    2630:	17 8a       	std	Z+23, r1	; 0x17
    2632:	10 8e       	std	Z+24, r1	; 0x18
    2634:	11 8e       	std	Z+25, r1	; 0x19
    2636:	b1 82       	std	Z+1, r11	; 0x01
    2638:	a0 82       	st	Z, r10
    263a:	d5 01       	movw	r26, r10
    263c:	16 96       	adiw	r26, 0x06	; 6
    263e:	8d 91       	ld	r24, X+
    2640:	9c 91       	ld	r25, X
    2642:	17 97       	sbiw	r26, 0x07	; 7
    2644:	93 83       	std	Z+3, r25	; 0x03
    2646:	82 83       	std	Z+2, r24	; 0x02
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	27 c0       	rjmp	.+78     	; 0x269a <f_open+0x238>
    264c:	89 e0       	ldi	r24, 0x09	; 9
    264e:	25 c0       	rjmp	.+74     	; 0x269a <f_open+0x238>
    2650:	4b 2d       	mov	r20, r11
    2652:	4c 71       	andi	r20, 0x1C	; 28
    2654:	59 f0       	breq	.+22     	; 0x266c <f_open+0x20a>
    2656:	42 cf       	rjmp	.-380    	; 0x24dc <f_open+0x7a>
    2658:	4b 2d       	mov	r20, r11
    265a:	4c 71       	andi	r20, 0x1C	; 28
    265c:	59 f4       	brne	.+22     	; 0x2674 <f_open+0x212>
    265e:	86 e0       	ldi	r24, 0x06	; 6
    2660:	05 c0       	rjmp	.+10     	; 0x266c <f_open+0x20a>
    2662:	8b 2d       	mov	r24, r11
    2664:	8c 71       	andi	r24, 0x1C	; 28
    2666:	09 f0       	breq	.+2      	; 0x266a <f_open+0x208>
    2668:	47 cf       	rjmp	.-370    	; 0x24f8 <f_open+0x96>
    266a:	0b c0       	rjmp	.+22     	; 0x2682 <f_open+0x220>
    266c:	88 23       	and	r24, r24
    266e:	09 f4       	brne	.+2      	; 0x2672 <f_open+0x210>
    2670:	ad cf       	rjmp	.-166    	; 0x25cc <f_open+0x16a>
    2672:	13 c0       	rjmp	.+38     	; 0x269a <f_open+0x238>
    2674:	86 e0       	ldi	r24, 0x06	; 6
    2676:	bd 2d       	mov	r27, r13
    2678:	b8 60       	ori	r27, 0x08	; 8
    267a:	db 2e       	mov	r13, r27
    267c:	eb 88       	ldd	r14, Y+19	; 0x13
    267e:	fc 88       	ldd	r15, Y+20	; 0x14
    2680:	f5 cf       	rjmp	.-22     	; 0x266c <f_open+0x20a>
    2682:	f7 01       	movw	r30, r14
    2684:	83 85       	ldd	r24, Z+11	; 0x0b
    2686:	84 fd       	sbrc	r24, 4
    2688:	07 c0       	rjmp	.+14     	; 0x2698 <f_open+0x236>
    268a:	8a cf       	rjmp	.-236    	; 0x25a0 <f_open+0x13e>
    268c:	87 e0       	ldi	r24, 0x07	; 7
    268e:	05 c0       	rjmp	.+10     	; 0x269a <f_open+0x238>
    2690:	88 e0       	ldi	r24, 0x08	; 8
    2692:	03 c0       	rjmp	.+6      	; 0x269a <f_open+0x238>
    2694:	87 e0       	ldi	r24, 0x07	; 7
    2696:	01 c0       	rjmp	.+2      	; 0x269a <f_open+0x238>
    2698:	84 e0       	ldi	r24, 0x04	; 4
    269a:	a8 96       	adiw	r28, 0x28	; 40
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	f8 94       	cli
    26a0:	de bf       	out	0x3e, r29	; 62
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	cd bf       	out	0x3d, r28	; 61
    26a6:	df 91       	pop	r29
    26a8:	cf 91       	pop	r28
    26aa:	1f 91       	pop	r17
    26ac:	0f 91       	pop	r16
    26ae:	ff 90       	pop	r15
    26b0:	ef 90       	pop	r14
    26b2:	df 90       	pop	r13
    26b4:	bf 90       	pop	r11
    26b6:	af 90       	pop	r10
    26b8:	7f 90       	pop	r7
    26ba:	6f 90       	pop	r6
    26bc:	5f 90       	pop	r5
    26be:	4f 90       	pop	r4
    26c0:	08 95       	ret

000026c2 <f_write>:
    26c2:	2f 92       	push	r2
    26c4:	3f 92       	push	r3
    26c6:	4f 92       	push	r4
    26c8:	5f 92       	push	r5
    26ca:	6f 92       	push	r6
    26cc:	7f 92       	push	r7
    26ce:	8f 92       	push	r8
    26d0:	9f 92       	push	r9
    26d2:	af 92       	push	r10
    26d4:	bf 92       	push	r11
    26d6:	cf 92       	push	r12
    26d8:	df 92       	push	r13
    26da:	ef 92       	push	r14
    26dc:	ff 92       	push	r15
    26de:	0f 93       	push	r16
    26e0:	1f 93       	push	r17
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
    26e6:	00 d0       	rcall	.+0      	; 0x26e8 <f_write+0x26>
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <f_write+0x28>
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	9c 83       	std	Y+4, r25	; 0x04
    26f0:	8b 83       	std	Y+3, r24	; 0x03
    26f2:	4b 01       	movw	r8, r22
    26f4:	6a 01       	movw	r12, r20
    26f6:	59 01       	movw	r10, r18
    26f8:	d9 01       	movw	r26, r18
    26fa:	1d 92       	st	X+, r1
    26fc:	1c 92       	st	X, r1
    26fe:	0e 94 9e 05 	call	0xb3c	; 0xb3c <validate>
    2702:	81 11       	cpse	r24, r1
    2704:	bc c1       	rjmp	.+888    	; 0x2a7e <f_write+0x3bc>
    2706:	eb 81       	ldd	r30, Y+3	; 0x03
    2708:	fc 81       	ldd	r31, Y+4	; 0x04
    270a:	84 81       	ldd	r24, Z+4	; 0x04
    270c:	88 23       	and	r24, r24
    270e:	0c f4       	brge	.+2      	; 0x2712 <f_write+0x50>
    2710:	b3 c1       	rjmp	.+870    	; 0x2a78 <f_write+0x3b6>
    2712:	81 ff       	sbrs	r24, 1
    2714:	b3 c1       	rjmp	.+870    	; 0x2a7c <f_write+0x3ba>
    2716:	82 85       	ldd	r24, Z+10	; 0x0a
    2718:	93 85       	ldd	r25, Z+11	; 0x0b
    271a:	a4 85       	ldd	r26, Z+12	; 0x0c
    271c:	b5 85       	ldd	r27, Z+13	; 0x0d
    271e:	ac 01       	movw	r20, r24
    2720:	bd 01       	movw	r22, r26
    2722:	4c 0d       	add	r20, r12
    2724:	5d 1d       	adc	r21, r13
    2726:	61 1d       	adc	r22, r1
    2728:	71 1d       	adc	r23, r1
    272a:	48 17       	cp	r20, r24
    272c:	59 07       	cpc	r21, r25
    272e:	6a 07       	cpc	r22, r26
    2730:	7b 07       	cpc	r23, r27
    2732:	08 f4       	brcc	.+2      	; 0x2736 <f_write+0x74>
    2734:	84 c1       	rjmp	.+776    	; 0x2a3e <f_write+0x37c>
    2736:	c1 14       	cp	r12, r1
    2738:	d1 04       	cpc	r13, r1
    273a:	09 f4       	brne	.+2      	; 0x273e <f_write+0x7c>
    273c:	80 c1       	rjmp	.+768    	; 0x2a3e <f_write+0x37c>
    273e:	b0 96       	adiw	r30, 0x20	; 32
    2740:	fa 83       	std	Y+2, r31	; 0x02
    2742:	e9 83       	std	Y+1, r30	; 0x01
    2744:	eb 81       	ldd	r30, Y+3	; 0x03
    2746:	fc 81       	ldd	r31, Y+4	; 0x04
    2748:	86 81       	ldd	r24, Z+6	; 0x06
    274a:	97 81       	ldd	r25, Z+7	; 0x07
    274c:	a0 85       	ldd	r26, Z+8	; 0x08
    274e:	b1 85       	ldd	r27, Z+9	; 0x09
    2750:	ac 01       	movw	r20, r24
    2752:	bd 01       	movw	r22, r26
    2754:	51 70       	andi	r21, 0x01	; 1
    2756:	66 27       	eor	r22, r22
    2758:	77 27       	eor	r23, r23
    275a:	45 2b       	or	r20, r21
    275c:	46 2b       	or	r20, r22
    275e:	47 2b       	or	r20, r23
    2760:	09 f0       	breq	.+2      	; 0x2764 <f_write+0xa2>
    2762:	2c c1       	rjmp	.+600    	; 0x29bc <f_write+0x2fa>
    2764:	20 81       	ld	r18, Z
    2766:	31 81       	ldd	r19, Z+1	; 0x01
    2768:	f9 01       	movw	r30, r18
    276a:	12 81       	ldd	r17, Z+2	; 0x02
    276c:	11 50       	subi	r17, 0x01	; 1
    276e:	ac 01       	movw	r20, r24
    2770:	bd 01       	movw	r22, r26
    2772:	03 2e       	mov	r0, r19
    2774:	39 e0       	ldi	r19, 0x09	; 9
    2776:	76 95       	lsr	r23
    2778:	67 95       	ror	r22
    277a:	57 95       	ror	r21
    277c:	47 95       	ror	r20
    277e:	3a 95       	dec	r19
    2780:	d1 f7       	brne	.-12     	; 0x2776 <f_write+0xb4>
    2782:	30 2d       	mov	r19, r0
    2784:	14 23       	and	r17, r20
    2786:	09 f0       	breq	.+2      	; 0x278a <f_write+0xc8>
    2788:	4f c0       	rjmp	.+158    	; 0x2828 <f_write+0x166>
    278a:	89 2b       	or	r24, r25
    278c:	8a 2b       	or	r24, r26
    278e:	8b 2b       	or	r24, r27
    2790:	c9 f4       	brne	.+50     	; 0x27c4 <f_write+0x102>
    2792:	ab 81       	ldd	r26, Y+3	; 0x03
    2794:	bc 81       	ldd	r27, Y+4	; 0x04
    2796:	1e 96       	adiw	r26, 0x0e	; 14
    2798:	6d 91       	ld	r22, X+
    279a:	7d 91       	ld	r23, X+
    279c:	8d 91       	ld	r24, X+
    279e:	9c 91       	ld	r25, X
    27a0:	51 97       	sbiw	r26, 0x11	; 17
    27a2:	61 15       	cp	r22, r1
    27a4:	71 05       	cpc	r23, r1
    27a6:	81 05       	cpc	r24, r1
    27a8:	91 05       	cpc	r25, r1
    27aa:	e1 f4       	brne	.+56     	; 0x27e4 <f_write+0x122>
    27ac:	40 e0       	ldi	r20, 0x00	; 0
    27ae:	50 e0       	ldi	r21, 0x00	; 0
    27b0:	ba 01       	movw	r22, r20
    27b2:	c9 01       	movw	r24, r18
    27b4:	5f d9       	rcall	.-3394   	; 0x1a74 <create_chain>
    27b6:	eb 81       	ldd	r30, Y+3	; 0x03
    27b8:	fc 81       	ldd	r31, Y+4	; 0x04
    27ba:	66 87       	std	Z+14, r22	; 0x0e
    27bc:	77 87       	std	Z+15, r23	; 0x0f
    27be:	80 8b       	std	Z+16, r24	; 0x10
    27c0:	91 8b       	std	Z+17, r25	; 0x11
    27c2:	0a c0       	rjmp	.+20     	; 0x27d8 <f_write+0x116>
    27c4:	ab 81       	ldd	r26, Y+3	; 0x03
    27c6:	bc 81       	ldd	r27, Y+4	; 0x04
    27c8:	52 96       	adiw	r26, 0x12	; 18
    27ca:	4d 91       	ld	r20, X+
    27cc:	5d 91       	ld	r21, X+
    27ce:	6d 91       	ld	r22, X+
    27d0:	7c 91       	ld	r23, X
    27d2:	55 97       	sbiw	r26, 0x15	; 21
    27d4:	c9 01       	movw	r24, r18
    27d6:	4e d9       	rcall	.-3428   	; 0x1a74 <create_chain>
    27d8:	61 15       	cp	r22, r1
    27da:	71 05       	cpc	r23, r1
    27dc:	81 05       	cpc	r24, r1
    27de:	91 05       	cpc	r25, r1
    27e0:	09 f4       	brne	.+2      	; 0x27e4 <f_write+0x122>
    27e2:	2d c1       	rjmp	.+602    	; 0x2a3e <f_write+0x37c>
    27e4:	61 30       	cpi	r22, 0x01	; 1
    27e6:	71 05       	cpc	r23, r1
    27e8:	81 05       	cpc	r24, r1
    27ea:	91 05       	cpc	r25, r1
    27ec:	39 f4       	brne	.+14     	; 0x27fc <f_write+0x13a>
    27ee:	eb 81       	ldd	r30, Y+3	; 0x03
    27f0:	fc 81       	ldd	r31, Y+4	; 0x04
    27f2:	84 81       	ldd	r24, Z+4	; 0x04
    27f4:	80 68       	ori	r24, 0x80	; 128
    27f6:	84 83       	std	Z+4, r24	; 0x04
    27f8:	82 e0       	ldi	r24, 0x02	; 2
    27fa:	41 c1       	rjmp	.+642    	; 0x2a7e <f_write+0x3bc>
    27fc:	6f 3f       	cpi	r22, 0xFF	; 255
    27fe:	ff ef       	ldi	r31, 0xFF	; 255
    2800:	7f 07       	cpc	r23, r31
    2802:	8f 07       	cpc	r24, r31
    2804:	9f 07       	cpc	r25, r31
    2806:	51 f4       	brne	.+20     	; 0x281c <f_write+0x15a>
    2808:	ab 81       	ldd	r26, Y+3	; 0x03
    280a:	bc 81       	ldd	r27, Y+4	; 0x04
    280c:	14 96       	adiw	r26, 0x04	; 4
    280e:	8c 91       	ld	r24, X
    2810:	14 97       	sbiw	r26, 0x04	; 4
    2812:	80 68       	ori	r24, 0x80	; 128
    2814:	14 96       	adiw	r26, 0x04	; 4
    2816:	8c 93       	st	X, r24
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	31 c1       	rjmp	.+610    	; 0x2a7e <f_write+0x3bc>
    281c:	eb 81       	ldd	r30, Y+3	; 0x03
    281e:	fc 81       	ldd	r31, Y+4	; 0x04
    2820:	62 8b       	std	Z+18, r22	; 0x12
    2822:	73 8b       	std	Z+19, r23	; 0x13
    2824:	84 8b       	std	Z+20, r24	; 0x14
    2826:	95 8b       	std	Z+21, r25	; 0x15
    2828:	ab 81       	ldd	r26, Y+3	; 0x03
    282a:	bc 81       	ldd	r27, Y+4	; 0x04
    282c:	14 96       	adiw	r26, 0x04	; 4
    282e:	8c 91       	ld	r24, X
    2830:	14 97       	sbiw	r26, 0x04	; 4
    2832:	86 ff       	sbrs	r24, 6
    2834:	1f c0       	rjmp	.+62     	; 0x2874 <f_write+0x1b2>
    2836:	56 96       	adiw	r26, 0x16	; 22
    2838:	2d 91       	ld	r18, X+
    283a:	3d 91       	ld	r19, X+
    283c:	4d 91       	ld	r20, X+
    283e:	5c 91       	ld	r21, X
    2840:	59 97       	sbiw	r26, 0x19	; 25
    2842:	ed 91       	ld	r30, X+
    2844:	fc 91       	ld	r31, X
    2846:	01 e0       	ldi	r16, 0x01	; 1
    2848:	69 81       	ldd	r22, Y+1	; 0x01
    284a:	7a 81       	ldd	r23, Y+2	; 0x02
    284c:	81 81       	ldd	r24, Z+1	; 0x01
    284e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <disk_write>
    2852:	88 23       	and	r24, r24
    2854:	39 f0       	breq	.+14     	; 0x2864 <f_write+0x1a2>
    2856:	eb 81       	ldd	r30, Y+3	; 0x03
    2858:	fc 81       	ldd	r31, Y+4	; 0x04
    285a:	84 81       	ldd	r24, Z+4	; 0x04
    285c:	80 68       	ori	r24, 0x80	; 128
    285e:	84 83       	std	Z+4, r24	; 0x04
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	0d c1       	rjmp	.+538    	; 0x2a7e <f_write+0x3bc>
    2864:	ab 81       	ldd	r26, Y+3	; 0x03
    2866:	bc 81       	ldd	r27, Y+4	; 0x04
    2868:	14 96       	adiw	r26, 0x04	; 4
    286a:	8c 91       	ld	r24, X
    286c:	14 97       	sbiw	r26, 0x04	; 4
    286e:	8f 7b       	andi	r24, 0xBF	; 191
    2870:	14 96       	adiw	r26, 0x04	; 4
    2872:	8c 93       	st	X, r24
    2874:	eb 81       	ldd	r30, Y+3	; 0x03
    2876:	fc 81       	ldd	r31, Y+4	; 0x04
    2878:	20 80       	ld	r2, Z
    287a:	31 80       	ldd	r3, Z+1	; 0x01
    287c:	42 89       	ldd	r20, Z+18	; 0x12
    287e:	53 89       	ldd	r21, Z+19	; 0x13
    2880:	64 89       	ldd	r22, Z+20	; 0x14
    2882:	75 89       	ldd	r23, Z+21	; 0x15
    2884:	c1 01       	movw	r24, r2
    2886:	0e 94 3c 0a 	call	0x1478	; 0x1478 <clust2sect>
    288a:	61 15       	cp	r22, r1
    288c:	71 05       	cpc	r23, r1
    288e:	81 05       	cpc	r24, r1
    2890:	91 05       	cpc	r25, r1
    2892:	51 f4       	brne	.+20     	; 0x28a8 <f_write+0x1e6>
    2894:	ab 81       	ldd	r26, Y+3	; 0x03
    2896:	bc 81       	ldd	r27, Y+4	; 0x04
    2898:	14 96       	adiw	r26, 0x04	; 4
    289a:	8c 91       	ld	r24, X
    289c:	14 97       	sbiw	r26, 0x04	; 4
    289e:	80 68       	ori	r24, 0x80	; 128
    28a0:	14 96       	adiw	r26, 0x04	; 4
    28a2:	8c 93       	st	X, r24
    28a4:	82 e0       	ldi	r24, 0x02	; 2
    28a6:	eb c0       	rjmp	.+470    	; 0x2a7e <f_write+0x3bc>
    28a8:	2b 01       	movw	r4, r22
    28aa:	3c 01       	movw	r6, r24
    28ac:	41 0e       	add	r4, r17
    28ae:	51 1c       	adc	r5, r1
    28b0:	61 1c       	adc	r6, r1
    28b2:	71 1c       	adc	r7, r1
    28b4:	76 01       	movw	r14, r12
    28b6:	ef 2c       	mov	r14, r15
    28b8:	ff 24       	eor	r15, r15
    28ba:	e6 94       	lsr	r14
    28bc:	e1 14       	cp	r14, r1
    28be:	f1 04       	cpc	r15, r1
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <f_write+0x202>
    28c2:	49 c0       	rjmp	.+146    	; 0x2956 <f_write+0x294>
    28c4:	f1 01       	movw	r30, r2
    28c6:	42 81       	ldd	r20, Z+2	; 0x02
    28c8:	24 2f       	mov	r18, r20
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	c7 01       	movw	r24, r14
    28ce:	81 0f       	add	r24, r17
    28d0:	91 1d       	adc	r25, r1
    28d2:	28 17       	cp	r18, r24
    28d4:	39 07       	cpc	r19, r25
    28d6:	18 f4       	brcc	.+6      	; 0x28de <f_write+0x21c>
    28d8:	79 01       	movw	r14, r18
    28da:	e1 1a       	sub	r14, r17
    28dc:	f1 08       	sbc	r15, r1
    28de:	0e 2d       	mov	r16, r14
    28e0:	a3 01       	movw	r20, r6
    28e2:	92 01       	movw	r18, r4
    28e4:	b4 01       	movw	r22, r8
    28e6:	d1 01       	movw	r26, r2
    28e8:	11 96       	adiw	r26, 0x01	; 1
    28ea:	8c 91       	ld	r24, X
    28ec:	0e 94 72 02 	call	0x4e4	; 0x4e4 <disk_write>
    28f0:	88 23       	and	r24, r24
    28f2:	39 f0       	breq	.+14     	; 0x2902 <f_write+0x240>
    28f4:	eb 81       	ldd	r30, Y+3	; 0x03
    28f6:	fc 81       	ldd	r31, Y+4	; 0x04
    28f8:	84 81       	ldd	r24, Z+4	; 0x04
    28fa:	80 68       	ori	r24, 0x80	; 128
    28fc:	84 83       	std	Z+4, r24	; 0x04
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	be c0       	rjmp	.+380    	; 0x2a7e <f_write+0x3bc>
    2902:	eb 81       	ldd	r30, Y+3	; 0x03
    2904:	fc 81       	ldd	r31, Y+4	; 0x04
    2906:	86 89       	ldd	r24, Z+22	; 0x16
    2908:	97 89       	ldd	r25, Z+23	; 0x17
    290a:	a0 8d       	ldd	r26, Z+24	; 0x18
    290c:	b1 8d       	ldd	r27, Z+25	; 0x19
    290e:	84 19       	sub	r24, r4
    2910:	95 09       	sbc	r25, r5
    2912:	a6 09       	sbc	r26, r6
    2914:	b7 09       	sbc	r27, r7
    2916:	a7 01       	movw	r20, r14
    2918:	60 e0       	ldi	r22, 0x00	; 0
    291a:	70 e0       	ldi	r23, 0x00	; 0
    291c:	84 17       	cp	r24, r20
    291e:	95 07       	cpc	r25, r21
    2920:	a6 07       	cpc	r26, r22
    2922:	b7 07       	cpc	r27, r23
    2924:	a0 f4       	brcc	.+40     	; 0x294e <f_write+0x28c>
    2926:	98 2f       	mov	r25, r24
    2928:	88 27       	eor	r24, r24
    292a:	99 0f       	add	r25, r25
    292c:	b4 01       	movw	r22, r8
    292e:	68 0f       	add	r22, r24
    2930:	79 1f       	adc	r23, r25
    2932:	40 e0       	ldi	r20, 0x00	; 0
    2934:	52 e0       	ldi	r21, 0x02	; 2
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	9a 81       	ldd	r25, Y+2	; 0x02
    293a:	0e 94 8b 04 	call	0x916	; 0x916 <mem_cpy>
    293e:	ab 81       	ldd	r26, Y+3	; 0x03
    2940:	bc 81       	ldd	r27, Y+4	; 0x04
    2942:	14 96       	adiw	r26, 0x04	; 4
    2944:	8c 91       	ld	r24, X
    2946:	14 97       	sbiw	r26, 0x04	; 4
    2948:	8f 7b       	andi	r24, 0xBF	; 191
    294a:	14 96       	adiw	r26, 0x04	; 4
    294c:	8c 93       	st	X, r24
    294e:	fe 2c       	mov	r15, r14
    2950:	ee 24       	eor	r14, r14
    2952:	ff 0c       	add	r15, r15
    2954:	58 c0       	rjmp	.+176    	; 0x2a06 <f_write+0x344>
    2956:	eb 81       	ldd	r30, Y+3	; 0x03
    2958:	fc 81       	ldd	r31, Y+4	; 0x04
    295a:	86 89       	ldd	r24, Z+22	; 0x16
    295c:	97 89       	ldd	r25, Z+23	; 0x17
    295e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2960:	b1 8d       	ldd	r27, Z+25	; 0x19
    2962:	48 16       	cp	r4, r24
    2964:	59 06       	cpc	r5, r25
    2966:	6a 06       	cpc	r6, r26
    2968:	7b 06       	cpc	r7, r27
    296a:	01 f1       	breq	.+64     	; 0x29ac <f_write+0x2ea>
    296c:	46 81       	ldd	r20, Z+6	; 0x06
    296e:	57 81       	ldd	r21, Z+7	; 0x07
    2970:	60 85       	ldd	r22, Z+8	; 0x08
    2972:	71 85       	ldd	r23, Z+9	; 0x09
    2974:	82 85       	ldd	r24, Z+10	; 0x0a
    2976:	93 85       	ldd	r25, Z+11	; 0x0b
    2978:	a4 85       	ldd	r26, Z+12	; 0x0c
    297a:	b5 85       	ldd	r27, Z+13	; 0x0d
    297c:	48 17       	cp	r20, r24
    297e:	59 07       	cpc	r21, r25
    2980:	6a 07       	cpc	r22, r26
    2982:	7b 07       	cpc	r23, r27
    2984:	98 f4       	brcc	.+38     	; 0x29ac <f_write+0x2ea>
    2986:	01 e0       	ldi	r16, 0x01	; 1
    2988:	a3 01       	movw	r20, r6
    298a:	92 01       	movw	r18, r4
    298c:	69 81       	ldd	r22, Y+1	; 0x01
    298e:	7a 81       	ldd	r23, Y+2	; 0x02
    2990:	d1 01       	movw	r26, r2
    2992:	11 96       	adiw	r26, 0x01	; 1
    2994:	8c 91       	ld	r24, X
    2996:	0e 94 25 02 	call	0x44a	; 0x44a <disk_read>
    299a:	88 23       	and	r24, r24
    299c:	39 f0       	breq	.+14     	; 0x29ac <f_write+0x2ea>
    299e:	eb 81       	ldd	r30, Y+3	; 0x03
    29a0:	fc 81       	ldd	r31, Y+4	; 0x04
    29a2:	84 81       	ldd	r24, Z+4	; 0x04
    29a4:	80 68       	ori	r24, 0x80	; 128
    29a6:	84 83       	std	Z+4, r24	; 0x04
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	69 c0       	rjmp	.+210    	; 0x2a7e <f_write+0x3bc>
    29ac:	ab 81       	ldd	r26, Y+3	; 0x03
    29ae:	bc 81       	ldd	r27, Y+4	; 0x04
    29b0:	56 96       	adiw	r26, 0x16	; 22
    29b2:	4d 92       	st	X+, r4
    29b4:	5d 92       	st	X+, r5
    29b6:	6d 92       	st	X+, r6
    29b8:	7c 92       	st	X, r7
    29ba:	59 97       	sbiw	r26, 0x19	; 25
    29bc:	eb 81       	ldd	r30, Y+3	; 0x03
    29be:	fc 81       	ldd	r31, Y+4	; 0x04
    29c0:	86 81       	ldd	r24, Z+6	; 0x06
    29c2:	97 81       	ldd	r25, Z+7	; 0x07
    29c4:	a0 85       	ldd	r26, Z+8	; 0x08
    29c6:	b1 85       	ldd	r27, Z+9	; 0x09
    29c8:	9c 01       	movw	r18, r24
    29ca:	31 70       	andi	r19, 0x01	; 1
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	52 e0       	ldi	r21, 0x02	; 2
    29d0:	7a 01       	movw	r14, r20
    29d2:	e2 1a       	sub	r14, r18
    29d4:	f3 0a       	sbc	r15, r19
    29d6:	ce 14       	cp	r12, r14
    29d8:	df 04       	cpc	r13, r15
    29da:	08 f4       	brcc	.+2      	; 0x29de <f_write+0x31c>
    29dc:	76 01       	movw	r14, r12
    29de:	91 70       	andi	r25, 0x01	; 1
    29e0:	aa 27       	eor	r26, r26
    29e2:	bb 27       	eor	r27, r27
    29e4:	80 96       	adiw	r24, 0x20	; 32
    29e6:	a7 01       	movw	r20, r14
    29e8:	b4 01       	movw	r22, r8
    29ea:	2b 81       	ldd	r18, Y+3	; 0x03
    29ec:	3c 81       	ldd	r19, Y+4	; 0x04
    29ee:	82 0f       	add	r24, r18
    29f0:	93 1f       	adc	r25, r19
    29f2:	0e 94 8b 04 	call	0x916	; 0x916 <mem_cpy>
    29f6:	ab 81       	ldd	r26, Y+3	; 0x03
    29f8:	bc 81       	ldd	r27, Y+4	; 0x04
    29fa:	14 96       	adiw	r26, 0x04	; 4
    29fc:	8c 91       	ld	r24, X
    29fe:	14 97       	sbiw	r26, 0x04	; 4
    2a00:	80 64       	ori	r24, 0x40	; 64
    2a02:	14 96       	adiw	r26, 0x04	; 4
    2a04:	8c 93       	st	X, r24
    2a06:	8e 0c       	add	r8, r14
    2a08:	9f 1c       	adc	r9, r15
    2a0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a0e:	86 81       	ldd	r24, Z+6	; 0x06
    2a10:	97 81       	ldd	r25, Z+7	; 0x07
    2a12:	a0 85       	ldd	r26, Z+8	; 0x08
    2a14:	b1 85       	ldd	r27, Z+9	; 0x09
    2a16:	8e 0d       	add	r24, r14
    2a18:	9f 1d       	adc	r25, r15
    2a1a:	a1 1d       	adc	r26, r1
    2a1c:	b1 1d       	adc	r27, r1
    2a1e:	86 83       	std	Z+6, r24	; 0x06
    2a20:	97 83       	std	Z+7, r25	; 0x07
    2a22:	a0 87       	std	Z+8, r26	; 0x08
    2a24:	b1 87       	std	Z+9, r27	; 0x09
    2a26:	d5 01       	movw	r26, r10
    2a28:	8d 91       	ld	r24, X+
    2a2a:	9c 91       	ld	r25, X
    2a2c:	11 97       	sbiw	r26, 0x01	; 1
    2a2e:	8e 0d       	add	r24, r14
    2a30:	9f 1d       	adc	r25, r15
    2a32:	8d 93       	st	X+, r24
    2a34:	9c 93       	st	X, r25
    2a36:	ce 18       	sub	r12, r14
    2a38:	df 08       	sbc	r13, r15
    2a3a:	09 f0       	breq	.+2      	; 0x2a3e <f_write+0x37c>
    2a3c:	83 ce       	rjmp	.-762    	; 0x2744 <f_write+0x82>
    2a3e:	eb 81       	ldd	r30, Y+3	; 0x03
    2a40:	fc 81       	ldd	r31, Y+4	; 0x04
    2a42:	86 81       	ldd	r24, Z+6	; 0x06
    2a44:	97 81       	ldd	r25, Z+7	; 0x07
    2a46:	a0 85       	ldd	r26, Z+8	; 0x08
    2a48:	b1 85       	ldd	r27, Z+9	; 0x09
    2a4a:	42 85       	ldd	r20, Z+10	; 0x0a
    2a4c:	53 85       	ldd	r21, Z+11	; 0x0b
    2a4e:	64 85       	ldd	r22, Z+12	; 0x0c
    2a50:	75 85       	ldd	r23, Z+13	; 0x0d
    2a52:	48 17       	cp	r20, r24
    2a54:	59 07       	cpc	r21, r25
    2a56:	6a 07       	cpc	r22, r26
    2a58:	7b 07       	cpc	r23, r27
    2a5a:	20 f4       	brcc	.+8      	; 0x2a64 <f_write+0x3a2>
    2a5c:	82 87       	std	Z+10, r24	; 0x0a
    2a5e:	93 87       	std	Z+11, r25	; 0x0b
    2a60:	a4 87       	std	Z+12, r26	; 0x0c
    2a62:	b5 87       	std	Z+13, r27	; 0x0d
    2a64:	ab 81       	ldd	r26, Y+3	; 0x03
    2a66:	bc 81       	ldd	r27, Y+4	; 0x04
    2a68:	14 96       	adiw	r26, 0x04	; 4
    2a6a:	8c 91       	ld	r24, X
    2a6c:	14 97       	sbiw	r26, 0x04	; 4
    2a6e:	80 62       	ori	r24, 0x20	; 32
    2a70:	14 96       	adiw	r26, 0x04	; 4
    2a72:	8c 93       	st	X, r24
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	03 c0       	rjmp	.+6      	; 0x2a7e <f_write+0x3bc>
    2a78:	82 e0       	ldi	r24, 0x02	; 2
    2a7a:	01 c0       	rjmp	.+2      	; 0x2a7e <f_write+0x3bc>
    2a7c:	87 e0       	ldi	r24, 0x07	; 7
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	df 91       	pop	r29
    2a88:	cf 91       	pop	r28
    2a8a:	1f 91       	pop	r17
    2a8c:	0f 91       	pop	r16
    2a8e:	ff 90       	pop	r15
    2a90:	ef 90       	pop	r14
    2a92:	df 90       	pop	r13
    2a94:	cf 90       	pop	r12
    2a96:	bf 90       	pop	r11
    2a98:	af 90       	pop	r10
    2a9a:	9f 90       	pop	r9
    2a9c:	8f 90       	pop	r8
    2a9e:	7f 90       	pop	r7
    2aa0:	6f 90       	pop	r6
    2aa2:	5f 90       	pop	r5
    2aa4:	4f 90       	pop	r4
    2aa6:	3f 90       	pop	r3
    2aa8:	2f 90       	pop	r2
    2aaa:	08 95       	ret

00002aac <f_sync>:
    2aac:	0f 93       	push	r16
    2aae:	cf 93       	push	r28
    2ab0:	df 93       	push	r29
    2ab2:	ec 01       	movw	r28, r24
    2ab4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <validate>
    2ab8:	81 11       	cpse	r24, r1
    2aba:	4e c0       	rjmp	.+156    	; 0x2b58 <f_sync+0xac>
    2abc:	8c 81       	ldd	r24, Y+4	; 0x04
    2abe:	85 ff       	sbrs	r24, 5
    2ac0:	48 c0       	rjmp	.+144    	; 0x2b52 <f_sync+0xa6>
    2ac2:	86 ff       	sbrs	r24, 6
    2ac4:	12 c0       	rjmp	.+36     	; 0x2aea <f_sync+0x3e>
    2ac6:	2e 89       	ldd	r18, Y+22	; 0x16
    2ac8:	3f 89       	ldd	r19, Y+23	; 0x17
    2aca:	48 8d       	ldd	r20, Y+24	; 0x18
    2acc:	59 8d       	ldd	r21, Y+25	; 0x19
    2ace:	e8 81       	ld	r30, Y
    2ad0:	f9 81       	ldd	r31, Y+1	; 0x01
    2ad2:	01 e0       	ldi	r16, 0x01	; 1
    2ad4:	be 01       	movw	r22, r28
    2ad6:	60 5e       	subi	r22, 0xE0	; 224
    2ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    2ada:	81 81       	ldd	r24, Z+1	; 0x01
    2adc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <disk_write>
    2ae0:	81 11       	cpse	r24, r1
    2ae2:	39 c0       	rjmp	.+114    	; 0x2b56 <f_sync+0xaa>
    2ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae6:	8f 7b       	andi	r24, 0xBF	; 191
    2ae8:	8c 83       	std	Y+4, r24	; 0x04
    2aea:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2aec:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2aee:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2af0:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2af2:	88 81       	ld	r24, Y
    2af4:	99 81       	ldd	r25, Y+1	; 0x01
    2af6:	0e 94 bb 04 	call	0x976	; 0x976 <move_window>
    2afa:	81 11       	cpse	r24, r1
    2afc:	2d c0       	rjmp	.+90     	; 0x2b58 <f_sync+0xac>
    2afe:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2b00:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2b02:	83 85       	ldd	r24, Z+11	; 0x0b
    2b04:	80 62       	ori	r24, 0x20	; 32
    2b06:	83 87       	std	Z+11, r24	; 0x0b
    2b08:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b0a:	84 8f       	std	Z+28, r24	; 0x1c
    2b0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b0e:	85 8f       	std	Z+29, r24	; 0x1d
    2b10:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b12:	86 8f       	std	Z+30, r24	; 0x1e
    2b14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b16:	87 8f       	std	Z+31, r24	; 0x1f
    2b18:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b1c:	a8 89       	ldd	r26, Y+16	; 0x10
    2b1e:	b9 89       	ldd	r27, Y+17	; 0x11
    2b20:	82 8f       	std	Z+26, r24	; 0x1a
    2b22:	93 8f       	std	Z+27, r25	; 0x1b
    2b24:	cd 01       	movw	r24, r26
    2b26:	aa 27       	eor	r26, r26
    2b28:	bb 27       	eor	r27, r27
    2b2a:	84 8b       	std	Z+20, r24	; 0x14
    2b2c:	95 8b       	std	Z+21, r25	; 0x15
    2b2e:	16 8a       	std	Z+22, r1	; 0x16
    2b30:	17 8a       	std	Z+23, r1	; 0x17
    2b32:	10 8e       	std	Z+24, r1	; 0x18
    2b34:	11 8e       	std	Z+25, r1	; 0x19
    2b36:	12 8a       	std	Z+18, r1	; 0x12
    2b38:	13 8a       	std	Z+19, r1	; 0x13
    2b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b3c:	8f 7d       	andi	r24, 0xDF	; 223
    2b3e:	8c 83       	std	Y+4, r24	; 0x04
    2b40:	e8 81       	ld	r30, Y
    2b42:	f9 81       	ldd	r31, Y+1	; 0x01
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	84 83       	std	Z+4, r24	; 0x04
    2b48:	88 81       	ld	r24, Y
    2b4a:	99 81       	ldd	r25, Y+1	; 0x01
    2b4c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <sync>
    2b50:	03 c0       	rjmp	.+6      	; 0x2b58 <f_sync+0xac>
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	01 c0       	rjmp	.+2      	; 0x2b58 <f_sync+0xac>
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	df 91       	pop	r29
    2b5a:	cf 91       	pop	r28
    2b5c:	0f 91       	pop	r16
    2b5e:	08 95       	ret

00002b60 <f_close>:
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	ec 01       	movw	r28, r24
    2b66:	a2 df       	rcall	.-188    	; 0x2aac <f_sync>
    2b68:	81 11       	cpse	r24, r1
    2b6a:	02 c0       	rjmp	.+4      	; 0x2b70 <f_close+0x10>
    2b6c:	19 82       	std	Y+1, r1	; 0x01
    2b6e:	18 82       	st	Y, r1
    2b70:	df 91       	pop	r29
    2b72:	cf 91       	pop	r28
    2b74:	08 95       	ret

00002b76 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    2b76:	4f 92       	push	r4
    2b78:	5f 92       	push	r5
    2b7a:	6f 92       	push	r6
    2b7c:	7f 92       	push	r7
    2b7e:	8f 92       	push	r8
    2b80:	9f 92       	push	r9
    2b82:	af 92       	push	r10
    2b84:	bf 92       	push	r11
    2b86:	cf 92       	push	r12
    2b88:	df 92       	push	r13
    2b8a:	ef 92       	push	r14
    2b8c:	ff 92       	push	r15
    2b8e:	0f 93       	push	r16
    2b90:	1f 93       	push	r17
    2b92:	cf 93       	push	r28
    2b94:	df 93       	push	r29
    2b96:	00 d0       	rcall	.+0      	; 0x2b98 <f_lseek+0x22>
    2b98:	00 d0       	rcall	.+0      	; 0x2b9a <f_lseek+0x24>
    2b9a:	00 d0       	rcall	.+0      	; 0x2b9c <f_lseek+0x26>
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
    2ba0:	9e 83       	std	Y+6, r25	; 0x06
    2ba2:	8d 83       	std	Y+5, r24	; 0x05
    2ba4:	6a 01       	movw	r12, r20
    2ba6:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
    2ba8:	0e 94 9e 05 	call	0xb3c	; 0xb3c <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2bac:	81 11       	cpse	r24, r1
    2bae:	d8 c1       	rjmp	.+944    	; 0x2f60 <f_lseek+0x3ea>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    2bb0:	ad 81       	ldd	r26, Y+5	; 0x05
    2bb2:	be 81       	ldd	r27, Y+6	; 0x06
    2bb4:	14 96       	adiw	r26, 0x04	; 4
    2bb6:	8c 91       	ld	r24, X
    2bb8:	14 97       	sbiw	r26, 0x04	; 4
    2bba:	88 23       	and	r24, r24
    2bbc:	0c f4       	brge	.+2      	; 0x2bc0 <f_lseek+0x4a>
    2bbe:	cb c1       	rjmp	.+918    	; 0x2f56 <f_lseek+0x3e0>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    2bc0:	1a 96       	adiw	r26, 0x0a	; 10
    2bc2:	4d 91       	ld	r20, X+
    2bc4:	5d 91       	ld	r21, X+
    2bc6:	6d 91       	ld	r22, X+
    2bc8:	7c 91       	ld	r23, X
    2bca:	1d 97       	sbiw	r26, 0x0d	; 13
    2bcc:	4c 15       	cp	r20, r12
    2bce:	5d 05       	cpc	r21, r13
    2bd0:	6e 05       	cpc	r22, r14
    2bd2:	7f 05       	cpc	r23, r15
    2bd4:	20 f4       	brcc	.+8      	; 0x2bde <f_lseek+0x68>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    2bd6:	81 fd       	sbrc	r24, 1
    2bd8:	02 c0       	rjmp	.+4      	; 0x2bde <f_lseek+0x68>
#endif
			) ofs = fp->fsize;
    2bda:	6a 01       	movw	r12, r20
    2bdc:	7b 01       	movw	r14, r22

		ifptr = fp->fptr;
    2bde:	ed 81       	ldd	r30, Y+5	; 0x05
    2be0:	fe 81       	ldd	r31, Y+6	; 0x06
    2be2:	46 80       	ldd	r4, Z+6	; 0x06
    2be4:	57 80       	ldd	r5, Z+7	; 0x07
    2be6:	60 84       	ldd	r6, Z+8	; 0x08
    2be8:	71 84       	ldd	r7, Z+9	; 0x09
		fp->fptr = nsect = 0;
    2bea:	16 82       	std	Z+6, r1	; 0x06
    2bec:	17 82       	std	Z+7, r1	; 0x07
    2bee:	10 86       	std	Z+8, r1	; 0x08
    2bf0:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    2bf2:	c1 14       	cp	r12, r1
    2bf4:	d1 04       	cpc	r13, r1
    2bf6:	e1 04       	cpc	r14, r1
    2bf8:	f1 04       	cpc	r15, r1
    2bfa:	09 f4       	brne	.+2      	; 0x2bfe <f_lseek+0x88>
    2bfc:	ae c1       	rjmp	.+860    	; 0x2f5a <f_lseek+0x3e4>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2bfe:	00 81       	ld	r16, Z
    2c00:	11 81       	ldd	r17, Z+1	; 0x01
    2c02:	f8 01       	movw	r30, r16
    2c04:	82 80       	ldd	r8, Z+2	; 0x02
    2c06:	91 2c       	mov	r9, r1
    2c08:	a1 2c       	mov	r10, r1
    2c0a:	b1 2c       	mov	r11, r1
    2c0c:	07 2e       	mov	r0, r23
    2c0e:	79 e0       	ldi	r23, 0x09	; 9
    2c10:	88 0c       	add	r8, r8
    2c12:	99 1c       	adc	r9, r9
    2c14:	aa 1c       	adc	r10, r10
    2c16:	bb 1c       	adc	r11, r11
    2c18:	7a 95       	dec	r23
    2c1a:	d1 f7       	brne	.-12     	; 0x2c10 <f_lseek+0x9a>
    2c1c:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    2c1e:	41 14       	cp	r4, r1
    2c20:	51 04       	cpc	r5, r1
    2c22:	61 04       	cpc	r6, r1
    2c24:	71 04       	cpc	r7, r1
    2c26:	09 f4       	brne	.+2      	; 0x2c2a <f_lseek+0xb4>
    2c28:	3e c0       	rjmp	.+124    	; 0x2ca6 <f_lseek+0x130>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2c2a:	f1 e0       	ldi	r31, 0x01	; 1
    2c2c:	4f 1a       	sub	r4, r31
    2c2e:	51 08       	sbc	r5, r1
    2c30:	61 08       	sbc	r6, r1
    2c32:	71 08       	sbc	r7, r1

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2c34:	c7 01       	movw	r24, r14
    2c36:	b6 01       	movw	r22, r12
    2c38:	61 50       	subi	r22, 0x01	; 1
    2c3a:	71 09       	sbc	r23, r1
    2c3c:	81 09       	sbc	r24, r1
    2c3e:	91 09       	sbc	r25, r1
    2c40:	a5 01       	movw	r20, r10
    2c42:	94 01       	movw	r18, r8
    2c44:	f6 d2       	rcall	.+1516   	; 0x3232 <__udivmodsi4>
    2c46:	29 83       	std	Y+1, r18	; 0x01
    2c48:	3a 83       	std	Y+2, r19	; 0x02
    2c4a:	4b 83       	std	Y+3, r20	; 0x03
    2c4c:	5c 83       	std	Y+4, r21	; 0x04
    2c4e:	c3 01       	movw	r24, r6
    2c50:	b2 01       	movw	r22, r4
    2c52:	a5 01       	movw	r20, r10
    2c54:	94 01       	movw	r18, r8
    2c56:	ed d2       	rcall	.+1498   	; 0x3232 <__udivmodsi4>
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5c:	ab 81       	ldd	r26, Y+3	; 0x03
    2c5e:	bc 81       	ldd	r27, Y+4	; 0x04
    2c60:	82 17       	cp	r24, r18
    2c62:	93 07       	cpc	r25, r19
    2c64:	a4 07       	cpc	r26, r20
    2c66:	b5 07       	cpc	r27, r21
    2c68:	f0 f0       	brcs	.+60     	; 0x2ca6 <f_lseek+0x130>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2c6a:	88 27       	eor	r24, r24
    2c6c:	99 27       	eor	r25, r25
    2c6e:	dc 01       	movw	r26, r24
    2c70:	88 19       	sub	r24, r8
    2c72:	99 09       	sbc	r25, r9
    2c74:	aa 09       	sbc	r26, r10
    2c76:	bb 09       	sbc	r27, r11
    2c78:	48 22       	and	r4, r24
    2c7a:	59 22       	and	r5, r25
    2c7c:	6a 22       	and	r6, r26
    2c7e:	7b 22       	and	r7, r27
    2c80:	ad 81       	ldd	r26, Y+5	; 0x05
    2c82:	be 81       	ldd	r27, Y+6	; 0x06
    2c84:	16 96       	adiw	r26, 0x06	; 6
    2c86:	4d 92       	st	X+, r4
    2c88:	5d 92       	st	X+, r5
    2c8a:	6d 92       	st	X+, r6
    2c8c:	7c 92       	st	X, r7
    2c8e:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    2c90:	c4 18       	sub	r12, r4
    2c92:	d5 08       	sbc	r13, r5
    2c94:	e6 08       	sbc	r14, r6
    2c96:	f7 08       	sbc	r15, r7
				clst = fp->clust;
    2c98:	52 96       	adiw	r26, 0x12	; 18
    2c9a:	4d 91       	ld	r20, X+
    2c9c:	5d 91       	ld	r21, X+
    2c9e:	6d 91       	ld	r22, X+
    2ca0:	7c 91       	ld	r23, X
    2ca2:	55 97       	sbiw	r26, 0x15	; 21
    2ca4:	3d c0       	rjmp	.+122    	; 0x2d20 <f_lseek+0x1aa>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    2ca6:	ed 81       	ldd	r30, Y+5	; 0x05
    2ca8:	fe 81       	ldd	r31, Y+6	; 0x06
    2caa:	46 85       	ldd	r20, Z+14	; 0x0e
    2cac:	57 85       	ldd	r21, Z+15	; 0x0f
    2cae:	60 89       	ldd	r22, Z+16	; 0x10
    2cb0:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    2cb2:	41 15       	cp	r20, r1
    2cb4:	51 05       	cpc	r21, r1
    2cb6:	61 05       	cpc	r22, r1
    2cb8:	71 05       	cpc	r23, r1
    2cba:	61 f5       	brne	.+88     	; 0x2d14 <f_lseek+0x19e>
					clst = create_chain(fp->fs, 0);
    2cbc:	40 e0       	ldi	r20, 0x00	; 0
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	ba 01       	movw	r22, r20
    2cc2:	c8 01       	movw	r24, r16
    2cc4:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <create_chain>
    2cc8:	ab 01       	movw	r20, r22
    2cca:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2ccc:	41 30       	cpi	r20, 0x01	; 1
    2cce:	51 05       	cpc	r21, r1
    2cd0:	61 05       	cpc	r22, r1
    2cd2:	71 05       	cpc	r23, r1
    2cd4:	51 f4       	brne	.+20     	; 0x2cea <f_lseek+0x174>
    2cd6:	ad 81       	ldd	r26, Y+5	; 0x05
    2cd8:	be 81       	ldd	r27, Y+6	; 0x06
    2cda:	14 96       	adiw	r26, 0x04	; 4
    2cdc:	8c 91       	ld	r24, X
    2cde:	14 97       	sbiw	r26, 0x04	; 4
    2ce0:	80 68       	ori	r24, 0x80	; 128
    2ce2:	14 96       	adiw	r26, 0x04	; 4
    2ce4:	8c 93       	st	X, r24
    2ce6:	82 e0       	ldi	r24, 0x02	; 2
    2ce8:	3b c1       	rjmp	.+630    	; 0x2f60 <f_lseek+0x3ea>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2cea:	4f 3f       	cpi	r20, 0xFF	; 255
    2cec:	bf ef       	ldi	r27, 0xFF	; 255
    2cee:	5b 07       	cpc	r21, r27
    2cf0:	6b 07       	cpc	r22, r27
    2cf2:	7b 07       	cpc	r23, r27
    2cf4:	39 f4       	brne	.+14     	; 0x2d04 <f_lseek+0x18e>
    2cf6:	ed 81       	ldd	r30, Y+5	; 0x05
    2cf8:	fe 81       	ldd	r31, Y+6	; 0x06
    2cfa:	84 81       	ldd	r24, Z+4	; 0x04
    2cfc:	80 68       	ori	r24, 0x80	; 128
    2cfe:	84 83       	std	Z+4, r24	; 0x04
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	2e c1       	rjmp	.+604    	; 0x2f60 <f_lseek+0x3ea>
					fp->sclust = clst;
    2d04:	ad 81       	ldd	r26, Y+5	; 0x05
    2d06:	be 81       	ldd	r27, Y+6	; 0x06
    2d08:	1e 96       	adiw	r26, 0x0e	; 14
    2d0a:	4d 93       	st	X+, r20
    2d0c:	5d 93       	st	X+, r21
    2d0e:	6d 93       	st	X+, r22
    2d10:	7c 93       	st	X, r23
    2d12:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->clust = clst;
    2d14:	ed 81       	ldd	r30, Y+5	; 0x05
    2d16:	fe 81       	ldd	r31, Y+6	; 0x06
    2d18:	42 8b       	std	Z+18, r20	; 0x12
    2d1a:	53 8b       	std	Z+19, r21	; 0x13
    2d1c:	64 8b       	std	Z+20, r22	; 0x14
    2d1e:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    2d20:	41 15       	cp	r20, r1
    2d22:	51 05       	cpc	r21, r1
    2d24:	61 05       	cpc	r22, r1
    2d26:	71 05       	cpc	r23, r1
    2d28:	09 f4       	brne	.+2      	; 0x2d2c <f_lseek+0x1b6>
    2d2a:	a1 c0       	rjmp	.+322    	; 0x2e6e <f_lseek+0x2f8>
				while (ofs > bcs) {						/* Cluster following loop */
    2d2c:	8c 14       	cp	r8, r12
    2d2e:	9d 04       	cpc	r9, r13
    2d30:	ae 04       	cpc	r10, r14
    2d32:	bf 04       	cpc	r11, r15
    2d34:	08 f0       	brcs	.+2      	; 0x2d38 <f_lseek+0x1c2>
    2d36:	63 c0       	rjmp	.+198    	; 0x2dfe <f_lseek+0x288>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2d38:	ad 81       	ldd	r26, Y+5	; 0x05
    2d3a:	be 81       	ldd	r27, Y+6	; 0x06
    2d3c:	14 96       	adiw	r26, 0x04	; 4
    2d3e:	8c 91       	ld	r24, X
    2d40:	14 97       	sbiw	r26, 0x04	; 4
    2d42:	81 ff       	sbrs	r24, 1
    2d44:	0c c0       	rjmp	.+24     	; 0x2d5e <f_lseek+0x1e8>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    2d46:	8d 91       	ld	r24, X+
    2d48:	9c 91       	ld	r25, X
    2d4a:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <create_chain>
    2d4e:	ab 01       	movw	r20, r22
    2d50:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    2d52:	41 15       	cp	r20, r1
    2d54:	51 05       	cpc	r21, r1
    2d56:	61 05       	cpc	r22, r1
    2d58:	71 05       	cpc	r23, r1
    2d5a:	49 f4       	brne	.+18     	; 0x2d6e <f_lseek+0x1f8>
    2d5c:	4e c0       	rjmp	.+156    	; 0x2dfa <f_lseek+0x284>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    2d5e:	ad 81       	ldd	r26, Y+5	; 0x05
    2d60:	be 81       	ldd	r27, Y+6	; 0x06
    2d62:	8d 91       	ld	r24, X+
    2d64:	9c 91       	ld	r25, X
    2d66:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <get_fat>
    2d6a:	ab 01       	movw	r20, r22
    2d6c:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2d6e:	4f 3f       	cpi	r20, 0xFF	; 255
    2d70:	bf ef       	ldi	r27, 0xFF	; 255
    2d72:	5b 07       	cpc	r21, r27
    2d74:	6b 07       	cpc	r22, r27
    2d76:	7b 07       	cpc	r23, r27
    2d78:	39 f4       	brne	.+14     	; 0x2d88 <f_lseek+0x212>
    2d7a:	ed 81       	ldd	r30, Y+5	; 0x05
    2d7c:	fe 81       	ldd	r31, Y+6	; 0x06
    2d7e:	84 81       	ldd	r24, Z+4	; 0x04
    2d80:	80 68       	ori	r24, 0x80	; 128
    2d82:	84 83       	std	Z+4, r24	; 0x04
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	ec c0       	rjmp	.+472    	; 0x2f60 <f_lseek+0x3ea>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    2d88:	42 30       	cpi	r20, 0x02	; 2
    2d8a:	51 05       	cpc	r21, r1
    2d8c:	61 05       	cpc	r22, r1
    2d8e:	71 05       	cpc	r23, r1
    2d90:	68 f0       	brcs	.+26     	; 0x2dac <f_lseek+0x236>
    2d92:	ad 81       	ldd	r26, Y+5	; 0x05
    2d94:	be 81       	ldd	r27, Y+6	; 0x06
    2d96:	ed 91       	ld	r30, X+
    2d98:	fc 91       	ld	r31, X
    2d9a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d9c:	93 8d       	ldd	r25, Z+27	; 0x1b
    2d9e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2da0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2da2:	48 17       	cp	r20, r24
    2da4:	59 07       	cpc	r21, r25
    2da6:	6a 07       	cpc	r22, r26
    2da8:	7b 07       	cpc	r23, r27
    2daa:	38 f0       	brcs	.+14     	; 0x2dba <f_lseek+0x244>
    2dac:	ed 81       	ldd	r30, Y+5	; 0x05
    2dae:	fe 81       	ldd	r31, Y+6	; 0x06
    2db0:	84 81       	ldd	r24, Z+4	; 0x04
    2db2:	80 68       	ori	r24, 0x80	; 128
    2db4:	84 83       	std	Z+4, r24	; 0x04
    2db6:	82 e0       	ldi	r24, 0x02	; 2
    2db8:	d3 c0       	rjmp	.+422    	; 0x2f60 <f_lseek+0x3ea>
					fp->clust = clst;
    2dba:	ad 81       	ldd	r26, Y+5	; 0x05
    2dbc:	be 81       	ldd	r27, Y+6	; 0x06
    2dbe:	52 96       	adiw	r26, 0x12	; 18
    2dc0:	4d 93       	st	X+, r20
    2dc2:	5d 93       	st	X+, r21
    2dc4:	6d 93       	st	X+, r22
    2dc6:	7c 93       	st	X, r23
    2dc8:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    2dca:	fd 01       	movw	r30, r26
    2dcc:	86 81       	ldd	r24, Z+6	; 0x06
    2dce:	97 81       	ldd	r25, Z+7	; 0x07
    2dd0:	a0 85       	ldd	r26, Z+8	; 0x08
    2dd2:	b1 85       	ldd	r27, Z+9	; 0x09
    2dd4:	88 0d       	add	r24, r8
    2dd6:	99 1d       	adc	r25, r9
    2dd8:	aa 1d       	adc	r26, r10
    2dda:	bb 1d       	adc	r27, r11
    2ddc:	86 83       	std	Z+6, r24	; 0x06
    2dde:	97 83       	std	Z+7, r25	; 0x07
    2de0:	a0 87       	std	Z+8, r26	; 0x08
    2de2:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    2de4:	c8 18       	sub	r12, r8
    2de6:	d9 08       	sbc	r13, r9
    2de8:	ea 08       	sbc	r14, r10
    2dea:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2dec:	8c 14       	cp	r8, r12
    2dee:	9d 04       	cpc	r9, r13
    2df0:	ae 04       	cpc	r10, r14
    2df2:	bf 04       	cpc	r11, r15
    2df4:	08 f4       	brcc	.+2      	; 0x2df8 <f_lseek+0x282>
    2df6:	a0 cf       	rjmp	.-192    	; 0x2d38 <f_lseek+0x1c2>
    2df8:	02 c0       	rjmp	.+4      	; 0x2dfe <f_lseek+0x288>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    2dfa:	75 01       	movw	r14, r10
    2dfc:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2dfe:	ed 81       	ldd	r30, Y+5	; 0x05
    2e00:	fe 81       	ldd	r31, Y+6	; 0x06
    2e02:	86 81       	ldd	r24, Z+6	; 0x06
    2e04:	97 81       	ldd	r25, Z+7	; 0x07
    2e06:	a0 85       	ldd	r26, Z+8	; 0x08
    2e08:	b1 85       	ldd	r27, Z+9	; 0x09
    2e0a:	8c 0d       	add	r24, r12
    2e0c:	9d 1d       	adc	r25, r13
    2e0e:	ae 1d       	adc	r26, r14
    2e10:	bf 1d       	adc	r27, r15
    2e12:	86 83       	std	Z+6, r24	; 0x06
    2e14:	97 83       	std	Z+7, r25	; 0x07
    2e16:	a0 87       	std	Z+8, r26	; 0x08
    2e18:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    2e1a:	d7 01       	movw	r26, r14
    2e1c:	c6 01       	movw	r24, r12
    2e1e:	91 70       	andi	r25, 0x01	; 1
    2e20:	aa 27       	eor	r26, r26
    2e22:	bb 27       	eor	r27, r27
    2e24:	89 2b       	or	r24, r25
    2e26:	8a 2b       	or	r24, r26
    2e28:	8b 2b       	or	r24, r27
    2e2a:	29 f1       	breq	.+74     	; 0x2e76 <f_lseek+0x300>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    2e2c:	80 81       	ld	r24, Z
    2e2e:	91 81       	ldd	r25, Z+1	; 0x01
    2e30:	0e 94 3c 0a 	call	0x1478	; 0x1478 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2e34:	61 15       	cp	r22, r1
    2e36:	71 05       	cpc	r23, r1
    2e38:	81 05       	cpc	r24, r1
    2e3a:	91 05       	cpc	r25, r1
    2e3c:	51 f4       	brne	.+20     	; 0x2e52 <f_lseek+0x2dc>
    2e3e:	ad 81       	ldd	r26, Y+5	; 0x05
    2e40:	be 81       	ldd	r27, Y+6	; 0x06
    2e42:	14 96       	adiw	r26, 0x04	; 4
    2e44:	8c 91       	ld	r24, X
    2e46:	14 97       	sbiw	r26, 0x04	; 4
    2e48:	80 68       	ori	r24, 0x80	; 128
    2e4a:	14 96       	adiw	r26, 0x04	; 4
    2e4c:	8c 93       	st	X, r24
    2e4e:	82 e0       	ldi	r24, 0x02	; 2
    2e50:	87 c0       	rjmp	.+270    	; 0x2f60 <f_lseek+0x3ea>
					nsect += ofs / SS(fp->fs);
    2e52:	0b 2e       	mov	r0, r27
    2e54:	b9 e0       	ldi	r27, 0x09	; 9
    2e56:	f6 94       	lsr	r15
    2e58:	e7 94       	ror	r14
    2e5a:	d7 94       	ror	r13
    2e5c:	c7 94       	ror	r12
    2e5e:	ba 95       	dec	r27
    2e60:	d1 f7       	brne	.-12     	; 0x2e56 <f_lseek+0x2e0>
    2e62:	b0 2d       	mov	r27, r0
    2e64:	c6 0e       	add	r12, r22
    2e66:	d7 1e       	adc	r13, r23
    2e68:	e8 1e       	adc	r14, r24
    2e6a:	f9 1e       	adc	r15, r25
    2e6c:	07 c0       	rjmp	.+14     	; 0x2e7c <f_lseek+0x306>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2e6e:	c1 2c       	mov	r12, r1
    2e70:	d1 2c       	mov	r13, r1
    2e72:	76 01       	movw	r14, r12
    2e74:	03 c0       	rjmp	.+6      	; 0x2e7c <f_lseek+0x306>
    2e76:	c1 2c       	mov	r12, r1
    2e78:	d1 2c       	mov	r13, r1
    2e7a:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    2e7c:	ed 81       	ldd	r30, Y+5	; 0x05
    2e7e:	fe 81       	ldd	r31, Y+6	; 0x06
    2e80:	86 81       	ldd	r24, Z+6	; 0x06
    2e82:	97 81       	ldd	r25, Z+7	; 0x07
    2e84:	a0 85       	ldd	r26, Z+8	; 0x08
    2e86:	b1 85       	ldd	r27, Z+9	; 0x09
    2e88:	91 70       	andi	r25, 0x01	; 1
    2e8a:	aa 27       	eor	r26, r26
    2e8c:	bb 27       	eor	r27, r27
    2e8e:	89 2b       	or	r24, r25
    2e90:	8a 2b       	or	r24, r26
    2e92:	8b 2b       	or	r24, r27
    2e94:	09 f4       	brne	.+2      	; 0x2e98 <f_lseek+0x322>
    2e96:	47 c0       	rjmp	.+142    	; 0x2f26 <f_lseek+0x3b0>
    2e98:	26 89       	ldd	r18, Z+22	; 0x16
    2e9a:	37 89       	ldd	r19, Z+23	; 0x17
    2e9c:	40 8d       	ldd	r20, Z+24	; 0x18
    2e9e:	51 8d       	ldd	r21, Z+25	; 0x19
    2ea0:	c2 16       	cp	r12, r18
    2ea2:	d3 06       	cpc	r13, r19
    2ea4:	e4 06       	cpc	r14, r20
    2ea6:	f5 06       	cpc	r15, r21
    2ea8:	f1 f1       	breq	.+124    	; 0x2f26 <f_lseek+0x3b0>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
    2eaa:	84 81       	ldd	r24, Z+4	; 0x04
    2eac:	86 ff       	sbrs	r24, 6
    2eae:	1c c0       	rjmp	.+56     	; 0x2ee8 <f_lseek+0x372>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    2eb0:	01 90       	ld	r0, Z+
    2eb2:	f0 81       	ld	r31, Z
    2eb4:	e0 2d       	mov	r30, r0
    2eb6:	01 e0       	ldi	r16, 0x01	; 1
    2eb8:	6d 81       	ldd	r22, Y+5	; 0x05
    2eba:	7e 81       	ldd	r23, Y+6	; 0x06
    2ebc:	60 5e       	subi	r22, 0xE0	; 224
    2ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec0:	81 81       	ldd	r24, Z+1	; 0x01
    2ec2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <disk_write>
    2ec6:	88 23       	and	r24, r24
    2ec8:	51 f0       	breq	.+20     	; 0x2ede <f_lseek+0x368>
					ABORT(fp->fs, FR_DISK_ERR);
    2eca:	ad 81       	ldd	r26, Y+5	; 0x05
    2ecc:	be 81       	ldd	r27, Y+6	; 0x06
    2ece:	14 96       	adiw	r26, 0x04	; 4
    2ed0:	8c 91       	ld	r24, X
    2ed2:	14 97       	sbiw	r26, 0x04	; 4
    2ed4:	80 68       	ori	r24, 0x80	; 128
    2ed6:	14 96       	adiw	r26, 0x04	; 4
    2ed8:	8c 93       	st	X, r24
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	41 c0       	rjmp	.+130    	; 0x2f60 <f_lseek+0x3ea>
				fp->flag &= ~FA__DIRTY;
    2ede:	ed 81       	ldd	r30, Y+5	; 0x05
    2ee0:	fe 81       	ldd	r31, Y+6	; 0x06
    2ee2:	84 81       	ldd	r24, Z+4	; 0x04
    2ee4:	8f 7b       	andi	r24, 0xBF	; 191
    2ee6:	84 83       	std	Z+4, r24	; 0x04
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
    2ee8:	ad 81       	ldd	r26, Y+5	; 0x05
    2eea:	be 81       	ldd	r27, Y+6	; 0x06
    2eec:	ed 91       	ld	r30, X+
    2eee:	fc 91       	ld	r31, X
    2ef0:	11 97       	sbiw	r26, 0x01	; 1
    2ef2:	01 e0       	ldi	r16, 0x01	; 1
    2ef4:	a7 01       	movw	r20, r14
    2ef6:	96 01       	movw	r18, r12
    2ef8:	bd 01       	movw	r22, r26
    2efa:	60 5e       	subi	r22, 0xE0	; 224
    2efc:	7f 4f       	sbci	r23, 0xFF	; 255
    2efe:	81 81       	ldd	r24, Z+1	; 0x01
    2f00:	0e 94 25 02 	call	0x44a	; 0x44a <disk_read>
    2f04:	88 23       	and	r24, r24
    2f06:	39 f0       	breq	.+14     	; 0x2f16 <f_lseek+0x3a0>
				ABORT(fp->fs, FR_DISK_ERR);
    2f08:	ed 81       	ldd	r30, Y+5	; 0x05
    2f0a:	fe 81       	ldd	r31, Y+6	; 0x06
    2f0c:	84 81       	ldd	r24, Z+4	; 0x04
    2f0e:	80 68       	ori	r24, 0x80	; 128
    2f10:	84 83       	std	Z+4, r24	; 0x04
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	25 c0       	rjmp	.+74     	; 0x2f60 <f_lseek+0x3ea>
#endif
			fp->dsect = nsect;
    2f16:	ad 81       	ldd	r26, Y+5	; 0x05
    2f18:	be 81       	ldd	r27, Y+6	; 0x06
    2f1a:	56 96       	adiw	r26, 0x16	; 22
    2f1c:	cd 92       	st	X+, r12
    2f1e:	dd 92       	st	X+, r13
    2f20:	ed 92       	st	X+, r14
    2f22:	fc 92       	st	X, r15
    2f24:	59 97       	sbiw	r26, 0x19	; 25
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    2f26:	ed 81       	ldd	r30, Y+5	; 0x05
    2f28:	fe 81       	ldd	r31, Y+6	; 0x06
    2f2a:	86 81       	ldd	r24, Z+6	; 0x06
    2f2c:	97 81       	ldd	r25, Z+7	; 0x07
    2f2e:	a0 85       	ldd	r26, Z+8	; 0x08
    2f30:	b1 85       	ldd	r27, Z+9	; 0x09
    2f32:	42 85       	ldd	r20, Z+10	; 0x0a
    2f34:	53 85       	ldd	r21, Z+11	; 0x0b
    2f36:	64 85       	ldd	r22, Z+12	; 0x0c
    2f38:	75 85       	ldd	r23, Z+13	; 0x0d
    2f3a:	48 17       	cp	r20, r24
    2f3c:	59 07       	cpc	r21, r25
    2f3e:	6a 07       	cpc	r22, r26
    2f40:	7b 07       	cpc	r23, r27
    2f42:	68 f4       	brcc	.+26     	; 0x2f5e <f_lseek+0x3e8>
			fp->fsize = fp->fptr;
    2f44:	82 87       	std	Z+10, r24	; 0x0a
    2f46:	93 87       	std	Z+11, r25	; 0x0b
    2f48:	a4 87       	std	Z+12, r26	; 0x0c
    2f4a:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    2f4c:	84 81       	ldd	r24, Z+4	; 0x04
    2f4e:	80 62       	ori	r24, 0x20	; 32
    2f50:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	05 c0       	rjmp	.+10     	; 0x2f60 <f_lseek+0x3ea>


	res = validate(fp);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2f56:	82 e0       	ldi	r24, 0x02	; 2
    2f58:	03 c0       	rjmp	.+6      	; 0x2f60 <f_lseek+0x3ea>
			fp->flag |= FA__WRITTEN;
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
    2f5c:	01 c0       	rjmp	.+2      	; 0x2f60 <f_lseek+0x3ea>
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
}
    2f60:	26 96       	adiw	r28, 0x06	; 6
    2f62:	0f b6       	in	r0, 0x3f	; 63
    2f64:	f8 94       	cli
    2f66:	de bf       	out	0x3e, r29	; 62
    2f68:	0f be       	out	0x3f, r0	; 63
    2f6a:	cd bf       	out	0x3d, r28	; 61
    2f6c:	df 91       	pop	r29
    2f6e:	cf 91       	pop	r28
    2f70:	1f 91       	pop	r17
    2f72:	0f 91       	pop	r16
    2f74:	ff 90       	pop	r15
    2f76:	ef 90       	pop	r14
    2f78:	df 90       	pop	r13
    2f7a:	cf 90       	pop	r12
    2f7c:	bf 90       	pop	r11
    2f7e:	af 90       	pop	r10
    2f80:	9f 90       	pop	r9
    2f82:	8f 90       	pop	r8
    2f84:	7f 90       	pop	r7
    2f86:	6f 90       	pop	r6
    2f88:	5f 90       	pop	r5
    2f8a:	4f 90       	pop	r4
    2f8c:	08 95       	ret

00002f8e <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    2f8e:	ef 92       	push	r14
    2f90:	ff 92       	push	r15
    2f92:	0f 93       	push	r16
    2f94:	1f 93       	push	r17
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
    2f9e:	2e 97       	sbiw	r28, 0x0e	; 14
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	f8 94       	cli
    2fa4:	de bf       	out	0x3e, r29	; 62
    2fa6:	0f be       	out	0x3f, r0	; 63
    2fa8:	cd bf       	out	0x3d, r28	; 61
    2faa:	7e 87       	std	Y+14, r23	; 0x0e
    2fac:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	FATFS *fs;
	DEF_NAMEBUF;


	if (!dj) return FR_INVALID_OBJECT;
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	f1 f1       	breq	.+124    	; 0x302e <f_opendir+0xa0>
    2fb2:	8c 01       	movw	r16, r24

	res = chk_mounted(&path, &dj->fs, 0);
    2fb4:	40 e0       	ldi	r20, 0x00	; 0
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	ce 01       	movw	r24, r28
    2fba:	0d 96       	adiw	r24, 0x0d	; 13
    2fbc:	0e 94 be 05 	call	0xb7c	; 0xb7c <chk_mounted>
	fs = dj->fs;
	if (res == FR_OK) {
    2fc0:	81 11       	cpse	r24, r1
    2fc2:	31 c0       	rjmp	.+98     	; 0x3026 <f_opendir+0x98>


	if (!dj) return FR_INVALID_OBJECT;

	res = chk_mounted(&path, &dj->fs, 0);
	fs = dj->fs;
    2fc4:	d8 01       	movw	r26, r16
    2fc6:	ed 90       	ld	r14, X+
    2fc8:	fc 90       	ld	r15, X
    2fca:	11 97       	sbiw	r26, 0x01	; 1
	if (res == FR_OK) {
		INIT_BUF(*dj);
    2fcc:	ce 01       	movw	r24, r28
    2fce:	01 96       	adiw	r24, 0x01	; 1
    2fd0:	55 96       	adiw	r26, 0x15	; 21
    2fd2:	9c 93       	st	X, r25
    2fd4:	8e 93       	st	-X, r24
    2fd6:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    2fd8:	6d 85       	ldd	r22, Y+13	; 0x0d
    2fda:	7e 85       	ldd	r23, Y+14	; 0x0e
    2fdc:	c8 01       	movw	r24, r16
    2fde:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    2fe2:	81 11       	cpse	r24, r1
    2fe4:	14 c0       	rjmp	.+40     	; 0x300e <f_opendir+0x80>
			if (dj->dir) {						/* It is not the root dir */
    2fe6:	d8 01       	movw	r26, r16
    2fe8:	52 96       	adiw	r26, 0x12	; 18
    2fea:	ed 91       	ld	r30, X+
    2fec:	fc 91       	ld	r31, X
    2fee:	53 97       	sbiw	r26, 0x13	; 19
    2ff0:	30 97       	sbiw	r30, 0x00	; 0
    2ff2:	09 f1       	breq	.+66     	; 0x3036 <f_opendir+0xa8>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    2ff4:	83 85       	ldd	r24, Z+11	; 0x0b
    2ff6:	84 ff       	sbrs	r24, 4
    2ff8:	0f c0       	rjmp	.+30     	; 0x3018 <f_opendir+0x8a>
					dj->sclust = ld_clust(fs, dj->dir);
    2ffa:	bf 01       	movw	r22, r30
    2ffc:	c7 01       	movw	r24, r14
    2ffe:	0e 94 99 04 	call	0x932	; 0x932 <ld_clust>
    3002:	f8 01       	movw	r30, r16
    3004:	66 83       	std	Z+6, r22	; 0x06
    3006:	77 83       	std	Z+7, r23	; 0x07
    3008:	80 87       	std	Z+8, r24	; 0x08
    300a:	91 87       	std	Z+9, r25	; 0x09
    300c:	14 c0       	rjmp	.+40     	; 0x3036 <f_opendir+0xa8>
			if (res == FR_OK) {
				dj->id = fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    300e:	84 30       	cpi	r24, 0x04	; 4
    3010:	29 f0       	breq	.+10     	; 0x301c <f_opendir+0x8e>
		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
    3012:	88 23       	and	r24, r24
    3014:	71 f0       	breq	.+28     	; 0x3032 <f_opendir+0xa4>
    3016:	03 c0       	rjmp	.+6      	; 0x301e <f_opendir+0x90>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = ld_clust(fs, dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    3018:	85 e0       	ldi	r24, 0x05	; 5
    301a:	01 c0       	rjmp	.+2      	; 0x301e <f_opendir+0x90>
			if (res == FR_OK) {
				dj->id = fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    301c:	85 e0       	ldi	r24, 0x05	; 5
		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
    301e:	d8 01       	movw	r26, r16
    3020:	1d 92       	st	X+, r1
    3022:	1c 92       	st	X, r1
    3024:	16 c0       	rjmp	.+44     	; 0x3052 <f_opendir+0xc4>
	} else {
		dj->fs = 0;
    3026:	f8 01       	movw	r30, r16
    3028:	11 82       	std	Z+1, r1	; 0x01
    302a:	10 82       	st	Z, r1
    302c:	12 c0       	rjmp	.+36     	; 0x3052 <f_opendir+0xc4>
	FRESULT res;
	FATFS *fs;
	DEF_NAMEBUF;


	if (!dj) return FR_INVALID_OBJECT;
    302e:	89 e0       	ldi	r24, 0x09	; 9
    3030:	10 c0       	rjmp	.+32     	; 0x3052 <f_opendir+0xc4>
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	0e c0       	rjmp	.+28     	; 0x3052 <f_opendir+0xc4>
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = fs->id;
    3036:	d7 01       	movw	r26, r14
    3038:	16 96       	adiw	r26, 0x06	; 6
    303a:	8d 91       	ld	r24, X+
    303c:	9c 91       	ld	r25, X
    303e:	17 97       	sbiw	r26, 0x07	; 7
    3040:	f8 01       	movw	r30, r16
    3042:	93 83       	std	Z+3, r25	; 0x03
    3044:	82 83       	std	Z+2, r24	; 0x02
				res = dir_sdi(dj, 0);			/* Rewind dir */
    3046:	60 e0       	ldi	r22, 0x00	; 0
    3048:	70 e0       	ldi	r23, 0x00	; 0
    304a:	c8 01       	movw	r24, r16
    304c:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <dir_sdi>
    3050:	de cf       	rjmp	.-68     	; 0x300e <f_opendir+0x80>
	} else {
		dj->fs = 0;
	}

	LEAVE_FF(fs, res);
}
    3052:	2e 96       	adiw	r28, 0x0e	; 14
    3054:	0f b6       	in	r0, 0x3f	; 63
    3056:	f8 94       	cli
    3058:	de bf       	out	0x3e, r29	; 62
    305a:	0f be       	out	0x3f, r0	; 63
    305c:	cd bf       	out	0x3d, r28	; 61
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	1f 91       	pop	r17
    3064:	0f 91       	pop	r16
    3066:	ff 90       	pop	r15
    3068:	ef 90       	pop	r14
    306a:	08 95       	ret

0000306c <fat_init>:
int result=1;
char buff[] = "hellooooooo";
int buff_stat;

void fat_init(void){
	errCode = -1;
    306c:	8f ef       	ldi	r24, 0xFF	; 255
    306e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <errCode>

	while (errCode != FR_OK){                               //go until f_open returns FR_OK (function successful)
    3072:	0c c0       	rjmp	.+24     	; 0x308c <fat_init+0x20>
		errCode = f_mount(0, &fatfs);                       //mount drive number 0
    3074:	6c e6       	ldi	r22, 0x6C	; 108
    3076:	73 e0       	ldi	r23, 0x03	; 3
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	dd d9       	rcall	.-3142   	; 0x2436 <f_mount>
    307c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <errCode>
		//errCode = f_opendir(&dir, "/");				    	//root directory
//
		//errCode = f_open(&file, "/data.txt", FA_OPEN_ALWAYS | FA_WRITE);
		//f_lseek(&file, f_size(&file)); // f_size(&file)
		if(errCode != FR_OK){
    3080:	88 23       	and	r24, r24
    3082:	21 f0       	breq	.+8      	; 0x308c <fat_init+0x20>
			result=0; //used as a debugging flag
    3084:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <result+0x1>
    3088:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <result>
int buff_stat;

void fat_init(void){
	errCode = -1;

	while (errCode != FR_OK){                               //go until f_open returns FR_OK (function successful)
    308c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <errCode>
    3090:	81 11       	cpse	r24, r1
    3092:	f0 cf       	rjmp	.-32     	; 0x3074 <fat_init+0x8>
		//f_lseek(&file, f_size(&file)); // f_size(&file)
		if(errCode != FR_OK){
			result=0; //used as a debugging flag
		}
	}
}
    3094:	08 95       	ret

00003096 <get_position>:

void get_position()
{
    3096:	ef 92       	push	r14
    3098:	ff 92       	push	r15
    309a:	0f 93       	push	r16
    309c:	1f 93       	push	r17
    309e:	cf 93       	push	r28
    30a0:	df 93       	push	r29
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	67 97       	sbiw	r28, 0x17	; 23
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	f8 94       	cli
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	cd bf       	out	0x3d, r28	; 61
    30b2:	0f 2e       	mov	r0, r31
    30b4:	f2 e1       	ldi	r31, 0x12	; 18
    30b6:	ef 2e       	mov	r14, r31
    30b8:	f1 e0       	ldi	r31, 0x01	; 1
    30ba:	ff 2e       	mov	r15, r31
    30bc:	f0 2d       	mov	r31, r0
	
	unsigned char ch;
	unsigned char *gpgga = "$GPGGA,";
	unsigned char test_buffer[7];
	test_buffer[6] = '\0';
	int count = 0;
    30be:	00 e0       	ldi	r16, 0x00	; 0
    30c0:	10 e0       	ldi	r17, 0x00	; 0

	for (int i=0;i<7;i++) {
	
		ch = USART_Receive();	
    30c2:	af d0       	rcall	.+350    	; 0x3222 <USART_Receive>
		if (ch == gpgga[i]) {
    30c4:	f7 01       	movw	r30, r14
    30c6:	91 91       	ld	r25, Z+
    30c8:	7f 01       	movw	r14, r30
    30ca:	89 13       	cpse	r24, r25
    30cc:	42 c0       	rjmp	.+132    	; 0x3152 <get_position+0xbc>
			test_buffer[count] = ch;
			count++;
    30ce:	0f 5f       	subi	r16, 0xFF	; 255
    30d0:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char *gpgga = "$GPGGA,";
	unsigned char test_buffer[7];
	test_buffer[6] = '\0';
	int count = 0;

	for (int i=0;i<7;i++) {
    30d2:	07 30       	cpi	r16, 0x07	; 7
    30d4:	11 05       	cpc	r17, r1
			break; //break out of for loop and "start over" 
		}
	}
	if (count == 7){
	
		while(USART_Receive()!= ',');
    30d6:	a9 f7       	brne	.-22     	; 0x30c2 <get_position+0x2c>
    30d8:	a4 d0       	rcall	.+328    	; 0x3222 <USART_Receive>
    30da:	8c 32       	cpi	r24, 0x2C	; 44
    30dc:	e9 f7       	brne	.-6      	; 0x30d8 <get_position+0x42>
    30de:	e1 2c       	mov	r14, r1
    30e0:	00 e0       	ldi	r16, 0x00	; 0
		comma = 0;
		
		//parse and store latitide data
		while(comma!=2) {
			ch = USART_Receive();
    30e2:	10 e0       	ldi	r17, 0x00	; 0
    30e4:	9e d0       	rcall	.+316    	; 0x3222 <USART_Receive>
			if(ch != ',' && comma < 2) {
    30e6:	8c 32       	cpi	r24, 0x2C	; 44
    30e8:	09 f4       	brne	.+2      	; 0x30ec <get_position+0x56>
    30ea:	74 c0       	rjmp	.+232    	; 0x31d4 <get_position+0x13e>
    30ec:	02 30       	cpi	r16, 0x02	; 2
    30ee:	11 05       	cpc	r17, r1
    30f0:	5c f4       	brge	.+22     	; 0x3108 <get_position+0x72>
				latitude[lat_post] = ch;
    30f2:	e1 e0       	ldi	r30, 0x01	; 1
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	ec 0f       	add	r30, r28
    30f8:	fd 1f       	adc	r31, r29
    30fa:	ee 0d       	add	r30, r14
    30fc:	f1 1d       	adc	r31, r1
    30fe:	80 83       	st	Z, r24
				lat_post++;
    3100:	e3 94       	inc	r14
    3102:	02 c0       	rjmp	.+4      	; 0x3108 <get_position+0x72>
			}
			if (ch == ',' && comma != 2){
				comma++;
    3104:	0f 5f       	subi	r16, 0xFF	; 255
    3106:	1f 4f       	sbci	r17, 0xFF	; 255
	
		while(USART_Receive()!= ',');
		comma = 0;
		
		//parse and store latitide data
		while(comma!=2) {
    3108:	02 30       	cpi	r16, 0x02	; 2
    310a:	11 05       	cpc	r17, r1
    310c:	59 f7       	brne	.-42     	; 0x30e4 <get_position+0x4e>
    310e:	f1 2c       	mov	r15, r1
    3110:	02 e0       	ldi	r16, 0x02	; 2
    3112:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		
		//parse and store longitude data
		while (comma >= 2 && comma <4){
			ch = USART_Receive();
    3114:	12 c0       	rjmp	.+36     	; 0x313a <get_position+0xa4>
    3116:	85 d0       	rcall	.+266    	; 0x3222 <USART_Receive>
			if(ch != ',' && comma < 4) {
    3118:	8c 32       	cpi	r24, 0x2C	; 44
    311a:	09 f4       	brne	.+2      	; 0x311e <get_position+0x88>
    311c:	60 c0       	rjmp	.+192    	; 0x31de <get_position+0x148>
    311e:	04 30       	cpi	r16, 0x04	; 4
    3120:	11 05       	cpc	r17, r1
    3122:	5c f4       	brge	.+22     	; 0x313a <get_position+0xa4>
				longitude[long_post] = ch;
    3124:	ec e0       	ldi	r30, 0x0C	; 12
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	ec 0f       	add	r30, r28
    312a:	fd 1f       	adc	r31, r29
    312c:	ef 0d       	add	r30, r15
    312e:	f1 1d       	adc	r31, r1
    3130:	80 83       	st	Z, r24
				long_post++;
    3132:	f3 94       	inc	r15
    3134:	02 c0       	rjmp	.+4      	; 0x313a <get_position+0xa4>
			}
			if (ch == ',' && comma != 4){
				comma++;
    3136:	0f 5f       	subi	r16, 0xFF	; 255
    3138:	1f 4f       	sbci	r17, 0xFF	; 255
				comma++;
			}
		}
		
		//parse and store longitude data
		while (comma >= 2 && comma <4){
    313a:	c8 01       	movw	r24, r16
    313c:	02 97       	sbiw	r24, 0x02	; 2
    313e:	02 97       	sbiw	r24, 0x02	; 2
    3140:	50 f3       	brcs	.-44     	; 0x3116 <get_position+0x80>
				comma++;
			}
		}
			
		//null terminating and reseting variables 
		latitude[lat_post] = '\0';
    3142:	fe 01       	movw	r30, r28
    3144:	ee 0d       	add	r30, r14
    3146:	f1 1d       	adc	r31, r1
    3148:	11 82       	std	Z+1, r1	; 0x01
		longitude[long_post] = '\0';
    314a:	fe 01       	movw	r30, r28
    314c:	ef 0d       	add	r30, r15
    314e:	f1 1d       	adc	r31, r1
    3150:	14 86       	std	Z+12, r1	; 0x0c
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3152:	ff e7       	ldi	r31, 0x7F	; 127
    3154:	2a e1       	ldi	r18, 0x1A	; 26
    3156:	86 e0       	ldi	r24, 0x06	; 6
    3158:	f1 50       	subi	r31, 0x01	; 1
    315a:	20 40       	sbci	r18, 0x00	; 0
    315c:	80 40       	sbci	r24, 0x00	; 0
    315e:	e1 f7       	brne	.-8      	; 0x3158 <get_position+0xc2>
    3160:	00 c0       	rjmp	.+0      	; 0x3162 <get_position+0xcc>
    3162:	00 00       	nop
	
//	print_data(latitude,longitude);

	_delay_ms(2000);
	
	errCode = f_opendir(&dir, "/");				    	//root directory
    3164:	6a e1       	ldi	r22, 0x1A	; 26
    3166:	71 e0       	ldi	r23, 0x01	; 1
    3168:	85 e5       	ldi	r24, 0x55	; 85
    316a:	93 e0       	ldi	r25, 0x03	; 3
    316c:	10 df       	rcall	.-480    	; 0x2f8e <f_opendir>
    316e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <errCode>

	errCode = f_open(&file, "/data.txt", FA_OPEN_ALWAYS | FA_WRITE);
    3172:	42 e1       	ldi	r20, 0x12	; 18
    3174:	6c e1       	ldi	r22, 0x1C	; 28
    3176:	71 e0       	ldi	r23, 0x01	; 1
    3178:	83 e3       	ldi	r24, 0x33	; 51
    317a:	91 e0       	ldi	r25, 0x01	; 1
    317c:	72 d9       	rcall	.-3356   	; 0x2462 <f_open>
    317e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <errCode>
	f_lseek(&file, f_size(&file)); // f_size(&file)
    3182:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <file+0xa>
    3186:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <file+0xb>
    318a:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <file+0xc>
    318e:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <file+0xd>
    3192:	83 e3       	ldi	r24, 0x33	; 51
    3194:	91 e0       	ldi	r25, 0x01	; 1
    3196:	ef dc       	rcall	.-1570   	; 0x2b76 <f_lseek>
	errCode = f_write(&file, latitude, 11, &bytesRead); // Will attempt to write string 'helloworld' to file (data.txt)
    3198:	2e e2       	ldi	r18, 0x2E	; 46
    319a:	31 e0       	ldi	r19, 0x01	; 1
    319c:	4b e0       	ldi	r20, 0x0B	; 11
    319e:	50 e0       	ldi	r21, 0x00	; 0
    31a0:	be 01       	movw	r22, r28
    31a2:	6f 5f       	subi	r22, 0xFF	; 255
    31a4:	7f 4f       	sbci	r23, 0xFF	; 255
    31a6:	83 e3       	ldi	r24, 0x33	; 51
    31a8:	91 e0       	ldi	r25, 0x01	; 1
    31aa:	8b da       	rcall	.-2794   	; 0x26c2 <f_write>
    31ac:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <errCode>
	errCode = f_write(&file, longitude, 12, &bytesRead);
    31b0:	2e e2       	ldi	r18, 0x2E	; 46
    31b2:	31 e0       	ldi	r19, 0x01	; 1
    31b4:	4c e0       	ldi	r20, 0x0C	; 12
    31b6:	50 e0       	ldi	r21, 0x00	; 0
    31b8:	be 01       	movw	r22, r28
    31ba:	64 5f       	subi	r22, 0xF4	; 244
    31bc:	7f 4f       	sbci	r23, 0xFF	; 255
    31be:	83 e3       	ldi	r24, 0x33	; 51
    31c0:	91 e0       	ldi	r25, 0x01	; 1
    31c2:	7f da       	rcall	.-2818   	; 0x26c2 <f_write>
    31c4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <errCode>
	errCode = f_close(&file);
    31c8:	83 e3       	ldi	r24, 0x33	; 51
    31ca:	91 e0       	ldi	r25, 0x01	; 1
    31cc:	c9 dc       	rcall	.-1646   	; 0x2b60 <f_close>
    31ce:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <errCode>

	
}
    31d2:	0a c0       	rjmp	.+20     	; 0x31e8 <get_position+0x152>
			ch = USART_Receive();
			if(ch != ',' && comma < 2) {
				latitude[lat_post] = ch;
				lat_post++;
			}
			if (ch == ',' && comma != 2){
    31d4:	02 30       	cpi	r16, 0x02	; 2
    31d6:	11 05       	cpc	r17, r1
    31d8:	09 f0       	breq	.+2      	; 0x31dc <get_position+0x146>
    31da:	94 cf       	rjmp	.-216    	; 0x3104 <get_position+0x6e>
    31dc:	98 cf       	rjmp	.-208    	; 0x310e <get_position+0x78>
			ch = USART_Receive();
			if(ch != ',' && comma < 4) {
				longitude[long_post] = ch;
				long_post++;
			}
			if (ch == ',' && comma != 4){
    31de:	04 30       	cpi	r16, 0x04	; 4
    31e0:	11 05       	cpc	r17, r1
    31e2:	09 f0       	breq	.+2      	; 0x31e6 <get_position+0x150>
    31e4:	a8 cf       	rjmp	.-176    	; 0x3136 <get_position+0xa0>
    31e6:	ad cf       	rjmp	.-166    	; 0x3142 <get_position+0xac>
	errCode = f_write(&file, latitude, 11, &bytesRead); // Will attempt to write string 'helloworld' to file (data.txt)
	errCode = f_write(&file, longitude, 12, &bytesRead);
	errCode = f_close(&file);

	
}
    31e8:	67 96       	adiw	r28, 0x17	; 23
    31ea:	0f b6       	in	r0, 0x3f	; 63
    31ec:	f8 94       	cli
    31ee:	de bf       	out	0x3e, r29	; 62
    31f0:	0f be       	out	0x3f, r0	; 63
    31f2:	cd bf       	out	0x3d, r28	; 61
    31f4:	df 91       	pop	r29
    31f6:	cf 91       	pop	r28
    31f8:	1f 91       	pop	r17
    31fa:	0f 91       	pop	r16
    31fc:	ff 90       	pop	r15
    31fe:	ef 90       	pop	r14
    3200:	08 95       	ret

00003202 <main>:
	/* Send initialization commands to setup LCD */
//	init_lcd();
//	_delay_ms(100);

	/* Send initialization commands to setup USART communication */
	USART_Init();
    3202:	03 d0       	rcall	.+6      	; 0x320a <USART_Init>

//	cli(); 
	fat_init();
    3204:	33 df       	rcall	.-410    	; 0x306c <fat_init>
	while(1){
		get_position();
    3206:	47 df       	rcall	.-370    	; 0x3096 <get_position>
    3208:	fe cf       	rjmp	.-4      	; 0x3206 <main+0x4>

0000320a <USART_Init>:
    320a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
#include "USART.h"

void USART_Init(void){
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR0_VALUE>>8);
	UBRR0L = (unsigned char)UBRR0_VALUE;
    320e:	83 e3       	ldi	r24, 0x33	; 51
    3210:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0);//|(1<<RXCIE0);
    3214:	80 e1       	ldi	r24, 0x10	; 16
    3216:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8 data bit, 1 stop bit */
	UCSR0C = (3<<UCSZ00);
    321a:	86 e0       	ldi	r24, 0x06	; 6
    321c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    3220:	08 95       	ret

00003222 <USART_Receive>:
}

unsigned char USART_Receive(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
    3222:	e0 ec       	ldi	r30, 0xC0	; 192
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	80 81       	ld	r24, Z
    3228:	88 23       	and	r24, r24
    322a:	ec f7       	brge	.-6      	; 0x3226 <USART_Receive+0x4>
	/* Get and return received data from buffer */
	return UDR0;
    322c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    3230:	08 95       	ret

00003232 <__udivmodsi4>:
    3232:	a1 e2       	ldi	r26, 0x21	; 33
    3234:	1a 2e       	mov	r1, r26
    3236:	aa 1b       	sub	r26, r26
    3238:	bb 1b       	sub	r27, r27
    323a:	fd 01       	movw	r30, r26
    323c:	0d c0       	rjmp	.+26     	; 0x3258 <__udivmodsi4_ep>

0000323e <__udivmodsi4_loop>:
    323e:	aa 1f       	adc	r26, r26
    3240:	bb 1f       	adc	r27, r27
    3242:	ee 1f       	adc	r30, r30
    3244:	ff 1f       	adc	r31, r31
    3246:	a2 17       	cp	r26, r18
    3248:	b3 07       	cpc	r27, r19
    324a:	e4 07       	cpc	r30, r20
    324c:	f5 07       	cpc	r31, r21
    324e:	20 f0       	brcs	.+8      	; 0x3258 <__udivmodsi4_ep>
    3250:	a2 1b       	sub	r26, r18
    3252:	b3 0b       	sbc	r27, r19
    3254:	e4 0b       	sbc	r30, r20
    3256:	f5 0b       	sbc	r31, r21

00003258 <__udivmodsi4_ep>:
    3258:	66 1f       	adc	r22, r22
    325a:	77 1f       	adc	r23, r23
    325c:	88 1f       	adc	r24, r24
    325e:	99 1f       	adc	r25, r25
    3260:	1a 94       	dec	r1
    3262:	69 f7       	brne	.-38     	; 0x323e <__udivmodsi4_loop>
    3264:	60 95       	com	r22
    3266:	70 95       	com	r23
    3268:	80 95       	com	r24
    326a:	90 95       	com	r25
    326c:	9b 01       	movw	r18, r22
    326e:	ac 01       	movw	r20, r24
    3270:	bd 01       	movw	r22, r26
    3272:	cf 01       	movw	r24, r30
    3274:	08 95       	ret

00003276 <__tablejump2__>:
    3276:	ee 0f       	add	r30, r30
    3278:	ff 1f       	adc	r31, r31
    327a:	00 24       	eor	r0, r0
    327c:	00 1c       	adc	r0, r0
    327e:	0b be       	out	0x3b, r0	; 59
    3280:	07 90       	elpm	r0, Z+
    3282:	f6 91       	elpm	r31, Z
    3284:	e0 2d       	mov	r30, r0
    3286:	09 94       	ijmp

00003288 <__muluhisi3>:
    3288:	09 d0       	rcall	.+18     	; 0x329c <__umulhisi3>
    328a:	a5 9f       	mul	r26, r21
    328c:	90 0d       	add	r25, r0
    328e:	b4 9f       	mul	r27, r20
    3290:	90 0d       	add	r25, r0
    3292:	a4 9f       	mul	r26, r20
    3294:	80 0d       	add	r24, r0
    3296:	91 1d       	adc	r25, r1
    3298:	11 24       	eor	r1, r1
    329a:	08 95       	ret

0000329c <__umulhisi3>:
    329c:	a2 9f       	mul	r26, r18
    329e:	b0 01       	movw	r22, r0
    32a0:	b3 9f       	mul	r27, r19
    32a2:	c0 01       	movw	r24, r0
    32a4:	a3 9f       	mul	r26, r19
    32a6:	70 0d       	add	r23, r0
    32a8:	81 1d       	adc	r24, r1
    32aa:	11 24       	eor	r1, r1
    32ac:	91 1d       	adc	r25, r1
    32ae:	b2 9f       	mul	r27, r18
    32b0:	70 0d       	add	r23, r0
    32b2:	81 1d       	adc	r24, r1
    32b4:	11 24       	eor	r1, r1
    32b6:	91 1d       	adc	r25, r1
    32b8:	08 95       	ret

000032ba <_exit>:
    32ba:	f8 94       	cli

000032bc <__stop_program>:
    32bc:	ff cf       	rjmp	.-2      	; 0x32bc <__stop_program>
